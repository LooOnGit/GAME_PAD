
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009888  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009994  08009994  0000a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a0c  08009a0c  0000b164  2**0
                  CONTENTS
  4 .ARM          00000000  08009a0c  08009a0c  0000b164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a0c  08009a0c  0000b164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a0c  08009a0c  0000aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a10  08009a10  0000aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08009a14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000164  08009b78  0000b164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  08009b78  0000ba3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146b0  00000000  00000000  0000b18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003546  00000000  00000000  0001f83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00022d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f27  00000000  00000000  00024140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae1d  00000000  00000000  00025067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190d8  00000000  00000000  0003fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094003  00000000  00000000  00058f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecf5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000ecfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f21c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	0800997c 	.word	0x0800997c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	0800997c 	.word	0x0800997c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc05 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f87f 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa27 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f955 	bl	800040c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000162:	f000 f8d7 	bl	8000314 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000166:	f000 f913 	bl	8000390 <MX_ADC2_Init>
  MX_TIM1_Init();
 800016a:	f000 f97d 	bl	8000468 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800016e:	f009 f821 	bl	80091b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MCP23017_EnablePullUps();
 8000172:	f007 fd70 	bl	8007c56 <MCP23017_EnablePullUps>

  //mode digital
  TLC59116_Init(&hi2c1);
 8000176:	4831      	ldr	r0, [pc, #196]	@ (800023c <main+0xf0>)
 8000178:	f007 fd7f 	bl	8007c7a <TLC59116_Init>

  //mode pwm
  TLC59116_Set_All_PWM_Mode(&hi2c1);
 800017c:	482f      	ldr	r0, [pc, #188]	@ (800023c <main+0xf0>)
 800017e:	f007 fda4 	bl	8007cca <TLC59116_Set_All_PWM_Mode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000182:	2104      	movs	r1, #4
 8000184:	482e      	ldr	r0, [pc, #184]	@ (8000240 <main+0xf4>)
 8000186:	f004 fb69 	bl	800485c <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);     // Nếu bạn dùng CH2 chính
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // CH2N → xuất ra PB14
 800018a:	2104      	movs	r1, #4
 800018c:	482c      	ldr	r0, [pc, #176]	@ (8000240 <main+0xf4>)
 800018e:	f005 f841 	bl	8005214 <HAL_TIMEx_PWMN_Start>
//		        TLC59116_Set_PWM(&hi2c1, j, i); // Tăng độ sáng OUT0
//	    	}
//	        HAL_Delay(10);
//	    }
	//control led follow PWM
    HAL_ADC_Start(&hadc1);
 8000192:	482c      	ldr	r0, [pc, #176]	@ (8000244 <main+0xf8>)
 8000194:	f000 fd1e 	bl	8000bd4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000198:	2164      	movs	r1, #100	@ 0x64
 800019a:	482a      	ldr	r0, [pc, #168]	@ (8000244 <main+0xf8>)
 800019c:	f000 fdf4 	bl	8000d88 <HAL_ADC_PollForConversion>
    ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80001a0:	4828      	ldr	r0, [pc, #160]	@ (8000244 <main+0xf8>)
 80001a2:	f000 fef7 	bl	8000f94 <HAL_ADC_GetValue>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b27      	ldr	r3, [pc, #156]	@ (8000248 <main+0xfc>)
 80001ac:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 80001ae:	4825      	ldr	r0, [pc, #148]	@ (8000244 <main+0xf8>)
 80001b0:	f000 fdbe 	bl	8000d30 <HAL_ADC_Stop>
    value_ledPWM = (ADC_VAL * 255)/4095;
 80001b4:	4b24      	ldr	r3, [pc, #144]	@ (8000248 <main+0xfc>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4613      	mov	r3, r2
 80001ba:	021b      	lsls	r3, r3, #8
 80001bc:	1a9b      	subs	r3, r3, r2
 80001be:	4a23      	ldr	r2, [pc, #140]	@ (800024c <main+0x100>)
 80001c0:	fb82 1203 	smull	r1, r2, r2, r3
 80001c4:	441a      	add	r2, r3
 80001c6:	12d2      	asrs	r2, r2, #11
 80001c8:	17db      	asrs	r3, r3, #31
 80001ca:	1ad3      	subs	r3, r2, r3
 80001cc:	4a20      	ldr	r2, [pc, #128]	@ (8000250 <main+0x104>)
 80001ce:	6013      	str	r3, [r2, #0]
	for(uint8_t j = 0; j < 14; j++){
 80001d0:	2300      	movs	r3, #0
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	e00a      	b.n	80001ec <main+0xa0>
		TLC59116_Set_PWM(&hi2c1, j, value_ledPWM); // Tăng độ sáng OUT0
 80001d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000250 <main+0x104>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4619      	mov	r1, r3
 80001e0:	4816      	ldr	r0, [pc, #88]	@ (800023c <main+0xf0>)
 80001e2:	f007 fdb5 	bl	8007d50 <TLC59116_Set_PWM>
	for(uint8_t j = 0; j < 14; j++){
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3301      	adds	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b0d      	cmp	r3, #13
 80001f0:	d9f1      	bls.n	80001d6 <main+0x8a>
	}

	HAL_ADC_Start(&hadc2);
 80001f2:	4818      	ldr	r0, [pc, #96]	@ (8000254 <main+0x108>)
 80001f4:	f000 fcee 	bl	8000bd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80001f8:	2164      	movs	r1, #100	@ 0x64
 80001fa:	4816      	ldr	r0, [pc, #88]	@ (8000254 <main+0x108>)
 80001fc:	f000 fdc4 	bl	8000d88 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000200:	4814      	ldr	r0, [pc, #80]	@ (8000254 <main+0x108>)
 8000202:	f000 fec7 	bl	8000f94 <HAL_ADC_GetValue>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b0f      	ldr	r3, [pc, #60]	@ (8000248 <main+0xfc>)
 800020c:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 800020e:	4811      	ldr	r0, [pc, #68]	@ (8000254 <main+0x108>)
 8000210:	f000 fd8e 	bl	8000d30 <HAL_ADC_Stop>
	value_ledPWM = (ADC_VAL * 800)/4096;
 8000214:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <main+0xfc>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800021c:	fb02 f303 	mul.w	r3, r2, r3
 8000220:	2b00      	cmp	r3, #0
 8000222:	da01      	bge.n	8000228 <main+0xdc>
 8000224:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000228:	131b      	asrs	r3, r3, #12
 800022a:	461a      	mov	r2, r3
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <main+0x104>)
 800022e:	601a      	str	r2, [r3, #0]
    // �?i�?u khiển PWM: Tăng dần từ 0 đến 100%
//    for (uint16_t i = 0; i < 800; i++) {
//        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);  // Thay đổi duty cycle
//        HAL_Delay(10); // Delay để quan sát thay đổi
//    }
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_ledPWM);
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <main+0x104>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b02      	ldr	r3, [pc, #8]	@ (8000240 <main+0xf4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_ADC_Start(&hadc1);
 800023a:	e7aa      	b.n	8000192 <main+0x46>
 800023c:	200001e0 	.word	0x200001e0
 8000240:	20000234 	.word	0x20000234
 8000244:	20000180 	.word	0x20000180
 8000248:	2000027c 	.word	0x2000027c
 800024c:	80080081 	.word	0x80080081
 8000250:	20000280 	.word	0x20000280
 8000254:	200001b0 	.word	0x200001b0

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	@ 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f009 fb5c 	bl	8009924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fcb0 	bl	8003c14 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f9c1 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 ff1c 	bl	8004118 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e6:	f000 f9ab 	bl	8000640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002ea:	2312      	movs	r3, #18
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002f6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f004 f89a 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000306:	f000 f99b 	bl	8000640 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	@ 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000326:	4a19      	ldr	r2, [pc, #100]	@ (800038c <MX_ADC1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <MX_ADC1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_ADC1_Init+0x74>)
 800033e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000342:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_ADC1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000352:	f000 fb67 	bl	8000a24 <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 f970 	bl	8000640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000368:	2307      	movs	r3, #7
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000372:	f000 fe1b 	bl	8000fac <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 f960 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000180 	.word	0x20000180
 800038c:	40012400 	.word	0x40012400

08000390 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003a2:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <MX_ADC2_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ce:	f000 fb29 	bl	8000a24 <HAL_ADC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003d8:	f000 f932 	bl	8000640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003dc:	2301      	movs	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003e4:	2307      	movs	r3, #7
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ee:	f000 fddd 	bl	8000fac <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003f8:	f000 f922 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200001b0 	.word	0x200001b0
 8000408:	40012800 	.word	0x40012800

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b12      	ldr	r3, [pc, #72]	@ (800045c <MX_I2C1_Init+0x50>)
 8000412:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <MX_I2C1_Init+0x54>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_I2C1_Init+0x50>)
 8000418:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <MX_I2C1_Init+0x58>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_I2C1_Init+0x50>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_I2C1_Init+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <MX_I2C1_Init+0x50>)
 800042a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800042e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <MX_I2C1_Init+0x50>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_I2C1_Init+0x50>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_I2C1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <MX_I2C1_Init+0x50>)
 800044a:	f001 f9ed 	bl	8001828 <HAL_I2C_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000454:	f000 f8f4 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200001e0 	.word	0x200001e0
 8000460:	40005400 	.word	0x40005400
 8000464:	000186a0 	.word	0x000186a0

08000468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b096      	sub	sp, #88	@ 0x58
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2220      	movs	r2, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f009 fa3f 	bl	8009924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a6:	4b3f      	ldr	r3, [pc, #252]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004a8:	4a3f      	ldr	r2, [pc, #252]	@ (80005a8 <MX_TIM1_Init+0x140>)
 80004aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 599;
 80004ac:	4b3d      	ldr	r3, [pc, #244]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004ae:	f240 2257 	movw	r2, #599	@ 0x257
 80004b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b4:	4b3b      	ldr	r3, [pc, #236]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80004ba:	4b3a      	ldr	r3, [pc, #232]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004bc:	f240 321f 	movw	r2, #799	@ 0x31f
 80004c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c2:	4b38      	ldr	r3, [pc, #224]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c8:	4b36      	ldr	r3, [pc, #216]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ce:	4b35      	ldr	r3, [pc, #212]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004d4:	4833      	ldr	r0, [pc, #204]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004d6:	f004 f919 	bl	800470c <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004e0:	f000 f8ae 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004ee:	4619      	mov	r1, r3
 80004f0:	482c      	ldr	r0, [pc, #176]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 80004f2:	f004 fb17 	bl	8004b24 <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004fc:	f000 f8a0 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000500:	4828      	ldr	r0, [pc, #160]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 8000502:	f004 f952 	bl	80047aa <HAL_TIM_PWM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800050c:	f000 f898 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000518:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800051c:	4619      	mov	r1, r3
 800051e:	4821      	ldr	r0, [pc, #132]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 8000520:	f004 ff16 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800052a:	f000 f889 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052e:	2360      	movs	r3, #96	@ 0x60
 8000530:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25;
 8000532:	2319      	movs	r3, #25
 8000534:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000542:	2300      	movs	r3, #0
 8000544:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000546:	2300      	movs	r3, #0
 8000548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2204      	movs	r2, #4
 8000550:	4619      	mov	r1, r3
 8000552:	4814      	ldr	r0, [pc, #80]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 8000554:	f004 fa24 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800055e:	f000 f86f 	bl	8000640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000576:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 8000586:	f004 ff41 	bl	800540c <HAL_TIMEx_ConfigBreakDeadTime>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000590:	f000 f856 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <MX_TIM1_Init+0x13c>)
 8000596:	f000 f94d 	bl	8000834 <HAL_TIM_MspPostInit>

}
 800059a:	bf00      	nop
 800059c:	3758      	adds	r7, #88	@ 0x58
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000234 	.word	0x20000234
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a16      	ldr	r2, [pc, #88]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_GPIO_Init+0x8c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	480b      	ldr	r0, [pc, #44]	@ (800063c <MX_GPIO_Init+0x90>)
 800060e:	f001 f8f3 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2302      	movs	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_GPIO_Init+0x90>)
 800062a:	f000 ff61 	bl	80014f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010c00 	.word	0x40010c00

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a28      	ldr	r2, [pc, #160]	@ (800076c <HAL_ADC_MspInit+0xbc>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d122      	bne.n	8000716 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a26      	ldr	r2, [pc, #152]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000704:	2303      	movs	r3, #3
 8000706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	4619      	mov	r1, r3
 800070e:	4819      	ldr	r0, [pc, #100]	@ (8000774 <HAL_ADC_MspInit+0xc4>)
 8000710:	f000 feee 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000714:	e026      	b.n	8000764 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <HAL_ADC_MspInit+0xc8>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d121      	bne.n	8000764 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 8000726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_ADC_MspInit+0xc0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000754:	2303      	movs	r3, #3
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0xc4>)
 8000760:	f000 fec6 	bl	80014f0 <HAL_GPIO_Init>
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40012400 	.word	0x40012400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010800 	.word	0x40010800
 8000778:	40012800 	.word	0x40012800

0800077c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <HAL_I2C_MspInit+0x70>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d123      	bne.n	80007e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <HAL_I2C_MspInit+0x78>)
 80007c8:	f000 fe92 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a09      	ldr	r2, [pc, #36]	@ (800082c <HAL_TIM_Base_MspInit+0x34>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10b      	bne.n	8000822 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_TIM_Base_MspInit+0x38>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_TIM_Base_MspInit+0x38>)
 8000810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_TIM_Base_MspInit+0x38>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40012c00 	.word	0x40012c00
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <HAL_TIM_MspPostInit+0x5c>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d118      	bne.n	8000886 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_TIM_MspPostInit+0x60>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <HAL_TIM_MspPostInit+0x60>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_TIM_MspPostInit+0x60>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800086c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2302      	movs	r3, #2
 8000878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_TIM_MspPostInit+0x64>)
 8000882:	f000 fe35 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40012c00 	.word	0x40012c00
 8000894:	40021000 	.word	0x40021000
 8000898:	40010c00 	.word	0x40010c00

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f87e 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008fa:	f001 fd5d 	bl	80023b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000750 	.word	0x20000750

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000914:	f7ff fff8 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800091a:	490c      	ldr	r1, [pc, #48]	@ (800094c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800091c:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <LoopFillZerobss+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000930:	4c09      	ldr	r4, [pc, #36]	@ (8000958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f008 fff9 	bl	8009934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc03 	bl	800014c <main>
  bx lr
 8000946:	4770      	bx	lr
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000950:	08009a14 	.word	0x08009a14
  ldr r2, =_sbss
 8000954:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000958:	20000a3c 	.word	0x20000a3c

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 fd7b 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe66 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fd93 	bl	80014d6 <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 fd5b 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	@ (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000284 	.word	0x20000284

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	@ (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000284 	.word	0x20000284

08000a24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e0be      	b.n	8000bc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fe24 	bl	80006b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 fbf1 	bl	8001250 <ADC_ConversionStop_Disable>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f040 8099 	bne.w	8000bb2 <HAL_ADC_Init+0x18e>
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f040 8095 	bne.w	8000bb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a90:	f023 0302 	bic.w	r3, r3, #2
 8000a94:	f043 0202 	orr.w	r2, r3, #2
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7b1b      	ldrb	r3, [r3, #12]
 8000aaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000abc:	d003      	beq.n	8000ac6 <HAL_ADC_Init+0xa2>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d102      	bne.n	8000acc <HAL_ADC_Init+0xa8>
 8000ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aca:	e000      	b.n	8000ace <HAL_ADC_Init+0xaa>
 8000acc:	2300      	movs	r3, #0
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7d1b      	ldrb	r3, [r3, #20]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d119      	bne.n	8000b10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b1b      	ldrb	r3, [r3, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d109      	bne.n	8000af8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	035a      	lsls	r2, r3, #13
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	e00b      	b.n	8000b10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afc:	f043 0220 	orr.w	r2, r3, #32
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b08:	f043 0201 	orr.w	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	430a      	orrs	r2, r1
 8000b22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <HAL_ADC_Init+0x1a8>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	430b      	orrs	r3, r1
 8000b36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b40:	d003      	beq.n	8000b4a <HAL_ADC_Init+0x126>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d104      	bne.n	8000b54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	051b      	lsls	r3, r3, #20
 8000b52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_ADC_Init+0x1ac>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d10b      	bne.n	8000b90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b82:	f023 0303 	bic.w	r3, r3, #3
 8000b86:	f043 0201 	orr.w	r2, r3, #1
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b8e:	e018      	b.n	8000bc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b94:	f023 0312 	bic.w	r3, r3, #18
 8000b98:	f043 0210 	orr.w	r2, r3, #16
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ba4:	f043 0201 	orr.w	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bb0:	e007      	b.n	8000bc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb6:	f043 0210 	orr.w	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	ffe1f7fd 	.word	0xffe1f7fd
 8000bd0:	ff1f0efe 	.word	0xff1f0efe

08000bd4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Start+0x1a>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e098      	b.n	8000d20 <HAL_ADC_Start+0x14c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fad0 	bl	800119c <ADC_Enable>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8087 	bne.w	8000d16 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a41      	ldr	r2, [pc, #260]	@ (8000d28 <HAL_ADC_Start+0x154>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d105      	bne.n	8000c32 <HAL_ADC_Start+0x5e>
 8000c26:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <HAL_ADC_Start+0x158>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d115      	bne.n	8000c5e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d026      	beq.n	8000c9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c5c:	e01d      	b.n	8000c9a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <HAL_ADC_Start+0x158>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d004      	beq.n	8000c7e <HAL_ADC_Start+0xaa>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a2b      	ldr	r2, [pc, #172]	@ (8000d28 <HAL_ADC_Start+0x154>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10d      	bne.n	8000c9a <HAL_ADC_Start+0xc6>
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <HAL_ADC_Start+0x158>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	f023 0206 	bic.w	r2, r3, #6
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cb2:	e002      	b.n	8000cba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f06f 0202 	mvn.w	r2, #2
 8000cca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cda:	d113      	bne.n	8000d04 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ce0:	4a11      	ldr	r2, [pc, #68]	@ (8000d28 <HAL_ADC_Start+0x154>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d105      	bne.n	8000cf2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_ADC_Start+0x158>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d108      	bne.n	8000d04 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	e00c      	b.n	8000d1e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	e003      	b.n	8000d1e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40012800 	.word	0x40012800
 8000d2c:	40012400 	.word	0x40012400

08000d30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Stop+0x1a>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e01a      	b.n	8000d80 <HAL_ADC_Stop+0x50>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 fa7c 	bl	8001250 <ADC_ConversionStop_Disable>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d9e:	f7ff fe37 	bl	8000a10 <HAL_GetTick>
 8000da2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db6:	f043 0220 	orr.w	r2, r3, #32
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e0d3      	b.n	8000f72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d131      	bne.n	8000e3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d12a      	bne.n	8000e3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000de6:	e021      	b.n	8000e2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dee:	d01d      	beq.n	8000e2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_PollForConversion+0x7e>
 8000df6:	f7ff fe0b 	bl	8000a10 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d212      	bcs.n	8000e2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e18:	f043 0204 	orr.w	r2, r3, #4
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e0a2      	b.n	8000f72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0d6      	beq.n	8000de8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e3a:	e070      	b.n	8000f1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <HAL_ADC_PollForConversion+0x1f4>)
 8000e3e:	681c      	ldr	r4, [r3, #0]
 8000e40:	2002      	movs	r0, #2
 8000e42:	f003 fbad 	bl	80045a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e46:	4603      	mov	r3, r0
 8000e48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6919      	ldr	r1, [r3, #16]
 8000e52:	4b4b      	ldr	r3, [pc, #300]	@ (8000f80 <HAL_ADC_PollForConversion+0x1f8>)
 8000e54:	400b      	ands	r3, r1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_PollForConversion+0x104>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68d9      	ldr	r1, [r3, #12]
 8000e60:	4b48      	ldr	r3, [pc, #288]	@ (8000f84 <HAL_ADC_PollForConversion+0x1fc>)
 8000e62:	400b      	ands	r3, r1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d111      	bne.n	8000e8c <HAL_ADC_PollForConversion+0x104>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6919      	ldr	r1, [r3, #16]
 8000e6e:	4b46      	ldr	r3, [pc, #280]	@ (8000f88 <HAL_ADC_PollForConversion+0x200>)
 8000e70:	400b      	ands	r3, r1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d108      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x100>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68d9      	ldr	r1, [r3, #12]
 8000e7c:	4b43      	ldr	r3, [pc, #268]	@ (8000f8c <HAL_ADC_PollForConversion+0x204>)
 8000e7e:	400b      	ands	r3, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x100>
 8000e84:	2314      	movs	r3, #20
 8000e86:	e020      	b.n	8000eca <HAL_ADC_PollForConversion+0x142>
 8000e88:	2329      	movs	r3, #41	@ 0x29
 8000e8a:	e01e      	b.n	8000eca <HAL_ADC_PollForConversion+0x142>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6919      	ldr	r1, [r3, #16]
 8000e92:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <HAL_ADC_PollForConversion+0x200>)
 8000e94:	400b      	ands	r3, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_ADC_PollForConversion+0x120>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68d9      	ldr	r1, [r3, #12]
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f8c <HAL_ADC_PollForConversion+0x204>)
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00d      	beq.n	8000ec4 <HAL_ADC_PollForConversion+0x13c>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6919      	ldr	r1, [r3, #16]
 8000eae:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <HAL_ADC_PollForConversion+0x208>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d108      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x140>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	4b34      	ldr	r3, [pc, #208]	@ (8000f90 <HAL_ADC_PollForConversion+0x208>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_PollForConversion+0x140>
 8000ec4:	2354      	movs	r3, #84	@ 0x54
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_PollForConversion+0x142>
 8000ec8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000eca:	fb02 f303 	mul.w	r3, r2, r3
 8000ece:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ed0:	e021      	b.n	8000f16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d01a      	beq.n	8000f10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_PollForConversion+0x168>
 8000ee0:	f7ff fd96 	bl	8000a10 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d20f      	bcs.n	8000f10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d90b      	bls.n	8000f10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f043 0204 	orr.w	r2, r3, #4
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e030      	b.n	8000f72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d8d9      	bhi.n	8000ed2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f06f 0212 	mvn.w	r2, #18
 8000f26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f42:	d115      	bne.n	8000f70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d111      	bne.n	8000f70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	24924924 	.word	0x24924924
 8000f84:	00924924 	.word	0x00924924
 8000f88:	12492492 	.word	0x12492492
 8000f8c:	00492492 	.word	0x00492492
 8000f90:	00249249 	.word	0x00249249

08000f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x20>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e0dc      	b.n	8001186 <HAL_ADC_ConfigChannel+0x1da>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d81c      	bhi.n	8001016 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	3b05      	subs	r3, #5
 8000fee:	221f      	movs	r2, #31
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3b05      	subs	r3, #5
 8001008:	fa00 f203 	lsl.w	r2, r0, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	@ 0x34
 8001014:	e03c      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b0c      	cmp	r3, #12
 800101c:	d81c      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b23      	subs	r3, #35	@ 0x23
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4019      	ands	r1, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b23      	subs	r3, #35	@ 0x23
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	631a      	str	r2, [r3, #48]	@ 0x30
 8001056:	e01b      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b41      	subs	r3, #65	@ 0x41
 800106a:	221f      	movs	r2, #31
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4019      	ands	r1, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b41      	subs	r3, #65	@ 0x41
 8001084:	fa00 f203 	lsl.w	r2, r0, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d91c      	bls.n	80010d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	3b1e      	subs	r3, #30
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3b1e      	subs	r3, #30
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	e019      	b.n	8001106 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6919      	ldr	r1, [r3, #16]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	2207      	movs	r2, #7
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4019      	ands	r1, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b10      	cmp	r3, #16
 800110c:	d003      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001112:	2b11      	cmp	r3, #17
 8001114:	d132      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_ADC_ConfigChannel+0x1e4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d125      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d126      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800113c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b10      	cmp	r3, #16
 8001144:	d11a      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <HAL_ADC_ConfigChannel+0x1e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <HAL_ADC_ConfigChannel+0x1ec>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9a      	lsrs	r2, r3, #18
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115c:	e002      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3b01      	subs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f9      	bne.n	800115e <HAL_ADC_ConfigChannel+0x1b2>
 800116a:	e007      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001170:	f043 0220 	orr.w	r2, r3, #32
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40012400 	.word	0x40012400
 8001194:	20000000 	.word	0x20000000
 8001198:	431bde83 	.word	0x431bde83

0800119c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d040      	beq.n	800123c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <ADC_Enable+0xac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <ADC_Enable+0xb0>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011d8:	e002      	b.n	80011e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011e6:	f7ff fc13 	bl	8000a10 <HAL_GetTick>
 80011ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011ec:	e01f      	b.n	800122e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ee:	f7ff fc0f 	bl	8000a10 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d918      	bls.n	800122e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d011      	beq.n	800122e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	f043 0210 	orr.w	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e007      	b.n	800123e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d1d8      	bne.n	80011ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83

08001250 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12e      	bne.n	80012c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fbc9 	bl	8000a10 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001280:	e01b      	b.n	80012ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001282:	f7ff fbc5 	bl	8000a10 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d914      	bls.n	80012ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	f043 0210 	orr.w	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e007      	b.n	80012ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0dc      	beq.n	8001282 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4906      	ldr	r1, [pc, #24]	@ (800136c <__NVIC_EnableIRQ+0x34>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff2d 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff42 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	@ 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e169      	b.n	80017d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001504:	2201      	movs	r2, #1
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8158 	bne.w	80017d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a9a      	ldr	r2, [pc, #616]	@ (8001790 <HAL_GPIO_Init+0x2a0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d05e      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800152c:	4a98      	ldr	r2, [pc, #608]	@ (8001790 <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d875      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001532:	4a98      	ldr	r2, [pc, #608]	@ (8001794 <HAL_GPIO_Init+0x2a4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d058      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001538:	4a96      	ldr	r2, [pc, #600]	@ (8001794 <HAL_GPIO_Init+0x2a4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d86f      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800153e:	4a96      	ldr	r2, [pc, #600]	@ (8001798 <HAL_GPIO_Init+0x2a8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d052      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001544:	4a94      	ldr	r2, [pc, #592]	@ (8001798 <HAL_GPIO_Init+0x2a8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d869      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800154a:	4a94      	ldr	r2, [pc, #592]	@ (800179c <HAL_GPIO_Init+0x2ac>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d04c      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001550:	4a92      	ldr	r2, [pc, #584]	@ (800179c <HAL_GPIO_Init+0x2ac>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d863      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001556:	4a92      	ldr	r2, [pc, #584]	@ (80017a0 <HAL_GPIO_Init+0x2b0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d046      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800155c:	4a90      	ldr	r2, [pc, #576]	@ (80017a0 <HAL_GPIO_Init+0x2b0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d85d      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d82a      	bhi.n	80015bc <HAL_GPIO_Init+0xcc>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d859      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800156a:	a201      	add	r2, pc, #4	@ (adr r2, 8001570 <HAL_GPIO_Init+0x80>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015d7 	.word	0x080015d7
 800157c:	08001619 	.word	0x08001619
 8001580:	0800161f 	.word	0x0800161f
 8001584:	0800161f 	.word	0x0800161f
 8001588:	0800161f 	.word	0x0800161f
 800158c:	0800161f 	.word	0x0800161f
 8001590:	0800161f 	.word	0x0800161f
 8001594:	0800161f 	.word	0x0800161f
 8001598:	0800161f 	.word	0x0800161f
 800159c:	0800161f 	.word	0x0800161f
 80015a0:	0800161f 	.word	0x0800161f
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	0800161f 	.word	0x0800161f
 80015ac:	0800161f 	.word	0x0800161f
 80015b0:	0800161f 	.word	0x0800161f
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015e1 	.word	0x080015e1
 80015bc:	4a79      	ldr	r2, [pc, #484]	@ (80017a4 <HAL_GPIO_Init+0x2b4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c2:	e02c      	b.n	800161e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e029      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e024      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	3308      	adds	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e01f      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	330c      	adds	r3, #12
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e01a      	b.n	8001620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f2:	2304      	movs	r3, #4
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e013      	b.n	8001620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	611a      	str	r2, [r3, #16]
          break;
 800160a:	e009      	b.n	8001620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
          break;
 8001616:	e003      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x130>
          break;
 800161e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	@ 0xff
 8001624:	d801      	bhi.n	800162a <HAL_GPIO_Init+0x13a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e001      	b.n	800162e <HAL_GPIO_Init+0x13e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2bff      	cmp	r3, #255	@ 0xff
 8001634:	d802      	bhi.n	800163c <HAL_GPIO_Init+0x14c>
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x152>
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	3b08      	subs	r3, #8
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	210f      	movs	r1, #15
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	6a39      	ldr	r1, [r7, #32]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80b1 	beq.w	80017d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001670:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a4c      	ldr	r2, [pc, #304]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <HAL_GPIO_Init+0x2b8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001688:	4a48      	ldr	r2, [pc, #288]	@ (80017ac <HAL_GPIO_Init+0x2bc>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a40      	ldr	r2, [pc, #256]	@ (80017b0 <HAL_GPIO_Init+0x2c0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d013      	beq.n	80016dc <HAL_GPIO_Init+0x1ec>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3f      	ldr	r2, [pc, #252]	@ (80017b4 <HAL_GPIO_Init+0x2c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_GPIO_Init+0x1e8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3e      	ldr	r2, [pc, #248]	@ (80017b8 <HAL_GPIO_Init+0x2c8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d007      	beq.n	80016d4 <HAL_GPIO_Init+0x1e4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	@ (80017bc <HAL_GPIO_Init+0x2cc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_GPIO_Init+0x1e0>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e004      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_GPIO_Init+0x1ee>
 80016dc:	2300      	movs	r3, #0
 80016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ee:	492f      	ldr	r1, [pc, #188]	@ (80017ac <HAL_GPIO_Init+0x2bc>)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	492c      	ldr	r1, [pc, #176]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001716:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4928      	ldr	r1, [pc, #160]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001720:	4013      	ands	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4922      	ldr	r1, [pc, #136]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	491e      	ldr	r1, [pc, #120]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4918      	ldr	r1, [pc, #96]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4914      	ldr	r1, [pc, #80]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d021      	beq.n	80017c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	490e      	ldr	r1, [pc, #56]	@ (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e021      	b.n	80017d2 <HAL_GPIO_Init+0x2e2>
 800178e:	bf00      	nop
 8001790:	10320000 	.word	0x10320000
 8001794:	10310000 	.word	0x10310000
 8001798:	10220000 	.word	0x10220000
 800179c:	10210000 	.word	0x10210000
 80017a0:	10120000 	.word	0x10120000
 80017a4:	10110000 	.word	0x10110000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	4909      	ldr	r1, [pc, #36]	@ (80017f4 <HAL_GPIO_Init+0x304>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	3301      	adds	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f47f ae8e 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	372c      	adds	r7, #44	@ 0x2c
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e12b      	b.n	8001a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe ff94 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2224      	movs	r2, #36	@ 0x24
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800187a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800188a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800188c:	f002 fd8c 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a81      	ldr	r2, [pc, #516]	@ (8001a9c <HAL_I2C_Init+0x274>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d807      	bhi.n	80018ac <HAL_I2C_Init+0x84>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a80      	ldr	r2, [pc, #512]	@ (8001aa0 <HAL_I2C_Init+0x278>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	bf94      	ite	ls
 80018a4:	2301      	movls	r3, #1
 80018a6:	2300      	movhi	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e006      	b.n	80018ba <HAL_I2C_Init+0x92>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa4 <HAL_I2C_Init+0x27c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	bf94      	ite	ls
 80018b4:	2301      	movls	r3, #1
 80018b6:	2300      	movhi	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0e7      	b.n	8001a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a78      	ldr	r2, [pc, #480]	@ (8001aa8 <HAL_I2C_Init+0x280>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a9c <HAL_I2C_Init+0x274>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d802      	bhi.n	80018fc <HAL_I2C_Init+0xd4>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3301      	adds	r3, #1
 80018fa:	e009      	b.n	8001910 <HAL_I2C_Init+0xe8>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	4a69      	ldr	r2, [pc, #420]	@ (8001aac <HAL_I2C_Init+0x284>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	3301      	adds	r3, #1
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001922:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	495c      	ldr	r1, [pc, #368]	@ (8001a9c <HAL_I2C_Init+0x274>)
 800192c:	428b      	cmp	r3, r1
 800192e:	d819      	bhi.n	8001964 <HAL_I2C_Init+0x13c>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e59      	subs	r1, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fbb1 f3f3 	udiv	r3, r1, r3
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001944:	400b      	ands	r3, r1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00a      	beq.n	8001960 <HAL_I2C_Init+0x138>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e59      	subs	r1, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fbb1 f3f3 	udiv	r3, r1, r3
 8001958:	3301      	adds	r3, #1
 800195a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195e:	e051      	b.n	8001a04 <HAL_I2C_Init+0x1dc>
 8001960:	2304      	movs	r3, #4
 8001962:	e04f      	b.n	8001a04 <HAL_I2C_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d111      	bne.n	8001990 <HAL_I2C_Init+0x168>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e012      	b.n	80019b6 <HAL_I2C_Init+0x18e>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	0099      	lsls	r1, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Init+0x196>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e022      	b.n	8001a04 <HAL_I2C_Init+0x1dc>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10e      	bne.n	80019e4 <HAL_I2C_Init+0x1bc>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e58      	subs	r0, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	440b      	add	r3, r1
 80019d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019e2:	e00f      	b.n	8001a04 <HAL_I2C_Init+0x1dc>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	0099      	lsls	r1, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	6809      	ldr	r1, [r1, #0]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6911      	ldr	r1, [r2, #16]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68d2      	ldr	r2, [r2, #12]
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	000186a0 	.word	0x000186a0
 8001aa0:	001e847f 	.word	0x001e847f
 8001aa4:	003d08ff 	.word	0x003d08ff
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	10624dd3 	.word	0x10624dd3

08001ab0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aca:	f7fe ffa1 	bl	8000a10 <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	f040 80d9 	bne.w	8001c90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2319      	movs	r3, #25
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	496d      	ldr	r1, [pc, #436]	@ (8001c9c <HAL_I2C_Mem_Write+0x1ec>)
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f971 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
 8001af6:	e0cc      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_I2C_Mem_Write+0x56>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e0c5      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d007      	beq.n	8001b2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2221      	movs	r2, #33	@ 0x21
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2240      	movs	r2, #64	@ 0x40
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <HAL_I2C_Mem_Write+0x1f0>)
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b6e:	88f8      	ldrh	r0, [r7, #6]
 8001b70:	893a      	ldrh	r2, [r7, #8]
 8001b72:	8979      	ldrh	r1, [r7, #10]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f890 	bl	8001ca4 <I2C_RequestMemoryWrite>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d052      	beq.n	8001c30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e081      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fa36 	bl	8002004 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00d      	beq.n	8001bba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d107      	bne.n	8001bb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06b      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d11b      	bne.n	8001c30 <HAL_I2C_Mem_Write+0x180>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1aa      	bne.n	8001b8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa29 	bl	8002094 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d107      	bne.n	8001c60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e016      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	00100002 	.word	0x00100002
 8001ca0:	ffff0000 	.word	0xffff0000

08001ca4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	813b      	strh	r3, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f878 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf4:	d103      	bne.n	8001cfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e05f      	b.n	8001dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	492d      	ldr	r1, [pc, #180]	@ (8001dcc <I2C_RequestMemoryWrite+0x128>)
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f8d3 	bl	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04c      	b.n	8001dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f95e 	bl	8002004 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d107      	bne.n	8001d66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e02b      	b.n	8001dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d70:	893b      	ldrh	r3, [r7, #8]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	611a      	str	r2, [r3, #16]
 8001d7a:	e021      	b.n	8001dc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d7c:	893b      	ldrh	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f938 	bl	8002004 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00d      	beq.n	8001db6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d107      	bne.n	8001db2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e005      	b.n	8001dc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	00010002 	.word	0x00010002

08001dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de0:	e048      	b.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d044      	beq.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7fe fe11 	bl	8000a10 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d139      	bne.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10d      	bne.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	e00c      	b.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4013      	ands	r3, r2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d116      	bne.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e023      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10d      	bne.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	e00c      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d093      	beq.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ed2:	e071      	b.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d123      	bne.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e067      	b.n	8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d041      	beq.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f34:	f7fe fd6c 	bl	8000a10 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d302      	bcc.n	8001f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d136      	bne.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10c      	bne.n	8001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf14      	ite	ne
 8001f66:	2301      	movne	r3, #1
 8001f68:	2300      	moveq	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	e00b      	b.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	43da      	mvns	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e021      	b.n	8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10c      	bne.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e00b      	b.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f af6d 	bne.w	8001ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002010:	e034      	b.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f886 	bl	8002124 <I2C_IsAcknowledgeFailed>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e034      	b.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d028      	beq.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7fe fcf1 	bl	8000a10 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11d      	bne.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b80      	cmp	r3, #128	@ 0x80
 800204c:	d016      	beq.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	2b80      	cmp	r3, #128	@ 0x80
 8002088:	d1c3      	bne.n	8002012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a0:	e034      	b.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f83e 	bl	8002124 <I2C_IsAcknowledgeFailed>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e034      	b.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d028      	beq.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7fe fca9 	bl	8000a10 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11d      	bne.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d016      	beq.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d1c3      	bne.n	80020a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213a:	d11b      	bne.n	8002174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0204 	orr.w	r2, r3, #4
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0e8      	b.n	8002364 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f007 f938 	bl	800941c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 f9bc 	bl	800553c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ce:	f003 f992 	bl	80054f6 <USB_CoreInit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0bf      	b.n	8002364 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f9c0 	bl	8005570 <USB_SetCurrentMode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0b0      	b.n	8002364 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e03e      	b.n	8002286 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3311      	adds	r3, #17
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3310      	adds	r3, #16
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	3313      	adds	r3, #19
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3320      	adds	r3, #32
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3324      	adds	r3, #36	@ 0x24
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3301      	adds	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	791b      	ldrb	r3, [r3, #4]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	429a      	cmp	r2, r3
 800228e:	d3bb      	bcc.n	8002208 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e044      	b.n	8002320 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3b5      	bcc.n	8002296 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002334:	f003 f928 	bl	8005588 <USB_DevInit>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00c      	b.n	8002364 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fba8 	bl	8007ab2 <USB_DevDisconnect>

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_PCD_Start+0x16>
 800237e:	2302      	movs	r3, #2
 8002380:	e016      	b.n	80023b0 <HAL_PCD_Start+0x44>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 f8be 	bl	8005510 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002394:	2101      	movs	r1, #1
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f007 fa8d 	bl	80098b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 fb7c 	bl	8007a9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 fb7e 	bl	8007ac6 <USB_ReadInterrupts>
 80023ca:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fb03 	bl	80029e2 <PCD_EP_ISR_Handler>

    return;
 80023dc:	e119      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fa:	b292      	uxth	r2, r2
 80023fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f007 f886 	bl	8009512 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002406:	2100      	movs	r1, #0
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f905 	bl	8002618 <HAL_PCD_SetAddress>

    return;
 800240e:	e100      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800242c:	b292      	uxth	r2, r2
 800242e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002432:	e0ee      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002450:	b292      	uxth	r2, r2
 8002452:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002456:	e0dc      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d027      	beq.n	80024b2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800246a:	b29a      	uxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	b292      	uxth	r2, r2
 8002476:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0208 	bic.w	r2, r2, #8
 800248c:	b292      	uxth	r2, r2
 800248e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f007 f876 	bl	8009584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024b0:	e0af      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8083 	beq.w	80025c4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	77fb      	strb	r3, [r7, #31]
 80024c2:	e010      	b.n	80024e6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
 80024d2:	8812      	ldrh	r2, [r2, #0]
 80024d4:	b292      	uxth	r2, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	3320      	adds	r3, #32
 80024da:	443b      	add	r3, r7
 80024dc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	3301      	adds	r3, #1
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	d9eb      	bls.n	80024c4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	b292      	uxth	r2, r2
 8002500:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	b292      	uxth	r2, r2
 8002518:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800251c:	bf00      	nop
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002526:	b29b      	uxth	r3, r3
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f6      	beq.n	800251e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002542:	b292      	uxth	r2, r2
 8002544:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	e00f      	b.n	800256e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800254e:	7ffb      	ldrb	r3, [r7, #31]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4611      	mov	r1, r2
 8002556:	7ffa      	ldrb	r2, [r7, #31]
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	440a      	add	r2, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	3320      	adds	r3, #32
 8002560:	443b      	add	r3, r7
 8002562:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002566:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002568:	7ffb      	ldrb	r3, [r7, #31]
 800256a:	3301      	adds	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	2b07      	cmp	r3, #7
 8002572:	d9ec      	bls.n	800254e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	b292      	uxth	r2, r2
 8002588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259e:	b292      	uxth	r2, r2
 80025a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0204 	orr.w	r2, r2, #4
 80025b6:	b292      	uxth	r2, r2
 80025b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f006 ffc7 	bl	8009550 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025c2:	e026      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00f      	beq.n	80025ee <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025e0:	b292      	uxth	r2, r2
 80025e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 ff85 	bl	80094f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025ec:	e011      	b.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260a:	b292      	uxth	r2, r2
 800260c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002610:	bf00      	nop
  }
}
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_PCD_SetAddress+0x1a>
 800262e:	2302      	movs	r3, #2
 8002630:	e012      	b.n	8002658 <HAL_PCD_SetAddress+0x40>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fa15 	bl	8007a78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	4603      	mov	r3, r0
 8002670:	70fb      	strb	r3, [r7, #3]
 8002672:	460b      	mov	r3, r1
 8002674:	803b      	strh	r3, [r7, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800267e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da0e      	bge.n	80026a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 0207 	and.w	r2, r3, #7
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3310      	adds	r3, #16
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	705a      	strb	r2, [r3, #1]
 80026a2:	e00e      	b.n	80026c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026ce:	883a      	ldrh	r2, [r7, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	78ba      	ldrb	r2, [r7, #2]
 80026d8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026da:	78bb      	ldrb	r3, [r7, #2]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d102      	bne.n	80026e6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_PCD_EP_Open+0x94>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e00e      	b.n	8002712 <HAL_PCD_EP_Open+0xb2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 ff5e 	bl	80055c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002710:	7afb      	ldrb	r3, [r7, #11]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da0e      	bge.n	800274c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 0207 	and.w	r2, r3, #7
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3310      	adds	r3, #16
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e00e      	b.n	800276a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0207 	and.w	r2, r3, #7
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_EP_Close+0x6a>
 8002780:	2302      	movs	r3, #2
 8002782:	e00e      	b.n	80027a2 <HAL_PCD_EP_Close+0x88>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fad6 	bl	8005d44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	460b      	mov	r3, r1
 80027b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	f003 0207 	and.w	r2, r3, #7
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2200      	movs	r2, #0
 80027e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fc8d 	bl	800611c <USB_EPStartXfer>

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	f003 0207 	and.w	r2, r3, #7
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	3310      	adds	r3, #16
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2201      	movs	r2, #1
 8002856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	b2da      	uxtb	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6979      	ldr	r1, [r7, #20]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fc56 	bl	800611c <USB_EPStartXfer>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	7912      	ldrb	r2, [r2, #4]
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e04c      	b.n	8002932 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da0e      	bge.n	80028be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	f003 0207 	and.w	r2, r3, #7
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3310      	adds	r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	705a      	strb	r2, [r3, #1]
 80028bc:	e00c      	b.n	80028d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_EP_SetStall+0x7e>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e01c      	b.n	8002932 <HAL_PCD_EP_SetStall+0xb8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 ffb9 	bl	800787e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f005 f8de 	bl	8007ae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	7912      	ldrb	r2, [r2, #4]
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e040      	b.n	80029da <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da0e      	bge.n	800297e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 0207 	and.w	r2, r3, #7
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	3310      	adds	r3, #16
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	705a      	strb	r2, [r3, #1]
 800297c:	e00e      	b.n	800299c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 0207 	and.w	r2, r3, #7
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_PCD_EP_ClrStall+0x82>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e00e      	b.n	80029da <HAL_PCD_EP_ClrStall+0xa0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 ffa7 	bl	800791e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b096      	sub	sp, #88	@ 0x58
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ea:	e3bb      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002a06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 8175 	bne.w	8002cfa <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d14e      	bne.n	8002aba <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2c:	81fb      	strh	r3, [r7, #14]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3310      	adds	r3, #16
 8002a44:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	441a      	add	r2, r3
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a7e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a80:	2100      	movs	r1, #0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f006 fd1d 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7b5b      	ldrb	r3, [r3, #13]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8368 	beq.w	8003164 <PCD_EP_ISR_Handler+0x782>
 8002a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 8363 	bne.w	8003164 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7b5b      	ldrb	r3, [r3, #13]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	735a      	strb	r2, [r3, #13]
 8002ab8:	e354      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002acc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d034      	beq.n	8002b42 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	3306      	adds	r3, #6
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f005 f834 	bl	8007b84 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b28:	4013      	ands	r3, r2
 8002b2a:	823b      	strh	r3, [r7, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	8a3a      	ldrh	r2, [r7, #16]
 8002b32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b36:	b292      	uxth	r2, r2
 8002b38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f006 fc94 	bl	8009468 <HAL_PCD_SetupStageCallback>
 8002b40:	e310      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b42:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f280 830c 	bge.w	8003164 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b58:	4013      	ands	r3, r2
 8002b5a:	83fb      	strh	r3, [r7, #30]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	8bfa      	ldrh	r2, [r7, #30]
 8002b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b66:	b292      	uxth	r2, r2
 8002b68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3306      	adds	r3, #6
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b94:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d019      	beq.n	8002bd2 <PCD_EP_ISR_Handler+0x1f0>
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bac:	6959      	ldr	r1, [r3, #20]
 8002bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f004 ffe4 	bl	8007b84 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f006 fc5d 	bl	800948c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002bdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 82bd 	bne.w	8003164 <PCD_EP_ISR_Handler+0x782>
 8002bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bf6:	f000 82b5 	beq.w	8003164 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c30:	d91d      	bls.n	8002c6e <PCD_EP_ISR_Handler+0x28c>
 8002c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <PCD_EP_ISR_Handler+0x26a>
 8002c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	801a      	strh	r2, [r3, #0]
 8002c6c:	e026      	b.n	8002cbc <PCD_EP_ISR_Handler+0x2da>
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <PCD_EP_ISR_Handler+0x2aa>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	e017      	b.n	8002cbc <PCD_EP_ISR_Handler+0x2da>
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <PCD_EP_ISR_Handler+0x2c4>
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	029b      	lsls	r3, r3, #10
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ccc:	827b      	strh	r3, [r7, #18]
 8002cce:	8a7b      	ldrh	r3, [r7, #18]
 8002cd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002cd4:	827b      	strh	r3, [r7, #18]
 8002cd6:	8a7b      	ldrh	r3, [r7, #18]
 8002cd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002cdc:	827b      	strh	r3, [r7, #18]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	8a7b      	ldrh	r3, [r7, #18]
 8002ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	8013      	strh	r3, [r2, #0]
 8002cf8:	e234      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d0e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f280 80fc 	bge.w	8002f10 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d2e:	4013      	ands	r3, r2
 8002d30:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002d46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d4e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d125      	bne.n	8002db8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3306      	adds	r3, #6
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d94:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8092 	beq.w	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	6959      	ldr	r1, [r3, #20]
 8002daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dac:	88da      	ldrh	r2, [r3, #6]
 8002dae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002db2:	f004 fee7 	bl	8007b84 <USB_ReadPMA>
 8002db6:	e086      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dba:	78db      	ldrb	r3, [r3, #3]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d10a      	bne.n	8002dd6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9d9 	bl	8003180 <HAL_PCD_EP_DB_Receive>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002dd4:	e077      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	441a      	add	r2, r3
 8002e02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d024      	beq.n	8002e7e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02e      	beq.n	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6e:	6959      	ldr	r1, [r3, #20]
 8002e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e72:	891a      	ldrh	r2, [r3, #8]
 8002e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e78:	f004 fe84 	bl	8007b84 <USB_ReadPMA>
 8002e7c:	e023      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	3306      	adds	r3, #6
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002eaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb8:	6959      	ldr	r1, [r3, #20]
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	895a      	ldrh	r2, [r3, #10]
 8002ebe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ec2:	f004 fe5f 	bl	8007b84 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ece:	441a      	add	r2, r3
 8002ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002edc:	441a      	add	r2, r3
 8002ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <PCD_EP_ISR_Handler+0x514>
 8002eea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d206      	bcs.n	8002f04 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f006 fac5 	bl	800948c <HAL_PCD_DataOutStageCallback>
 8002f02:	e005      	b.n	8002f10 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f906 	bl	800611c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8123 	beq.w	8003164 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f1e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	78db      	ldrb	r3, [r3, #3]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 80a2 	bne.w	80030bc <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f80:	7b1b      	ldrb	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8093 	beq.w	80030ae <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d046      	beq.n	8003022 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d126      	bne.n	8002fea <PCD_EP_ISR_Handler+0x608>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	4413      	add	r3, r2
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	011a      	lsls	r2, r3, #4
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e061      	b.n	80030ae <PCD_EP_ISR_Handler+0x6cc>
 8002fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d15d      	bne.n	80030ae <PCD_EP_ISR_Handler+0x6cc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	4413      	add	r3, r2
 8003008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	011a      	lsls	r2, r3, #4
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	4413      	add	r3, r2
 8003014:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	2200      	movs	r2, #0
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e045      	b.n	80030ae <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d126      	bne.n	800307e <PCD_EP_ISR_Handler+0x69c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	4413      	add	r3, r2
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34
 8003048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	011a      	lsls	r2, r3, #4
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	4413      	add	r3, r2
 8003052:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003062:	b29a      	uxth	r2, r3
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e017      	b.n	80030ae <PCD_EP_ISR_Handler+0x6cc>
 800307e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d113      	bne.n	80030ae <PCD_EP_ISR_Handler+0x6cc>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003094:	4413      	add	r3, r2
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	011a      	lsls	r2, r3, #4
 800309e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f006 fa04 	bl	80094c2 <HAL_PCD_DataInStageCallback>
 80030ba:	e053      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d146      	bne.n	8003156 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	3302      	adds	r3, #2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80030f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d907      	bls.n	8003110 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003108:	1ad2      	subs	r2, r2, r3
 800310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310c:	619a      	str	r2, [r3, #24]
 800310e:	e002      	b.n	8003116 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800311e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f006 f9cc 	bl	80094c2 <HAL_PCD_DataInStageCallback>
 800312a:	e01b      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800312c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003134:	441a      	add	r2, r3
 8003136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003138:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003142:	441a      	add	r2, r3
 8003144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003146:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800314e:	4618      	mov	r0, r3
 8003150:	f002 ffe4 	bl	800611c <USB_EPStartXfer>
 8003154:	e006      	b.n	8003164 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003156:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800315a:	461a      	mov	r2, r3
 800315c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f91b 	bl	800339a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800316c:	b29b      	uxth	r3, r3
 800316e:	b21b      	sxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f6ff ac3b 	blt.w	80029ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3758      	adds	r7, #88	@ 0x58
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d07e      	beq.n	8003296 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	3302      	adds	r3, #2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	8b7b      	ldrh	r3, [r7, #26]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d306      	bcc.n	80031da <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	8b7b      	ldrh	r3, [r7, #26]
 80031d2:	1ad2      	subs	r2, r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e002      	b.n	80031e0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d123      	bne.n	8003230 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003202:	833b      	strh	r3, [r7, #24]
 8003204:	8b3b      	ldrh	r3, [r7, #24]
 8003206:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800320a:	833b      	strh	r3, [r7, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	8b3b      	ldrh	r3, [r7, #24]
 800321c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322c:	b29b      	uxth	r3, r3
 800322e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01f      	beq.n	800327a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003254:	82fb      	strh	r3, [r7, #22]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800326a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800326e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003272:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003276:	b29b      	uxth	r3, r3
 8003278:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800327a:	8b7b      	ldrh	r3, [r7, #26]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8087 	beq.w	8003390 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6959      	ldr	r1, [r3, #20]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	891a      	ldrh	r2, [r3, #8]
 800328e:	8b7b      	ldrh	r3, [r7, #26]
 8003290:	f004 fc78 	bl	8007b84 <USB_ReadPMA>
 8003294:	e07c      	b.n	8003390 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	3306      	adds	r3, #6
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	8b7b      	ldrh	r3, [r7, #26]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d306      	bcc.n	80032d8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	8b7b      	ldrh	r3, [r7, #26]
 80032d0:	1ad2      	subs	r2, r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	e002      	b.n	80032de <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d123      	bne.n	800332e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003300:	83fb      	strh	r3, [r7, #30]
 8003302:	8bfb      	ldrh	r3, [r7, #30]
 8003304:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003308:	83fb      	strh	r3, [r7, #30]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	441a      	add	r2, r3
 8003318:	8bfb      	ldrh	r3, [r7, #30]
 800331a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800331e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800332a:	b29b      	uxth	r3, r3
 800332c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11f      	bne.n	8003378 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800334e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003352:	83bb      	strh	r3, [r7, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	8bbb      	ldrh	r3, [r7, #28]
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800336c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003378:	8b7b      	ldrh	r3, [r7, #26]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6959      	ldr	r1, [r3, #20]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	895a      	ldrh	r2, [r3, #10]
 800338a:	8b7b      	ldrh	r3, [r7, #26]
 800338c:	f004 fbfa 	bl	8007b84 <USB_ReadPMA>
    }
  }

  return count;
 8003390:	8b7b      	ldrh	r3, [r7, #26]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b0a4      	sub	sp, #144	@ 0x90
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 81dd 	beq.w	800376e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	3302      	adds	r3, #2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d907      	bls.n	80033fc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033f4:	1ad2      	subs	r2, r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	619a      	str	r2, [r3, #24]
 80033fa:	e002      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 80b9 	bne.w	800357e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d126      	bne.n	8003462 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003428:	4413      	add	r3, r2
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	011a      	lsls	r2, r3, #4
 8003432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003434:	4413      	add	r3, r2
 8003436:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003446:	b29a      	uxth	r2, r3
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	801a      	strh	r2, [r3, #0]
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345a:	b29a      	uxth	r2, r3
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	801a      	strh	r2, [r3, #0]
 8003460:	e01a      	b.n	8003498 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d116      	bne.n	8003498 <HAL_PCD_EP_DB_Transmit+0xfe>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	4413      	add	r3, r2
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	011a      	lsls	r2, r3, #4
 8003488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348a:	4413      	add	r3, r2
 800348c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003490:	633b      	str	r3, [r7, #48]	@ 0x30
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	2200      	movs	r2, #0
 8003496:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d126      	bne.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	011a      	lsls	r2, r3, #4
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d8:	b29a      	uxth	r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e017      	b.n	8003524 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d113      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	4413      	add	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	011a      	lsls	r2, r3, #4
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	4413      	add	r3, r2
 8003518:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2200      	movs	r2, #0
 8003522:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f005 ffc9 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 82fc 	beq.w	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	82fb      	strh	r3, [r7, #22]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800356c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003578:	b29b      	uxth	r3, r3
 800357a:	8013      	strh	r3, [r2, #0]
 800357c:	e2da      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d021      	beq.n	80035cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80035b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f040 82ae 	bne.w	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035e0:	441a      	add	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035ee:	441a      	add	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d30b      	bcc.n	8003618 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	621a      	str	r2, [r3, #32]
 8003616:	e017      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003620:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003630:	e00a      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d165      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x382>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003664:	4413      	add	r3, r2
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	011a      	lsls	r2, r3, #4
 800366e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003670:	4413      	add	r3, r2
 8003672:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003682:	b29a      	uxth	r2, r3
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800368c:	2b3e      	cmp	r3, #62	@ 0x3e
 800368e:	d91d      	bls.n	80036cc <HAL_PCD_EP_DB_Transmit+0x332>
 8003690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x310>
 80036a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a6:	3b01      	subs	r3, #1
 80036a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e044      	b.n	8003756 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x350>
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e035      	b.n	8003756 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_PCD_EP_DB_Transmit+0x36a>
 80036fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003700:	3301      	adds	r3, #1
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29a      	uxth	r2, r3
 800370a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800370c:	b29b      	uxth	r3, r3
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	b29b      	uxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	b29a      	uxth	r2, r3
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e01c      	b.n	8003756 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d118      	bne.n	8003756 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	647b      	str	r3, [r7, #68]	@ 0x44
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003738:	4413      	add	r3, r2
 800373a:	647b      	str	r3, [r7, #68]	@ 0x44
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	011a      	lsls	r2, r3, #4
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	4413      	add	r3, r2
 8003746:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800374a:	643b      	str	r3, [r7, #64]	@ 0x40
 800374c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003750:	b29a      	uxth	r2, r3
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6959      	ldr	r1, [r3, #20]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	891a      	ldrh	r2, [r3, #8]
 8003762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003766:	b29b      	uxth	r3, r3
 8003768:	f004 f9c7 	bl	8007afa <USB_WritePMA>
 800376c:	e1e2      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	3306      	adds	r3, #6
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003796:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d307      	bcc.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037ae:	1ad2      	subs	r2, r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	619a      	str	r2, [r3, #24]
 80037b4:	e002      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 80c0 	bne.w	8003946 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d126      	bne.n	800381c <HAL_PCD_EP_DB_Transmit+0x482>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037e2:	4413      	add	r3, r2
 80037e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	011a      	lsls	r2, r3, #4
 80037ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ee:	4413      	add	r3, r2
 80037f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003800:	b29a      	uxth	r2, r3
 8003802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003814:	b29a      	uxth	r2, r3
 8003816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	e01a      	b.n	8003852 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d116      	bne.n	8003852 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	667b      	str	r3, [r7, #100]	@ 0x64
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003838:	4413      	add	r3, r2
 800383a:	667b      	str	r3, [r7, #100]	@ 0x64
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	011a      	lsls	r2, r3, #4
 8003842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003844:	4413      	add	r3, r2
 8003846:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800384a:	663b      	str	r3, [r7, #96]	@ 0x60
 800384c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	677b      	str	r3, [r7, #116]	@ 0x74
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d12b      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003874:	4413      	add	r3, r2
 8003876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	011a      	lsls	r2, r3, #4
 800387e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003880:	4413      	add	r3, r2
 8003882:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800388a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003896:	b29a      	uxth	r2, r3
 8003898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e017      	b.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d113      	bne.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ce:	4413      	add	r3, r2
 80038d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	011a      	lsls	r2, r3, #4
 80038d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038da:	4413      	add	r3, r2
 80038dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e4:	2200      	movs	r2, #0
 80038e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f005 fde7 	bl	80094c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 811a 	bne.w	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003938:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800393c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
 8003944:	e0f6      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d121      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800398c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003990:	b29b      	uxth	r3, r3
 8003992:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800399a:	2b01      	cmp	r3, #1
 800399c:	f040 80ca 	bne.w	8003b34 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039a8:	441a      	add	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039b6:	441a      	add	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d30b      	bcc.n	80039e0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	1ad2      	subs	r2, r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	621a      	str	r2, [r3, #32]
 80039de:	e017      	b.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d108      	bne.n	80039fa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80039e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80039f8:	e00a      	b.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d165      	bne.n	8003aea <HAL_PCD_EP_DB_Transmit+0x750>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a32:	4413      	add	r3, r2
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	011a      	lsls	r2, r3, #4
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3e:	4413      	add	r3, r2
 8003a40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a5c:	d91d      	bls.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x700>
 8003a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a74:	3b01      	subs	r3, #1
 8003a76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	e041      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x784>
 8003a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	e032      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x784>
 8003ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x738>
 8003acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ace:	3301      	adds	r3, #1
 8003ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	e019      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x784>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x784>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b00:	4413      	add	r3, r2
 8003b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	011a      	lsls	r2, r3, #4
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6959      	ldr	r1, [r3, #20]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	895a      	ldrh	r2, [r3, #10]
 8003b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f003 ffe3 	bl	8007afa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b4e:	82bb      	strh	r3, [r7, #20]
 8003b50:	8abb      	ldrh	r3, [r7, #20]
 8003b52:	f083 0310 	eor.w	r3, r3, #16
 8003b56:	82bb      	strh	r3, [r7, #20]
 8003b58:	8abb      	ldrh	r3, [r7, #20]
 8003b5a:	f083 0320 	eor.w	r3, r3, #32
 8003b5e:	82bb      	strh	r3, [r7, #20]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	8abb      	ldrh	r3, [r7, #20]
 8003b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3790      	adds	r7, #144	@ 0x90
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ba0:	897b      	ldrh	r3, [r7, #10]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	f003 0207 	and.w	r2, r3, #7
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	3310      	adds	r3, #16
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e009      	b.n	8003bd8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bc4:	897a      	ldrh	r2, [r7, #10]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	80da      	strh	r2, [r3, #6]
 8003bec:	e00b      	b.n	8003c06 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e272      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8087 	beq.w	8003d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c34:	4b92      	ldr	r3, [pc, #584]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c40:	4b8f      	ldr	r3, [pc, #572]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
 8003c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	4b89      	ldr	r3, [pc, #548]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x12c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d168      	bne.n	8003d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e24c      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x76>
 8003c7c:	4b80      	ldr	r3, [pc, #512]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a7f      	ldr	r2, [pc, #508]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e02e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b7b      	ldr	r3, [pc, #492]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7a      	ldr	r2, [pc, #488]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b78      	ldr	r3, [pc, #480]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a77      	ldr	r2, [pc, #476]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xbc>
 8003cb6:	4b72      	ldr	r3, [pc, #456]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a71      	ldr	r2, [pc, #452]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b68      	ldr	r3, [pc, #416]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a67      	ldr	r2, [pc, #412]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fc fe8e 	bl	8000a10 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fc fe8a 	bl	8000a10 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e200      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe4>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fc fe7a 	bl	8000a10 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fc fe76 	bl	8000a10 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	@ 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1ec      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x10c>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d5a:	4b49      	ldr	r3, [pc, #292]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x18c>
 8003d66:	4b46      	ldr	r3, [pc, #280]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b43      	ldr	r3, [pc, #268]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x176>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c0      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4939      	ldr	r1, [pc, #228]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b36      	ldr	r3, [pc, #216]	@ (8003e84 <HAL_RCC_OscConfig+0x270>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fc fe2f 	bl	8000a10 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fc fe2b 	bl	8000a10 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a1      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4927      	ldr	r1, [pc, #156]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <HAL_RCC_OscConfig+0x270>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fc fe0e 	bl	8000a10 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fc fe0a 	bl	8000a10 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e180      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03a      	beq.n	8003e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e30:	f7fc fdee 	bl	8000a10 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fc fdea 	bl	8000a10 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e160      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e56:	2001      	movs	r0, #1
 8003e58:	f000 face 	bl	80043f8 <RCC_Delay>
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e64:	f7fc fdd4 	bl	8000a10 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6a:	e00f      	b.n	8003e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fc fdd0 	bl	8000a10 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d908      	bls.n	8003e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e146      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	42420000 	.word	0x42420000
 8003e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b92      	ldr	r3, [pc, #584]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e9      	bne.n	8003e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a6 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b88      	ldr	r3, [pc, #544]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a87      	ldr	r2, [pc, #540]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	61d3      	str	r3, [r2, #28]
 8003ec2:	4b85      	ldr	r3, [pc, #532]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b82      	ldr	r3, [pc, #520]	@ (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d118      	bne.n	8003f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ede:	4b7f      	ldr	r3, [pc, #508]	@ (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fc fd91 	bl	8000a10 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fc fd8d 	bl	8000a10 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	@ 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e103      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	4b75      	ldr	r3, [pc, #468]	@ (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x312>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6213      	str	r3, [r2, #32]
 8003f24:	e02d      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x334>
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4a69      	ldr	r2, [pc, #420]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6213      	str	r3, [r2, #32]
 8003f3a:	4b67      	ldr	r3, [pc, #412]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a66      	ldr	r2, [pc, #408]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	e01c      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x356>
 8003f50:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4a60      	ldr	r2, [pc, #384]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6213      	str	r3, [r2, #32]
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	e00b      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6213      	str	r3, [r2, #32]
 8003f76:	4b58      	ldr	r3, [pc, #352]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a57      	ldr	r2, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d015      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fc fd41 	bl	8000a10 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fc fd3d 	bl	8000a10 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0b1      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCC_OscConfig+0x37e>
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fc fd2b 	bl	8000a10 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fc fd27 	bl	8000a10 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e09b      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	4b40      	ldr	r3, [pc, #256]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ee      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4a3b      	ldr	r2, [pc, #236]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8087 	beq.w	800410a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d061      	beq.n	80040cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d146      	bne.n	800409e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fc fcfb 	bl	8000a10 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fc fcf7 	bl	8000a10 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e06d      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	4b29      	ldr	r3, [pc, #164]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004044:	d108      	bne.n	8004058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004046:	4b24      	ldr	r3, [pc, #144]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4921      	ldr	r1, [pc, #132]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004058:	4b1f      	ldr	r3, [pc, #124]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a19      	ldr	r1, [r3, #32]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	430b      	orrs	r3, r1
 800406a:	491b      	ldr	r1, [pc, #108]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004076:	f7fc fccb 	bl	8000a10 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fc fcc7 	bl	8000a10 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e03d      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004090:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x46a>
 800409c:	e035      	b.n	800410a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fc fcb4 	bl	8000a10 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fc fcb0 	bl	8000a10 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e026      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x498>
 80040ca:	e01e      	b.n	800410a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e019      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_RCC_OscConfig+0x500>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d0      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b6a      	ldr	r3, [pc, #424]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b67      	ldr	r3, [pc, #412]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4965      	ldr	r1, [pc, #404]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a58      	ldr	r2, [pc, #352]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800417e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a52      	ldr	r2, [pc, #328]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d040      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e073      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3d      	ldr	r3, [pc, #244]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06b      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4936      	ldr	r1, [pc, #216]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fc fc02 	bl	8000a10 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fc fbfe 	bl	8000a10 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e053      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d210      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b24      	ldr	r3, [pc, #144]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	4922      	ldr	r1, [pc, #136]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1cc>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_RCC_ClockConfig+0x1d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc fb60 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	080099cc 	.word	0x080099cc
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004306:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x94>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b04      	cmp	r3, #4
 8004314:	d002      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x30>
 8004316:	2b08      	cmp	r3, #8
 8004318:	d003      	beq.n	8004322 <HAL_RCC_GetSysClockFreq+0x36>
 800431a:	e027      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800431c:	4b19      	ldr	r3, [pc, #100]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x98>)
 800431e:	613b      	str	r3, [r7, #16]
      break;
 8004320:	e027      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0c9b      	lsrs	r3, r3, #18
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x9c>)
 800432c:	5cd3      	ldrb	r3, [r2, r3]
 800432e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x94>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0c5b      	lsrs	r3, r3, #17
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	4a11      	ldr	r2, [pc, #68]	@ (800438c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004346:	5cd3      	ldrb	r3, [r2, r3]
 8004348:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a0d      	ldr	r2, [pc, #52]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x98>)
 800434e:	fb03 f202 	mul.w	r2, r3, r2
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e004      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	613b      	str	r3, [r7, #16]
      break;
 800436a:	e002      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x98>)
 800436e:	613b      	str	r3, [r7, #16]
      break;
 8004370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004372:	693b      	ldr	r3, [r7, #16]
}
 8004374:	4618      	mov	r0, r3
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	007a1200 	.word	0x007a1200
 8004388:	080099e4 	.word	0x080099e4
 800438c:	080099f4 	.word	0x080099f4
 8004390:	003d0900 	.word	0x003d0900

08004394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b02      	ldr	r3, [pc, #8]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	20000000 	.word	0x20000000

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff2 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	@ (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	080099dc 	.word	0x080099dc

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffde 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0adb      	lsrs	r3, r3, #11
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	@ (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	080099dc 	.word	0x080099dc

080043f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004400:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <RCC_Delay+0x34>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <RCC_Delay+0x38>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a5b      	lsrs	r3, r3, #9
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004414:	bf00      	nop
  }
  while (Delay --);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	60fa      	str	r2, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f9      	bne.n	8004414 <RCC_Delay+0x1c>
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	20000000 	.word	0x20000000
 8004430:	10624dd3 	.word	0x10624dd3

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07d      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004454:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b4c      	ldr	r3, [pc, #304]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4a4b      	ldr	r2, [pc, #300]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446a:	61d3      	str	r3, [r2, #28]
 800446c:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b46      	ldr	r3, [pc, #280]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d118      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004488:	4b43      	ldr	r3, [pc, #268]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a42      	ldr	r2, [pc, #264]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fc fabc 	bl	8000a10 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449a:	e008      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fc fab8 	bl	8000a10 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e06d      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ba:	4b36      	ldr	r3, [pc, #216]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02e      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d027      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e2:	4b2e      	ldr	r3, [pc, #184]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e8:	4b2c      	ldr	r3, [pc, #176]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ee:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fc fa87 	bl	8000a10 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fc fa83 	bl	8000a10 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e036      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ee      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004528:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4917      	ldr	r1, [pc, #92]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	4313      	orrs	r3, r2
 8004538:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4a13      	ldr	r2, [pc, #76]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800454a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	490b      	ldr	r1, [pc, #44]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	42420440 	.word	0x42420440

080045a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	f200 808a 	bhi.w	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d045      	beq.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d075      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80045d6:	e082      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80045d8:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045de:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d07b      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	0c9b      	lsrs	r3, r3, #18
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	4a41      	ldr	r2, [pc, #260]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d015      	beq.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004602:	4b3c      	ldr	r3, [pc, #240]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	0c5b      	lsrs	r3, r3, #17
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	4a3b      	ldr	r2, [pc, #236]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800461c:	4a38      	ldr	r2, [pc, #224]	@ (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fbb2 f2f3 	udiv	r2, r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a34      	ldr	r2, [pc, #208]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004638:	4b2e      	ldr	r3, [pc, #184]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004644:	d102      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	61bb      	str	r3, [r7, #24]
      break;
 800464a:	e04a      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4a2d      	ldr	r2, [pc, #180]	@ (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	61bb      	str	r3, [r7, #24]
      break;
 800465a:	e042      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800465c:	4b25      	ldr	r3, [pc, #148]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466c:	d108      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e01f      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800468c:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004698:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e00f      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046aa:	d11c      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d016      	beq.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80046b8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80046bc:	61bb      	str	r3, [r7, #24]
      break;
 80046be:	e012      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80046c0:	e011      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046c2:	f7ff fe85 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0b9b      	lsrs	r3, r3, #14
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	61bb      	str	r3, [r7, #24]
      break;
 80046dc:	e004      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046e6:	bf00      	nop
    }
  }
  return (frequency);
 80046e8:	69bb      	ldr	r3, [r7, #24]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	080099f8 	.word	0x080099f8
 80046fc:	08009a08 	.word	0x08009a08
 8004700:	007a1200 	.word	0x007a1200
 8004704:	003d0900 	.word	0x003d0900
 8004708:	aaaaaaab 	.word	0xaaaaaaab

0800470c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e041      	b.n	80047a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc f860 	bl	80007f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 fab2 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e041      	b.n	8004840 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f839 	bl	8004848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f000 fa63 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
	...

0800485c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_TIM_PWM_Start+0x24>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e022      	b.n	80048c6 <HAL_TIM_PWM_Start+0x6a>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b04      	cmp	r3, #4
 8004884:	d109      	bne.n	800489a <HAL_TIM_PWM_Start+0x3e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e015      	b.n	80048c6 <HAL_TIM_PWM_Start+0x6a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d109      	bne.n	80048b4 <HAL_TIM_PWM_Start+0x58>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e008      	b.n	80048c6 <HAL_TIM_PWM_Start+0x6a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e05e      	b.n	800498c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0x82>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048dc:	e013      	b.n	8004906 <HAL_TIM_PWM_Start+0xaa>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0x92>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ec:	e00b      	b.n	8004906 <HAL_TIM_PWM_Start+0xaa>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_PWM_Start+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048fc:	e003      	b.n	8004906 <HAL_TIM_PWM_Start+0xaa>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fc5c 	bl	80051cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <HAL_TIM_PWM_Start+0x138>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d107      	bne.n	800492e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <HAL_TIM_PWM_Start+0x138>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00e      	beq.n	8004956 <HAL_TIM_PWM_Start+0xfa>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004940:	d009      	beq.n	8004956 <HAL_TIM_PWM_Start+0xfa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a14      	ldr	r2, [pc, #80]	@ (8004998 <HAL_TIM_PWM_Start+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIM_PWM_Start+0xfa>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a12      	ldr	r2, [pc, #72]	@ (800499c <HAL_TIM_PWM_Start+0x140>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d010      	beq.n	800498a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	e007      	b.n	800498a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800

080049a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0ae      	b.n	8004b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	f200 809f 	bhi.w	8004b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004b0d 	.word	0x08004b0d
 80049dc:	08004b0d 	.word	0x08004b0d
 80049e0:	08004b0d 	.word	0x08004b0d
 80049e4:	08004a49 	.word	0x08004a49
 80049e8:	08004b0d 	.word	0x08004b0d
 80049ec:	08004b0d 	.word	0x08004b0d
 80049f0:	08004b0d 	.word	0x08004b0d
 80049f4:	08004a8b 	.word	0x08004a8b
 80049f8:	08004b0d 	.word	0x08004b0d
 80049fc:	08004b0d 	.word	0x08004b0d
 8004a00:	08004b0d 	.word	0x08004b0d
 8004a04:	08004acb 	.word	0x08004acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f9be 	bl	8004d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6999      	ldr	r1, [r3, #24]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	619a      	str	r2, [r3, #24]
      break;
 8004a46:	e064      	b.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa04 	bl	8004e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6999      	ldr	r1, [r3, #24]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	619a      	str	r2, [r3, #24]
      break;
 8004a88:	e043      	b.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fa4d 	bl	8004f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0208 	orr.w	r2, r2, #8
 8004aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0204 	bic.w	r2, r2, #4
 8004ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69d9      	ldr	r1, [r3, #28]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	61da      	str	r2, [r3, #28]
      break;
 8004ac8:	e023      	b.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fa97 	bl	8005004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	021a      	lsls	r2, r3, #8
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	61da      	str	r2, [r3, #28]
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e0b4      	b.n	8004caa <HAL_TIM_ConfigClockSource+0x186>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b78:	d03e      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7e:	f200 8087 	bhi.w	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	f000 8086 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x172>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	d87f      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b70      	cmp	r3, #112	@ 0x70
 8004b92:	d01a      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xa6>
 8004b94:	2b70      	cmp	r3, #112	@ 0x70
 8004b96:	d87b      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b60      	cmp	r3, #96	@ 0x60
 8004b9a:	d050      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x11a>
 8004b9c:	2b60      	cmp	r3, #96	@ 0x60
 8004b9e:	d877      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b50      	cmp	r3, #80	@ 0x50
 8004ba2:	d03c      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ba4:	2b50      	cmp	r3, #80	@ 0x50
 8004ba6:	d873      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d058      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x13a>
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d86f      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b30      	cmp	r3, #48	@ 0x30
 8004bb2:	d064      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b30      	cmp	r3, #48	@ 0x30
 8004bb6:	d86b      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d060      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d867      	bhi.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05c      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d05a      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x15a>
 8004bc8:	e062      	b.n	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bda:	f000 fad8 	bl	800518e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	609a      	str	r2, [r3, #8]
      break;
 8004bf6:	e04f      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c08:	f000 fac1 	bl	800518e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c1a:	609a      	str	r2, [r3, #8]
      break;
 8004c1c:	e03c      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 fa38 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2150      	movs	r1, #80	@ 0x50
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fa8f 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e02c      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fa56 	bl	80050fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2160      	movs	r1, #96	@ 0x60
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa7f 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e01c      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fa18 	bl	80050a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2140      	movs	r1, #64	@ 0x40
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa6f 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e00c      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f000 fa66 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c8e:	e003      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
      break;
 8004c94:	e000      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d88 <TIM_Base_SetConfig+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2b      	ldr	r2, [pc, #172]	@ (8004d8c <TIM_Base_SetConfig+0xd8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <TIM_Base_SetConfig+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <TIM_Base_SetConfig+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d84 <TIM_Base_SetConfig+0xd0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800

08004d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0201 	bic.w	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 0302 	bic.w	r3, r3, #2
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e58 <TIM_OC1_SetConfig+0xc8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10c      	bne.n	8004e06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0308 	bic.w	r3, r3, #8
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <TIM_OC1_SetConfig+0xc8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <TIM_OC2_SetConfig+0xd0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10d      	bne.n	8004ed8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a14      	ldr	r2, [pc, #80]	@ (8004f2c <TIM_OC2_SetConfig+0xd0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d113      	bne.n	8004f08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	40012c00 	.word	0x40012c00

08004f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <TIM_OC3_SetConfig+0xd0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10d      	bne.n	8004faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a14      	ldr	r2, [pc, #80]	@ (8005000 <TIM_OC3_SetConfig+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d113      	bne.n	8004fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00

08005004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800504e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0f      	ldr	r2, [pc, #60]	@ (800509c <TIM_OC4_SetConfig+0x98>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800506a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00

080050a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 030a 	bic.w	r3, r3, #10
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	031b      	lsls	r3, r3, #12
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	f043 0307 	orr.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	021a      	lsls	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	609a      	str	r2, [r3, #8]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	2201      	movs	r2, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_TIMEx_PWMN_Start+0x24>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e022      	b.n	800527e <HAL_TIMEx_PWMN_Start+0x6a>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d109      	bne.n	8005252 <HAL_TIMEx_PWMN_Start+0x3e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e015      	b.n	800527e <HAL_TIMEx_PWMN_Start+0x6a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d109      	bne.n	800526c <HAL_TIMEx_PWMN_Start+0x58>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e008      	b.n	800527e <HAL_TIMEx_PWMN_Start+0x6a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e059      	b.n	800533a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIMEx_PWMN_Start+0x82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005294:	e013      	b.n	80052be <HAL_TIMEx_PWMN_Start+0xaa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIMEx_PWMN_Start+0x92>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052a4:	e00b      	b.n	80052be <HAL_TIMEx_PWMN_Start+0xaa>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIMEx_PWMN_Start+0xa2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b4:	e003      	b.n	80052be <HAL_TIMEx_PWMN_Start+0xaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2204      	movs	r2, #4
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f8f1 	bl	80054ae <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a18      	ldr	r2, [pc, #96]	@ (8005344 <HAL_TIMEx_PWMN_Start+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00e      	beq.n	8005304 <HAL_TIMEx_PWMN_Start+0xf0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ee:	d009      	beq.n	8005304 <HAL_TIMEx_PWMN_Start+0xf0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <HAL_TIMEx_PWMN_Start+0x134>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIMEx_PWMN_Start+0xf0>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a13      	ldr	r2, [pc, #76]	@ (800534c <HAL_TIMEx_PWMN_Start+0x138>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d111      	bne.n	8005328 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b06      	cmp	r3, #6
 8005314:	d010      	beq.n	8005338 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	e007      	b.n	8005338 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800

08005350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005364:	2302      	movs	r3, #2
 8005366:	e046      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a16      	ldr	r2, [pc, #88]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b4:	d009      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a12      	ldr	r2, [pc, #72]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a10      	ldr	r2, [pc, #64]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10c      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800

0800540c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005424:	2302      	movs	r3, #2
 8005426:	e03d      	b.n	80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	2204      	movs	r2, #4
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	43db      	mvns	r3, r3
 80054d0:	401a      	ands	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	4638      	mov	r0, r7
 8005500:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005520:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005544:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	b29b      	uxth	r3, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	4013      	ands	r3, r2
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	4638      	mov	r0, r7
 8005592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
	...

080055c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b09d      	sub	sp, #116	@ 0x74
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80055e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	78db      	ldrb	r3, [r3, #3]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d81f      	bhi.n	8005636 <USB_ActivateEndpoint+0x72>
 80055f6:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <USB_ActivateEndpoint+0x38>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	08005629 	.word	0x08005629
 8005604:	0800563f 	.word	0x0800563f
 8005608:	0800561b 	.word	0x0800561b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800560c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005610:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005614:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005618:	e012      	b.n	8005640 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800561a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800561e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005622:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005626:	e00b      	b.n	8005640 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800562c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005630:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005634:	e004      	b.n	8005640 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800563c:	e000      	b.n	8005640 <USB_ActivateEndpoint+0x7c>
      break;
 800563e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005678:	b29b      	uxth	r3, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	7b1b      	ldrb	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 8178 	bne.w	80059a0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8084 	beq.w	80057c2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	4413      	add	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	011a      	lsls	r2, r3, #4
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	88db      	ldrh	r3, [r3, #6]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	827b      	strh	r3, [r7, #18]
 80056fc:	8a7b      	ldrh	r3, [r7, #18]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01b      	beq.n	800573e <USB_ActivateEndpoint+0x17a>
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	823b      	strh	r3, [r7, #16]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8a3b      	ldrh	r3, [r7, #16]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	78db      	ldrb	r3, [r3, #3]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d020      	beq.n	8005788 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575c:	81bb      	strh	r3, [r7, #12]
 800575e:	89bb      	ldrh	r3, [r7, #12]
 8005760:	f083 0320 	eor.w	r3, r3, #32
 8005764:	81bb      	strh	r3, [r7, #12]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	89bb      	ldrh	r3, [r7, #12]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]
 8005786:	e2d5      	b.n	8005d34 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800579a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579e:	81fb      	strh	r3, [r7, #14]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	89fb      	ldrh	r3, [r7, #14]
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]
 80057c0:	e2b8      	b.n	8005d34 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	4413      	add	r3, r2
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	011a      	lsls	r2, r3, #4
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	88db      	ldrh	r3, [r3, #6]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	4413      	add	r3, r2
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	4413      	add	r3, r2
 8005814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005824:	b29a      	uxth	r2, r3
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005830:	d91d      	bls.n	800586e <USB_ActivateEndpoint+0x2aa>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <USB_ActivateEndpoint+0x288>
 8005846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005848:	3b01      	subs	r3, #1
 800584a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29a      	uxth	r2, r3
 8005852:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e026      	b.n	80058bc <USB_ActivateEndpoint+0x2f8>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <USB_ActivateEndpoint+0x2c8>
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005884:	b29a      	uxth	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e017      	b.n	80058bc <USB_ActivateEndpoint+0x2f8>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <USB_ActivateEndpoint+0x2e2>
 80058a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058a2:	3301      	adds	r3, #1
 80058a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <USB_ActivateEndpoint+0x348>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	843b      	strh	r3, [r7, #32]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	8c3b      	ldrh	r3, [r7, #32]
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d124      	bne.n	800595e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	83bb      	strh	r3, [r7, #28]
 800592c:	8bbb      	ldrh	r3, [r7, #28]
 800592e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005932:	83bb      	strh	r3, [r7, #28]
 8005934:	8bbb      	ldrh	r3, [r7, #28]
 8005936:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800593a:	83bb      	strh	r3, [r7, #28]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	8bbb      	ldrh	r3, [r7, #28]
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]
 800595c:	e1ea      	b.n	8005d34 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005974:	83fb      	strh	r3, [r7, #30]
 8005976:	8bfb      	ldrh	r3, [r7, #30]
 8005978:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800597c:	83fb      	strh	r3, [r7, #30]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	8bfb      	ldrh	r3, [r7, #30]
 800598a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800598e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599a:	b29b      	uxth	r3, r3
 800599c:	8013      	strh	r3, [r2, #0]
 800599e:	e1c9      	b.n	8005d34 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d11e      	bne.n	80059e6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	441a      	add	r2, r3
 80059cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80059dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]
 80059e4:	e01d      	b.n	8005a22 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a32:	4413      	add	r3, r2
 8005a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011a      	lsls	r2, r3, #4
 8005a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	891b      	ldrh	r3, [r3, #8]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a66:	4413      	add	r3, r2
 8005a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	895b      	ldrh	r3, [r3, #10]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a88:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8093 	bne.w	8005bba <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <USB_ActivateEndpoint+0x524>
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005af6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01b      	beq.n	8005b38 <USB_ActivateEndpoint+0x574>
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b56:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b5e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b96:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	8013      	strh	r3, [r2, #0]
 8005bb8:	e0bc      	b.n	8005d34 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005bca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01d      	beq.n	8005c12 <USB_ActivateEndpoint+0x64e>
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005c22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01d      	beq.n	8005c6a <USB_ActivateEndpoint+0x6a6>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d024      	beq.n	8005cbc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005c8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005c90:	f083 0320 	eor.w	r3, r3, #32
 8005c94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
 8005cba:	e01d      	b.n	8005cf8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3774      	adds	r7, #116	@ 0x74
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop

08005d44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b08d      	sub	sp, #52	@ 0x34
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	7b1b      	ldrb	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 808e 	bne.w	8005e74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d044      	beq.n	8005dea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	81bb      	strh	r3, [r7, #12]
 8005d6e:	89bb      	ldrh	r3, [r7, #12]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <USB_DeactivateEndpoint+0x6c>
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	817b      	strh	r3, [r7, #10]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc6:	813b      	strh	r3, [r7, #8]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	893b      	ldrh	r3, [r7, #8]
 8005dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	8013      	strh	r3, [r2, #0]
 8005de8:	e192      	b.n	8006110 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	827b      	strh	r3, [r7, #18]
 8005df8:	8a7b      	ldrh	r3, [r7, #18]
 8005dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01b      	beq.n	8005e3a <USB_DeactivateEndpoint+0xf6>
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e18:	823b      	strh	r3, [r7, #16]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	8a3b      	ldrh	r3, [r7, #16]
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e50:	81fb      	strh	r3, [r7, #14]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	89fb      	ldrh	r3, [r7, #14]
 8005e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	8013      	strh	r3, [r2, #0]
 8005e72:	e14d      	b.n	8006110 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 80a5 	bne.w	8005fc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	843b      	strh	r3, [r7, #32]
 8005e8c:	8c3b      	ldrh	r3, [r7, #32]
 8005e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01b      	beq.n	8005ece <USB_DeactivateEndpoint+0x18a>
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eac:	83fb      	strh	r3, [r7, #30]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	8bfb      	ldrh	r3, [r7, #30]
 8005eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ec2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	83bb      	strh	r3, [r7, #28]
 8005edc:	8bbb      	ldrh	r3, [r7, #28]
 8005ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01b      	beq.n	8005f1e <USB_DeactivateEndpoint+0x1da>
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efc:	837b      	strh	r3, [r7, #26]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	441a      	add	r2, r3
 8005f08:	8b7b      	ldrh	r3, [r7, #26]
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f34:	833b      	strh	r3, [r7, #24]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	8b3b      	ldrh	r3, [r7, #24]
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6c:	82fb      	strh	r3, [r7, #22]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	8afb      	ldrh	r3, [r7, #22]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	82bb      	strh	r3, [r7, #20]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	8abb      	ldrh	r3, [r7, #20]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
 8005fc6:	e0a3      	b.n	8006110 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005fd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <USB_DeactivateEndpoint+0x2d4>
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800600c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <USB_DeactivateEndpoint+0x324>
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006046:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800605c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006060:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800608c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609c:	b29b      	uxth	r3, r3
 800609e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3734      	adds	r7, #52	@ 0x34
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b0c2      	sub	sp, #264	@ 0x108
 8006120:	af00      	add	r7, sp, #0
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612a:	6018      	str	r0, [r3, #0]
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b01      	cmp	r3, #1
 8006144:	f040 86b7 	bne.w	8006eb6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d908      	bls.n	8006176 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006174:	e007      	b.n	8006186 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	7b1b      	ldrb	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d13a      	bne.n	800620c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6959      	ldr	r1, [r3, #20]
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	88da      	ldrh	r2, [r3, #6]
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f001 fc9c 	bl	8007afa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	011a      	lsls	r2, r3, #4
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	f000 be1f 	b.w	8006e4a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	78db      	ldrb	r3, [r3, #3]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f040 8462 	bne.w	8006ae2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	f240 83df 	bls.w	80069fa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800628c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 81c7 	beq.w	800666c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d177      	bne.n	80063ea <USB_EPStartXfer+0x2ce>
 80062fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	4413      	add	r3, r2
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	011a      	lsls	r2, r3, #4
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	4413      	add	r3, r2
 8006330:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006340:	b29a      	uxth	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	2b3e      	cmp	r3, #62	@ 0x3e
 800634c:	d921      	bls.n	8006392 <USB_EPStartXfer+0x276>
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USB_EPStartXfer+0x252>
 8006364:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006368:	3b01      	subs	r3, #1
 800636a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29a      	uxth	r2, r3
 8006374:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006378:	b29b      	uxth	r3, r3
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	b29b      	uxth	r3, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638a:	b29a      	uxth	r2, r3
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e050      	b.n	8006434 <USB_EPStartXfer+0x318>
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <USB_EPStartXfer+0x294>
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e041      	b.n	8006434 <USB_EPStartXfer+0x318>
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <USB_EPStartXfer+0x2b4>
 80063c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063ca:	3301      	adds	r3, #1
 80063cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	e024      	b.n	8006434 <USB_EPStartXfer+0x318>
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d11c      	bne.n	8006434 <USB_EPStartXfer+0x318>
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006408:	b29b      	uxth	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	4413      	add	r3, r2
 8006410:	633b      	str	r3, [r7, #48]	@ 0x30
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	011a      	lsls	r2, r3, #4
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	4413      	add	r3, r2
 8006424:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	b29a      	uxth	r2, r3
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	895b      	ldrh	r3, [r3, #10]
 8006440:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6959      	ldr	r1, [r3, #20]
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	b29b      	uxth	r3, r3
 8006456:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800645a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800645e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	f001 fb49 	bl	8007afa <USB_WritePMA>
            ep->xfer_buff += len;
 8006468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	441a      	add	r2, r3
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d90f      	bls.n	80064c2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	621a      	str	r2, [r3, #32]
 80064c0:	e00e      	b.n	80064e0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2200      	movs	r2, #0
 80064de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d177      	bne.n	80065e0 <USB_EPStartXfer+0x4c4>
 80064f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	011a      	lsls	r2, r3, #4
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	4413      	add	r3, r2
 8006526:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006536:	b29a      	uxth	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	2b3e      	cmp	r3, #62	@ 0x3e
 8006542:	d921      	bls.n	8006588 <USB_EPStartXfer+0x46c>
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <USB_EPStartXfer+0x448>
 800655a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800655e:	3b01      	subs	r3, #1
 8006560:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e056      	b.n	8006636 <USB_EPStartXfer+0x51a>
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <USB_EPStartXfer+0x48a>
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e047      	b.n	8006636 <USB_EPStartXfer+0x51a>
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_EPStartXfer+0x4aa>
 80065bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	029b      	lsls	r3, r3, #10
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e02a      	b.n	8006636 <USB_EPStartXfer+0x51a>
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <USB_EPStartXfer+0x51a>
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	623b      	str	r3, [r7, #32]
 80065fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	4413      	add	r3, r2
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	4413      	add	r3, r2
 8006626:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	b29a      	uxth	r2, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	891b      	ldrh	r3, [r3, #8]
 8006642:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6959      	ldr	r1, [r3, #20]
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	b29b      	uxth	r3, r3
 8006658:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800665c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006660:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006664:	6800      	ldr	r0, [r0, #0]
 8006666:	f001 fa48 	bl	8007afa <USB_WritePMA>
 800666a:	e3ee      	b.n	8006e4a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d177      	bne.n	800676c <USB_EPStartXfer+0x650>
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800669c:	4413      	add	r3, r2
 800669e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	011a      	lsls	r2, r3, #4
 80066ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ce:	d921      	bls.n	8006714 <USB_EPStartXfer+0x5f8>
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_EPStartXfer+0x5d4>
 80066e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e056      	b.n	80067c2 <USB_EPStartXfer+0x6a6>
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <USB_EPStartXfer+0x616>
 800671c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672a:	b29a      	uxth	r2, r3
 800672c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e047      	b.n	80067c2 <USB_EPStartXfer+0x6a6>
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <USB_EPStartXfer+0x636>
 8006748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800674c:	3301      	adds	r3, #1
 800674e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800675c:	b29b      	uxth	r3, r3
 800675e:	029b      	lsls	r3, r3, #10
 8006760:	b29b      	uxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e02a      	b.n	80067c2 <USB_EPStartXfer+0x6a6>
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d122      	bne.n	80067c2 <USB_EPStartXfer+0x6a6>
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	653b      	str	r3, [r7, #80]	@ 0x50
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800679c:	4413      	add	r3, r2
 800679e:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	011a      	lsls	r2, r3, #4
 80067ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	b29a      	uxth	r2, r3
 80067be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	891b      	ldrh	r3, [r3, #8]
 80067ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6959      	ldr	r1, [r3, #20]
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067f0:	6800      	ldr	r0, [r0, #0]
 80067f2:	f001 f982 	bl	8007afa <USB_WritePMA>
            ep->xfer_buff += len;
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006806:	441a      	add	r2, r3
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d90f      	bls.n	8006850 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	621a      	str	r2, [r3, #32]
 800684e:	e00e      	b.n	800686e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800686e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	643b      	str	r3, [r7, #64]	@ 0x40
 800687a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d177      	bne.n	800697a <USB_EPStartXfer+0x85e>
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	4413      	add	r3, r2
 80068ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	011a      	lsls	r2, r3, #4
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	4413      	add	r3, r2
 80068c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	2b3e      	cmp	r3, #62	@ 0x3e
 80068dc:	d921      	bls.n	8006922 <USB_EPStartXfer+0x806>
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <USB_EPStartXfer+0x7e2>
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f8:	3b01      	subs	r3, #1
 80068fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006908:	b29b      	uxth	r3, r3
 800690a:	029b      	lsls	r3, r3, #10
 800690c:	b29b      	uxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b29b      	uxth	r3, r3
 8006912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691a:	b29a      	uxth	r2, r3
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	801a      	strh	r2, [r3, #0]
 8006920:	e050      	b.n	80069c4 <USB_EPStartXfer+0x8a8>
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <USB_EPStartXfer+0x824>
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006938:	b29a      	uxth	r2, r3
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e041      	b.n	80069c4 <USB_EPStartXfer+0x8a8>
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <USB_EPStartXfer+0x844>
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695a:	3301      	adds	r3, #1
 800695c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e024      	b.n	80069c4 <USB_EPStartXfer+0x8a8>
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d11c      	bne.n	80069c4 <USB_EPStartXfer+0x8a8>
 800698a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006998:	b29b      	uxth	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800699e:	4413      	add	r3, r2
 80069a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	011a      	lsls	r2, r3, #4
 80069b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b2:	4413      	add	r3, r2
 80069b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	b29a      	uxth	r2, r3
 80069c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	895b      	ldrh	r3, [r3, #10]
 80069d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6959      	ldr	r1, [r3, #20]
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	f001 f881 	bl	8007afa <USB_WritePMA>
 80069f8:	e227      	b.n	8006e4a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a86:	4413      	add	r3, r2
 8006a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aaa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	891b      	ldrh	r3, [r3, #8]
 8006ab8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6959      	ldr	r1, [r3, #20]
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ad2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ad6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	f001 f80d 	bl	8007afa <USB_WritePMA>
 8006ae0:	e1b3      	b.n	8006e4a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80c6 	beq.w	8006cb4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d177      	bne.n	8006c34 <USB_EPStartXfer+0xb18>
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b64:	4413      	add	r3, r2
 8006b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	011a      	lsls	r2, r3, #4
 8006b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b96:	d921      	bls.n	8006bdc <USB_EPStartXfer+0xac0>
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <USB_EPStartXfer+0xa9c>
 8006bae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e050      	b.n	8006c7e <USB_EPStartXfer+0xb62>
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <USB_EPStartXfer+0xade>
 8006be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e041      	b.n	8006c7e <USB_EPStartXfer+0xb62>
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <USB_EPStartXfer+0xafe>
 8006c10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c14:	3301      	adds	r3, #1
 8006c16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	029b      	lsls	r3, r3, #10
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c30:	801a      	strh	r2, [r3, #0]
 8006c32:	e024      	b.n	8006c7e <USB_EPStartXfer+0xb62>
 8006c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d11c      	bne.n	8006c7e <USB_EPStartXfer+0xb62>
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c58:	4413      	add	r3, r2
 8006c5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	011a      	lsls	r2, r3, #4
 8006c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	895b      	ldrh	r3, [r3, #10]
 8006c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6959      	ldr	r1, [r3, #20]
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ca4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ca8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f000 ff24 	bl	8007afa <USB_WritePMA>
 8006cb2:	e0ca      	b.n	8006e4a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d177      	bne.n	8006db4 <USB_EPStartXfer+0xc98>
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ce4:	4413      	add	r3, r2
 8006ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d16:	d921      	bls.n	8006d5c <USB_EPStartXfer+0xc40>
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <USB_EPStartXfer+0xc1c>
 8006d2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d32:	3b01      	subs	r3, #1
 8006d34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	029b      	lsls	r3, r3, #10
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	e05c      	b.n	8006e16 <USB_EPStartXfer+0xcfa>
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <USB_EPStartXfer+0xc5e>
 8006d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	e04d      	b.n	8006e16 <USB_EPStartXfer+0xcfa>
 8006d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <USB_EPStartXfer+0xc7e>
 8006d90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d94:	3301      	adds	r3, #1
 8006d96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e030      	b.n	8006e16 <USB_EPStartXfer+0xcfa>
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d128      	bne.n	8006e16 <USB_EPStartXfer+0xcfa>
 8006dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006de8:	4413      	add	r3, r2
 8006dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	011a      	lsls	r2, r3, #4
 8006dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	891b      	ldrh	r3, [r3, #8]
 8006e22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6959      	ldr	r1, [r3, #20]
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e44:	6800      	ldr	r0, [r0, #0]
 8006e46:	f000 fe58 	bl	8007afa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e70:	817b      	strh	r3, [r7, #10]
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	f083 0310 	eor.w	r3, r3, #16
 8006e78:	817b      	strh	r3, [r7, #10]
 8006e7a:	897b      	ldrh	r3, [r7, #10]
 8006e7c:	f083 0320 	eor.w	r3, r3, #32
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	897b      	ldrh	r3, [r7, #10]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
 8006eb2:	f000 bcde 	b.w	8007872 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	7b1b      	ldrb	r3, [r3, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 80bb 	bne.w	800703e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d917      	bls.n	8006f14 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	1ad2      	subs	r2, r2, r3
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	619a      	str	r2, [r3, #24]
 8006f12:	e00e      	b.n	8006f32 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f56:	4413      	add	r3, r2
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	011a      	lsls	r2, r3, #4
 8006f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f92:	d924      	bls.n	8006fde <USB_EPStartXfer+0xec2>
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <USB_EPStartXfer+0xe98>
 8006faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	f000 bc10 	b.w	80077fe <USB_EPStartXfer+0x16e2>
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10c      	bne.n	8007000 <USB_EPStartXfer+0xee4>
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	e3fe      	b.n	80077fe <USB_EPStartXfer+0x16e2>
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_EPStartXfer+0xf04>
 8007016:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29a      	uxth	r2, r3
 8007028:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800702c:	b29b      	uxth	r3, r3
 800702e:	029b      	lsls	r3, r3, #10
 8007030:	b29b      	uxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b29a      	uxth	r2, r3
 8007036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	e3df      	b.n	80077fe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800703e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	78db      	ldrb	r3, [r3, #3]
 800704a:	2b02      	cmp	r3, #2
 800704c:	f040 8218 	bne.w	8007480 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 809d 	bne.w	800719c <USB_EPStartXfer+0x1080>
 8007062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007086:	4413      	add	r3, r2
 8007088:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800708c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	011a      	lsls	r2, r3, #4
 800709a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ca:	d92b      	bls.n	8007124 <USB_EPStartXfer+0x1008>
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <USB_EPStartXfer+0xfe0>
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f6:	3b01      	subs	r3, #1
 80070f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007108:	b29b      	uxth	r3, r3
 800710a:	029b      	lsls	r3, r3, #10
 800710c:	b29b      	uxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b29b      	uxth	r3, r3
 8007112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711a:	b29a      	uxth	r2, r3
 800711c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007120:	801a      	strh	r2, [r3, #0]
 8007122:	e070      	b.n	8007206 <USB_EPStartXfer+0x10ea>
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10c      	bne.n	800714e <USB_EPStartXfer+0x1032>
 8007134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e05b      	b.n	8007206 <USB_EPStartXfer+0x10ea>
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <USB_EPStartXfer+0x1062>
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007178:	3301      	adds	r3, #1
 800717a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800717e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
 8007194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e034      	b.n	8007206 <USB_EPStartXfer+0x10ea>
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d12c      	bne.n	8007206 <USB_EPStartXfer+0x10ea>
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071d0:	4413      	add	r3, r2
 80071d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	011a      	lsls	r2, r3, #4
 80071e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 809d 	bne.w	8007360 <USB_EPStartXfer+0x1244>
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800724a:	4413      	add	r3, r2
 800724c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	011a      	lsls	r2, r3, #4
 800725e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007262:	4413      	add	r3, r2
 8007264:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800726c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007278:	b29a      	uxth	r2, r3
 800727a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b3e      	cmp	r3, #62	@ 0x3e
 800728e:	d92b      	bls.n	80072e8 <USB_EPStartXfer+0x11cc>
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <USB_EPStartXfer+0x11a4>
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ba:	3b01      	subs	r3, #1
 80072bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	029b      	lsls	r3, r3, #10
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e069      	b.n	80073bc <USB_EPStartXfer+0x12a0>
 80072e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <USB_EPStartXfer+0x11f6>
 80072f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007308:	b29a      	uxth	r2, r3
 800730a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e054      	b.n	80073bc <USB_EPStartXfer+0x12a0>
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <USB_EPStartXfer+0x1226>
 8007338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800733c:	3301      	adds	r3, #1
 800733e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007342:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29b      	uxth	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e02d      	b.n	80073bc <USB_EPStartXfer+0x12a0>
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d125      	bne.n	80073bc <USB_EPStartXfer+0x12a0>
 8007370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007386:	4413      	add	r3, r2
 8007388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800739e:	4413      	add	r3, r2
 80073a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8218 	beq.w	80077fe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <USB_EPStartXfer+0x12ea>
 80073fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007406:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800740a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 81f5 	bne.w	80077fe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 81ee 	bne.w	80077fe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007448:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007476:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
 800747e:	e1be      	b.n	80077fe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	78db      	ldrb	r3, [r3, #3]
 800748c:	2b01      	cmp	r3, #1
 800748e:	f040 81b4 	bne.w	80077fa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d917      	bls.n	80074de <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	619a      	str	r2, [r3, #24]
 80074dc:	e00e      	b.n	80074fc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80074de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2200      	movs	r2, #0
 80074fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 8085 	bne.w	8007618 <USB_EPStartXfer+0x14fc>
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007532:	4413      	add	r3, r2
 8007534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	011a      	lsls	r2, r3, #4
 8007546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800754a:	4413      	add	r3, r2
 800754c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007560:	b29a      	uxth	r2, r3
 8007562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	2b3e      	cmp	r3, #62	@ 0x3e
 800756e:	d923      	bls.n	80075b8 <USB_EPStartXfer+0x149c>
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800757a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <USB_EPStartXfer+0x1474>
 8007586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800758a:	3b01      	subs	r3, #1
 800758c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800759c:	b29b      	uxth	r3, r3
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e060      	b.n	800767a <USB_EPStartXfer+0x155e>
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <USB_EPStartXfer+0x14be>
 80075c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	e04f      	b.n	800767a <USB_EPStartXfer+0x155e>
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <USB_EPStartXfer+0x14de>
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075f4:	3301      	adds	r3, #1
 80075f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29a      	uxth	r2, r3
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007606:	b29b      	uxth	r3, r3
 8007608:	029b      	lsls	r3, r3, #10
 800760a:	b29b      	uxth	r3, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	b29a      	uxth	r2, r3
 8007610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	e030      	b.n	800767a <USB_EPStartXfer+0x155e>
 8007618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d128      	bne.n	800767a <USB_EPStartXfer+0x155e>
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007644:	b29b      	uxth	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800764c:	4413      	add	r3, r2
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	011a      	lsls	r2, r3, #4
 8007660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007664:	4413      	add	r3, r2
 8007666:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800766a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f040 8085 	bne.w	80077a4 <USB_EPStartXfer+0x1688>
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076be:	4413      	add	r3, r2
 80076c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	011a      	lsls	r2, r3, #4
 80076d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076d6:	4413      	add	r3, r2
 80076d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80076fa:	d923      	bls.n	8007744 <USB_EPStartXfer+0x1628>
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <USB_EPStartXfer+0x1600>
 8007712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007716:	3b01      	subs	r3, #1
 8007718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800771c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29b      	uxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773a:	b29a      	uxth	r2, r3
 800773c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e05c      	b.n	80077fe <USB_EPStartXfer+0x16e2>
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <USB_EPStartXfer+0x164a>
 800774c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e04b      	b.n	80077fe <USB_EPStartXfer+0x16e2>
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USB_EPStartXfer+0x166a>
 800777c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007780:	3301      	adds	r3, #1
 8007782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e02c      	b.n	80077fe <USB_EPStartXfer+0x16e2>
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d124      	bne.n	80077fe <USB_EPStartXfer+0x16e2>
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077ca:	4413      	add	r3, r2
 80077cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	011a      	lsls	r2, r3, #4
 80077de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	e001      	b.n	80077fe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e03a      	b.n	8007874 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007824:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800782c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007830:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007834:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007838:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800783c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	441a      	add	r2, r3
 800785a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800785e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800786a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786e:	b29b      	uxth	r3, r3
 8007870:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d020      	beq.n	80078d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a6:	81bb      	strh	r3, [r7, #12]
 80078a8:	89bb      	ldrh	r3, [r7, #12]
 80078aa:	f083 0310 	eor.w	r3, r3, #16
 80078ae:	81bb      	strh	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	89bb      	ldrh	r3, [r7, #12]
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]
 80078d0:	e01f      	b.n	8007912 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e8:	81fb      	strh	r3, [r7, #14]
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078f0:	81fb      	strh	r3, [r7, #14]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	441a      	add	r2, r3
 80078fc:	89fb      	ldrh	r3, [r7, #14]
 80078fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800790a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790e:	b29b      	uxth	r3, r3
 8007910:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 809d 	bne.w	8007a6c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d04c      	beq.n	80079d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	823b      	strh	r3, [r7, #16]
 8007948:	8a3b      	ldrh	r3, [r7, #16]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01b      	beq.n	800798a <USB_EPClearStall+0x6c>
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007968:	81fb      	strh	r3, [r7, #14]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007982:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d06c      	beq.n	8007a6c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079a8:	81bb      	strh	r3, [r7, #12]
 80079aa:	89bb      	ldrh	r3, [r7, #12]
 80079ac:	f083 0320 	eor.w	r3, r3, #32
 80079b0:	81bb      	strh	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	89bb      	ldrh	r3, [r7, #12]
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
 80079d2:	e04b      	b.n	8007a6c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	82fb      	strh	r3, [r7, #22]
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01b      	beq.n	8007a24 <USB_EPClearStall+0x106>
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a02:	82bb      	strh	r3, [r7, #20]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	8abb      	ldrh	r3, [r7, #20]
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3a:	827b      	strh	r3, [r7, #18]
 8007a3c:	8a7b      	ldrh	r3, [r7, #18]
 8007a3e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a42:	827b      	strh	r3, [r7, #18]
 8007a44:	8a7b      	ldrh	r3, [r7, #18]
 8007a46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a4a:	827b      	strh	r3, [r7, #18]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	8a7b      	ldrh	r3, [r7, #18]
 8007a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2280      	movs	r2, #128	@ 0x80
 8007a8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b08b      	sub	sp, #44	@ 0x2c
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	4611      	mov	r1, r2
 8007b06:	461a      	mov	r2, r3
 8007b08:	460b      	mov	r3, r1
 8007b0a:	80fb      	strh	r3, [r7, #6]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b10:	88bb      	ldrh	r3, [r7, #4]
 8007b12:	3301      	adds	r3, #1
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	005a      	lsls	r2, r3, #1
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b32:	e01e      	b.n	8007b72 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	b21a      	sxth	r2, r3
 8007b44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	8a7a      	ldrh	r2, [r7, #18]
 8007b52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	3302      	adds	r3, #2
 8007b58:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1dd      	bne.n	8007b34 <USB_WritePMA+0x3a>
  }
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	372c      	adds	r7, #44	@ 0x2c
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr

08007b84 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b08b      	sub	sp, #44	@ 0x2c
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	460b      	mov	r3, r1
 8007b94:	80fb      	strh	r3, [r7, #6]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b9a:	88bb      	ldrh	r3, [r7, #4]
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	005a      	lsls	r2, r3, #1
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bb6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bbc:	e01b      	b.n	8007bf6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	3302      	adds	r3, #2
 8007bca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	0a1b      	lsrs	r3, r3, #8
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	3302      	adds	r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e0      	bne.n	8007bbe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007bfc:	88bb      	ldrh	r3, [r7, #4]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	701a      	strb	r2, [r3, #0]
  }
}
 8007c18:	bf00      	nop
 8007c1a:	372c      	adds	r7, #44	@ 0x2c
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <MCP23017_WriteRegister>:
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
    return value;
}

void MCP23017_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af04      	add	r7, sp, #16
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	1cbb      	adds	r3, r7, #2
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2301      	movs	r3, #1
 8007c46:	2140      	movs	r1, #64	@ 0x40
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7f9 ff31 	bl	8001ab0 <HAL_I2C_Mem_Write>
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <MCP23017_EnablePullUps>:

void MCP23017_EnablePullUps(I2C_HandleTypeDef *hi2c) {
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
    MCP23017_WriteRegister(hi2c, 0x0C, 0xFF);
 8007c5e:	22ff      	movs	r2, #255	@ 0xff
 8007c60:	210c      	movs	r1, #12
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ffdd 	bl	8007c22 <MCP23017_WriteRegister>
    MCP23017_WriteRegister(hi2c, 0x0D, 0xFF);
 8007c68:	22ff      	movs	r2, #255	@ 0xff
 8007c6a:	210d      	movs	r1, #13
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ffd8 	bl	8007c22 <MCP23017_WriteRegister>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <TLC59116_Init>:
#include "TLC59116.h"

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b088      	sub	sp, #32
 8007c7e:	af04      	add	r7, sp, #16
 8007c80:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 8007c86:	2300      	movs	r3, #0
 8007c88:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	2301      	movs	r3, #1
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f107 030f 	add.w	r3, r7, #15
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	21c0      	movs	r1, #192	@ 0xc0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7f9 ff05 	bl	8001ab0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 8007ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	2301      	movs	r3, #1
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	f107 030e 	add.w	r3, r7, #14
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	2201      	movs	r2, #1
 8007cba:	21c0      	movs	r1, #192	@ 0xc0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7f9 fef7 	bl	8001ab0 <HAL_I2C_Mem_Write>
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b088      	sub	sp, #32
 8007cce:	af04      	add	r7, sp, #16
 8007cd0:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 8007cd2:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8007cd6:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	2304      	movs	r3, #4
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2301      	movs	r3, #1
 8007cea:	2214      	movs	r2, #20
 8007cec:	21c0      	movs	r1, #192	@ 0xc0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 fede 	bl	8001ab0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	2304      	movs	r3, #4
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2301      	movs	r3, #1
 8007d06:	2215      	movs	r2, #21
 8007d08:	21c0      	movs	r1, #192	@ 0xc0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7f9 fed0 	bl	8001ab0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8007d10:	f04f 33ff 	mov.w	r3, #4294967295
 8007d14:	9302      	str	r3, [sp, #8]
 8007d16:	2304      	movs	r3, #4
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	f107 030c 	add.w	r3, r7, #12
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2301      	movs	r3, #1
 8007d22:	2216      	movs	r2, #22
 8007d24:	21c0      	movs	r1, #192	@ 0xc0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 fec2 	bl	8001ab0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	2304      	movs	r3, #4
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f107 030c 	add.w	r3, r7, #12
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	2217      	movs	r2, #23
 8007d40:	21c0      	movs	r1, #192	@ 0xc0
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7f9 feb4 	bl	8001ab0 <HAL_I2C_Mem_Write>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <TLC59116_Set_PWM>:

void TLC59116_Set_PWM(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	70bb      	strb	r3, [r7, #2]
    if (channel > 15) return;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d811      	bhi.n	8007d8a <TLC59116_Set_PWM+0x3a>
    uint8_t reg = 0x02 + channel;
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	3302      	adds	r3, #2
 8007d6a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	2301      	movs	r3, #1
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	1cbb      	adds	r3, r7, #2
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2301      	movs	r3, #1
 8007d80:	21c0      	movs	r1, #192	@ 0xc0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7f9 fe94 	bl	8001ab0 <HAL_I2C_Mem_Write>
 8007d88:	e000      	b.n	8007d8c <TLC59116_Set_PWM+0x3c>
    if (channel > 15) return;
 8007d8a:	bf00      	nop
}
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007d9e:	2304      	movs	r3, #4
 8007da0:	2203      	movs	r2, #3
 8007da2:	2181      	movs	r1, #129	@ 0x81
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fc5e 	bl	8009666 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007db0:	2010      	movs	r0, #16
 8007db2:	f001 fd6b 	bl	800988c <USBD_static_malloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e005      	b.n	8007dd8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007dec:	2181      	movs	r1, #129	@ 0x81
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fc5f 	bl	80096b2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d009      	beq.n	8007e18 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 fd4a 	bl	80098a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e34:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d045      	beq.n	8007ede <USBD_HID_Setup+0xba>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	f040 80d3 	bne.w	8007ffe <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	3b02      	subs	r3, #2
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d835      	bhi.n	8007ece <USBD_HID_Setup+0xaa>
 8007e62:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <USBD_HID_Setup+0x44>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007ebf 	.word	0x08007ebf
 8007e6c:	08007e9f 	.word	0x08007e9f
 8007e70:	08007ecf 	.word	0x08007ecf
 8007e74:	08007ecf 	.word	0x08007ecf
 8007e78:	08007ecf 	.word	0x08007ecf
 8007e7c:	08007ecf 	.word	0x08007ecf
 8007e80:	08007ecf 	.word	0x08007ecf
 8007e84:	08007ecf 	.word	0x08007ecf
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007e91 	.word	0x08007e91
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	885b      	ldrh	r3, [r3, #2]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	601a      	str	r2, [r3, #0]
          break;
 8007e9c:	e01e      	b.n	8007edc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f91f 	bl	80090e8 <USBD_CtlSendData>
          break;
 8007eaa:	e017      	b.n	8007edc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	885b      	ldrh	r3, [r3, #2]
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	605a      	str	r2, [r3, #4]
          break;
 8007ebc:	e00e      	b.n	8007edc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 f90e 	bl	80090e8 <USBD_CtlSendData>
          break;
 8007ecc:	e006      	b.n	8007edc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f89f 	bl	8009014 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eda:	bf00      	nop
      }
      break;
 8007edc:	e096      	b.n	800800c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	785b      	ldrb	r3, [r3, #1]
 8007ee2:	2b0b      	cmp	r3, #11
 8007ee4:	f200 8083 	bhi.w	8007fee <USBD_HID_Setup+0x1ca>
 8007ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <USBD_HID_Setup+0xcc>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007fef 	.word	0x08007fef
 8007ef8:	08007fef 	.word	0x08007fef
 8007efc:	08007fef 	.word	0x08007fef
 8007f00:	08007fef 	.word	0x08007fef
 8007f04:	08007fef 	.word	0x08007fef
 8007f08:	08007f49 	.word	0x08007f49
 8007f0c:	08007fef 	.word	0x08007fef
 8007f10:	08007fef 	.word	0x08007fef
 8007f14:	08007fef 	.word	0x08007fef
 8007f18:	08007fa1 	.word	0x08007fa1
 8007f1c:	08007fc9 	.word	0x08007fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d107      	bne.n	8007f3a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f2a:	f107 030e 	add.w	r3, r7, #14
 8007f2e:	2202      	movs	r2, #2
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f8d8 	bl	80090e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f38:	e060      	b.n	8007ffc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f869 	bl	8009014 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	75fb      	strb	r3, [r7, #23]
          break;
 8007f46:	e059      	b.n	8007ffc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	885b      	ldrh	r3, [r3, #2]
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b22      	cmp	r3, #34	@ 0x22
 8007f52:	d108      	bne.n	8007f66 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	2b4a      	cmp	r3, #74	@ 0x4a
 8007f5a:	bf28      	it	cs
 8007f5c:	234a      	movcs	r3, #74	@ 0x4a
 8007f5e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007f60:	4b2d      	ldr	r3, [pc, #180]	@ (8008018 <USBD_HID_Setup+0x1f4>)
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	e015      	b.n	8007f92 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b21      	cmp	r3, #33	@ 0x21
 8007f70:	d108      	bne.n	8007f84 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007f72:	4b2a      	ldr	r3, [pc, #168]	@ (800801c <USBD_HID_Setup+0x1f8>)
 8007f74:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	88db      	ldrh	r3, [r3, #6]
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	bf28      	it	cs
 8007f7e:	2309      	movcs	r3, #9
 8007f80:	83fb      	strh	r3, [r7, #30]
 8007f82:	e006      	b.n	8007f92 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f844 	bl	8009014 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8007f90:	e034      	b.n	8007ffc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007f92:	8bfb      	ldrh	r3, [r7, #30]
 8007f94:	461a      	mov	r2, r3
 8007f96:	69b9      	ldr	r1, [r7, #24]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f8a5 	bl	80090e8 <USBD_CtlSendData>
          break;
 8007f9e:	e02d      	b.n	8007ffc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d107      	bne.n	8007fba <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	3308      	adds	r3, #8
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f898 	bl	80090e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fb8:	e020      	b.n	8007ffc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f829 	bl	8009014 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc6:	e019      	b.n	8007ffc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d106      	bne.n	8007fe0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fde:	e00d      	b.n	8007ffc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f816 	bl	8009014 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	75fb      	strb	r3, [r7, #23]
          break;
 8007fec:	e006      	b.n	8007ffc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f80f 	bl	8009014 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8007ffa:	bf00      	nop
      }
      break;
 8007ffc:	e006      	b.n	800800c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f807 	bl	8009014 <USBD_CtlError>
      ret = USBD_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	75fb      	strb	r3, [r7, #23]
      break;
 800800a:	bf00      	nop
  }

  return ret;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	200000c8 	.word	0x200000c8
 800801c:	200000b0 	.word	0x200000b0

08008020 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2222      	movs	r2, #34	@ 0x22
 800802c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800802e:	4b03      	ldr	r3, [pc, #12]	@ (800803c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000044 	.word	0x20000044

08008040 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2222      	movs	r2, #34	@ 0x22
 800804c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	@ (800805c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000068 	.word	0x20000068

08008060 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2222      	movs	r2, #34	@ 0x22
 800806c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	@ (800807c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	2000008c 	.word	0x2000008c

08008080 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008092:	2200      	movs	r2, #0
 8008094:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
	...

080080a4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220a      	movs	r2, #10
 80080b0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80080b2:	4b03      	ldr	r3, [pc, #12]	@ (80080c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	200000bc 	.word	0x200000bc

080080c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	e01a      	b.n	8008112 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	79fa      	ldrb	r2, [r7, #7]
 8008108:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 fa48 	bl	80095a0 <USBD_LL_Init>

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d006      	beq.n	800813c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
 800813a:	e001      	b.n	8008140 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800813c:	2302      	movs	r3, #2
 800813e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fa6b 	bl	8009630 <USBD_LL_Start>

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00c      	beq.n	80081ac <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	460b      	mov	r3, r1
 80081c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	4611      	mov	r1, r2
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fed7 	bl	8008fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2b02      	cmp	r3, #2
 8008216:	d016      	beq.n	8008246 <USBD_LL_SetupStage+0x6a>
 8008218:	2b02      	cmp	r3, #2
 800821a:	d81c      	bhi.n	8008256 <USBD_LL_SetupStage+0x7a>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <USBD_LL_SetupStage+0x4a>
 8008220:	2b01      	cmp	r3, #1
 8008222:	d008      	beq.n	8008236 <USBD_LL_SetupStage+0x5a>
 8008224:	e017      	b.n	8008256 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9ca 	bl	80085c8 <USBD_StdDevReq>
      break;
 8008234:	e01a      	b.n	800826c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa2c 	bl	800869c <USBD_StdItfReq>
      break;
 8008244:	e012      	b.n	800826c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa6c 	bl	800872c <USBD_StdEPReq>
      break;
 8008254:	e00a      	b.n	800826c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800825c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008260:	b2db      	uxtb	r3, r3
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fa43 	bl	80096f0 <USBD_LL_StallEP>
      break;
 800826a:	bf00      	nop
  }

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b086      	sub	sp, #24
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	460b      	mov	r3, r1
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d14b      	bne.n	8008322 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008290:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008298:	2b03      	cmp	r3, #3
 800829a:	d134      	bne.n	8008306 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d919      	bls.n	80082dc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	1ad2      	subs	r2, r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082be:	429a      	cmp	r2, r3
 80082c0:	d203      	bcs.n	80082ca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	e002      	b.n	80082d0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 ff35 	bl	8009144 <USBD_CtlContinueRx>
 80082da:	e038      	b.n	800834e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d105      	bne.n	80082fe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 ff32 	bl	8009168 <USBD_CtlSendStatus>
 8008304:	e023      	b.n	800834e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800830c:	2b05      	cmp	r3, #5
 800830e:	d11e      	bne.n	800834e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008318:	2100      	movs	r1, #0
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f001 f9e8 	bl	80096f0 <USBD_LL_StallEP>
 8008320:	e015      	b.n	800834e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00d      	beq.n	800834a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008334:	2b03      	cmp	r3, #3
 8008336:	d108      	bne.n	800834a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	7afa      	ldrb	r2, [r7, #11]
 8008342:	4611      	mov	r1, r2
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	4798      	blx	r3
 8008348:	e001      	b.n	800834e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800834a:	2302      	movs	r3, #2
 800834c:	e000      	b.n	8008350 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	460b      	mov	r3, r1
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d17f      	bne.n	800846c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3314      	adds	r3, #20
 8008370:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008378:	2b02      	cmp	r3, #2
 800837a:	d15c      	bne.n	8008436 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d915      	bls.n	80083b4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	1ad2      	subs	r2, r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	b29b      	uxth	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 febd 	bl	8009120 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083a6:	2300      	movs	r3, #0
 80083a8:	2200      	movs	r2, #0
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f001 fa4a 	bl	8009846 <USBD_LL_PrepareReceive>
 80083b2:	e04e      	b.n	8008452 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	6912      	ldr	r2, [r2, #16]
 80083bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80083c0:	fb01 f202 	mul.w	r2, r1, r2
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11c      	bne.n	8008404 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d316      	bcc.n	8008404 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d20f      	bcs.n	8008404 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fe99 	bl	8009120 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083f6:	2300      	movs	r3, #0
 80083f8:	2200      	movs	r2, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f001 fa22 	bl	8009846 <USBD_LL_PrepareReceive>
 8008402:	e026      	b.n	8008452 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008416:	2b03      	cmp	r3, #3
 8008418:	d105      	bne.n	8008426 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008426:	2180      	movs	r1, #128	@ 0x80
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 f961 	bl	80096f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fead 	bl	800918e <USBD_CtlReceiveStatus>
 8008434:	e00d      	b.n	8008452 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800843c:	2b04      	cmp	r3, #4
 800843e:	d004      	beq.n	800844a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800844a:	2180      	movs	r1, #128	@ 0x80
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f001 f94f 	bl	80096f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11d      	bne.n	8008498 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fe81 	bl	8008164 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800846a:	e015      	b.n	8008498 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00d      	beq.n	8008494 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800847e:	2b03      	cmp	r3, #3
 8008480:	d108      	bne.n	8008494 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	7afa      	ldrb	r2, [r7, #11]
 800848c:	4611      	mov	r1, r2
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	4798      	blx	r3
 8008492:	e001      	b.n	8008498 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008494:	2302      	movs	r3, #2
 8008496:	e000      	b.n	800849a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084aa:	2340      	movs	r3, #64	@ 0x40
 80084ac:	2200      	movs	r2, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f8d8 	bl	8009666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2240      	movs	r2, #64	@ 0x40
 80084c2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084c6:	2340      	movs	r3, #64	@ 0x40
 80084c8:	2200      	movs	r2, #0
 80084ca:	2180      	movs	r1, #128	@ 0x80
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f8ca 	bl	8009666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2240      	movs	r2, #64	@ 0x40
 80084dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6852      	ldr	r2, [r2, #4]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	4611      	mov	r1, r2
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
  }

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr

0800856a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008578:	2b04      	cmp	r3, #4
 800857a:	d105      	bne.n	8008588 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d10b      	bne.n	80085be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085de:	2b40      	cmp	r3, #64	@ 0x40
 80085e0:	d005      	beq.n	80085ee <USBD_StdDevReq+0x26>
 80085e2:	2b40      	cmp	r3, #64	@ 0x40
 80085e4:	d84f      	bhi.n	8008686 <USBD_StdDevReq+0xbe>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <USBD_StdDevReq+0x36>
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d14b      	bne.n	8008686 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
      break;
 80085fc:	e048      	b.n	8008690 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2b09      	cmp	r3, #9
 8008604:	d839      	bhi.n	800867a <USBD_StdDevReq+0xb2>
 8008606:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <USBD_StdDevReq+0x44>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800865d 	.word	0x0800865d
 8008610:	08008671 	.word	0x08008671
 8008614:	0800867b 	.word	0x0800867b
 8008618:	08008667 	.word	0x08008667
 800861c:	0800867b 	.word	0x0800867b
 8008620:	0800863f 	.word	0x0800863f
 8008624:	08008635 	.word	0x08008635
 8008628:	0800867b 	.word	0x0800867b
 800862c:	08008653 	.word	0x08008653
 8008630:	08008649 	.word	0x08008649
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9dc 	bl	80089f4 <USBD_GetDescriptor>
          break;
 800863c:	e022      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb3f 	bl	8008cc4 <USBD_SetAddress>
          break;
 8008646:	e01d      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb7e 	bl	8008d4c <USBD_SetConfig>
          break;
 8008650:	e018      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc07 	bl	8008e68 <USBD_GetConfig>
          break;
 800865a:	e013      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fc37 	bl	8008ed2 <USBD_GetStatus>
          break;
 8008664:	e00e      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc65 	bl	8008f38 <USBD_SetFeature>
          break;
 800866e:	e009      	b.n	8008684 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fc74 	bl	8008f60 <USBD_ClrFeature>
          break;
 8008678:	e004      	b.n	8008684 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fcc9 	bl	8009014 <USBD_CtlError>
          break;
 8008682:	bf00      	nop
      }
      break;
 8008684:	e004      	b.n	8008690 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fcc3 	bl	8009014 <USBD_CtlError>
      break;
 800868e:	bf00      	nop
  }

  return ret;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop

0800869c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086b2:	2b40      	cmp	r3, #64	@ 0x40
 80086b4:	d005      	beq.n	80086c2 <USBD_StdItfReq+0x26>
 80086b6:	2b40      	cmp	r3, #64	@ 0x40
 80086b8:	d82e      	bhi.n	8008718 <USBD_StdItfReq+0x7c>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <USBD_StdItfReq+0x26>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d12a      	bne.n	8008718 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c8:	3b01      	subs	r3, #1
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d81d      	bhi.n	800870a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	889b      	ldrh	r3, [r3, #4]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d813      	bhi.n	8008700 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d110      	bne.n	8008714 <USBD_StdItfReq+0x78>
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10d      	bne.n	8008714 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fd35 	bl	8009168 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086fe:	e009      	b.n	8008714 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc86 	bl	8009014 <USBD_CtlError>
          break;
 8008708:	e004      	b.n	8008714 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fc81 	bl	8009014 <USBD_CtlError>
          break;
 8008712:	e000      	b.n	8008716 <USBD_StdItfReq+0x7a>
          break;
 8008714:	bf00      	nop
      }
      break;
 8008716:	e004      	b.n	8008722 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc7a 	bl	8009014 <USBD_CtlError>
      break;
 8008720:	bf00      	nop
  }

  return USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008748:	2b40      	cmp	r3, #64	@ 0x40
 800874a:	d007      	beq.n	800875c <USBD_StdEPReq+0x30>
 800874c:	2b40      	cmp	r3, #64	@ 0x40
 800874e:	f200 8146 	bhi.w	80089de <USBD_StdEPReq+0x2b2>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <USBD_StdEPReq+0x40>
 8008756:	2b20      	cmp	r3, #32
 8008758:	f040 8141 	bne.w	80089de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
      break;
 800876a:	e13d      	b.n	80089e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008774:	2b20      	cmp	r3, #32
 8008776:	d10a      	bne.n	800878e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

        return ret;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	e12d      	b.n	80089ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b03      	cmp	r3, #3
 8008794:	d007      	beq.n	80087a6 <USBD_StdEPReq+0x7a>
 8008796:	2b03      	cmp	r3, #3
 8008798:	f300 811b 	bgt.w	80089d2 <USBD_StdEPReq+0x2a6>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d072      	beq.n	8008886 <USBD_StdEPReq+0x15a>
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d03a      	beq.n	800881a <USBD_StdEPReq+0xee>
 80087a4:	e115      	b.n	80089d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d002      	beq.n	80087b6 <USBD_StdEPReq+0x8a>
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d015      	beq.n	80087e0 <USBD_StdEPReq+0xb4>
 80087b4:	e02b      	b.n	800880e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00c      	beq.n	80087d6 <USBD_StdEPReq+0xaa>
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b80      	cmp	r3, #128	@ 0x80
 80087c0:	d009      	beq.n	80087d6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 ff92 	bl	80096f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087cc:	2180      	movs	r1, #128	@ 0x80
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 ff8e 	bl	80096f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087d4:	e020      	b.n	8008818 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc1b 	bl	8009014 <USBD_CtlError>
              break;
 80087de:	e01b      	b.n	8008818 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10e      	bne.n	8008806 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <USBD_StdEPReq+0xda>
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b80      	cmp	r3, #128	@ 0x80
 80087f2:	d008      	beq.n	8008806 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	88db      	ldrh	r3, [r3, #6]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 ff75 	bl	80096f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fcae 	bl	8009168 <USBD_CtlSendStatus>

              break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fbff 	bl	8009014 <USBD_CtlError>
              break;
 8008816:	bf00      	nop
          }
          break;
 8008818:	e0e0      	b.n	80089dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008820:	2b02      	cmp	r3, #2
 8008822:	d002      	beq.n	800882a <USBD_StdEPReq+0xfe>
 8008824:	2b03      	cmp	r3, #3
 8008826:	d015      	beq.n	8008854 <USBD_StdEPReq+0x128>
 8008828:	e026      	b.n	8008878 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00c      	beq.n	800884a <USBD_StdEPReq+0x11e>
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b80      	cmp	r3, #128	@ 0x80
 8008834:	d009      	beq.n	800884a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 ff58 	bl	80096f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008840:	2180      	movs	r1, #128	@ 0x80
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 ff54 	bl	80096f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008848:	e01c      	b.n	8008884 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fbe1 	bl	8009014 <USBD_CtlError>
              break;
 8008852:	e017      	b.n	8008884 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	885b      	ldrh	r3, [r3, #2]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d112      	bne.n	8008882 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 ff5f 	bl	800972e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc79 	bl	8009168 <USBD_CtlSendStatus>
              }
              break;
 8008876:	e004      	b.n	8008882 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fbca 	bl	8009014 <USBD_CtlError>
              break;
 8008880:	e000      	b.n	8008884 <USBD_StdEPReq+0x158>
              break;
 8008882:	bf00      	nop
          }
          break;
 8008884:	e0aa      	b.n	80089dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888c:	2b02      	cmp	r3, #2
 800888e:	d002      	beq.n	8008896 <USBD_StdEPReq+0x16a>
 8008890:	2b03      	cmp	r3, #3
 8008892:	d032      	beq.n	80088fa <USBD_StdEPReq+0x1ce>
 8008894:	e097      	b.n	80089c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <USBD_StdEPReq+0x180>
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b80      	cmp	r3, #128	@ 0x80
 80088a0:	d004      	beq.n	80088ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fbb5 	bl	8009014 <USBD_CtlError>
                break;
 80088aa:	e091      	b.n	80089d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	da0b      	bge.n	80088cc <USBD_StdEPReq+0x1a0>
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	3310      	adds	r3, #16
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	4413      	add	r3, r2
 80088c8:	3304      	adds	r3, #4
 80088ca:	e00b      	b.n	80088e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	3304      	adds	r3, #4
 80088e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2202      	movs	r2, #2
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fbf8 	bl	80090e8 <USBD_CtlSendData>
              break;
 80088f8:	e06a      	b.n	80089d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da11      	bge.n	8008926 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	f003 020f 	and.w	r2, r3, #15
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	3318      	adds	r3, #24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d117      	bne.n	800894c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb78 	bl	8009014 <USBD_CtlError>
                  break;
 8008924:	e054      	b.n	80089d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fb65 	bl	8009014 <USBD_CtlError>
                  break;
 800894a:	e041      	b.n	80089d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800894c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da0b      	bge.n	800896c <USBD_StdEPReq+0x240>
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800895a:	4613      	mov	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	3310      	adds	r3, #16
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	4413      	add	r3, r2
 8008968:	3304      	adds	r3, #4
 800896a:	e00b      	b.n	8008984 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	3304      	adds	r3, #4
 8008984:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <USBD_StdEPReq+0x266>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b80      	cmp	r3, #128	@ 0x80
 8008990:	d103      	bne.n	800899a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e00e      	b.n	80089b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fee4 	bl	800976c <USBD_LL_IsStallEP>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	e002      	b.n	80089b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2202      	movs	r2, #2
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fb92 	bl	80090e8 <USBD_CtlSendData>
              break;
 80089c4:	e004      	b.n	80089d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fb23 	bl	8009014 <USBD_CtlError>
              break;
 80089ce:	bf00      	nop
          }
          break;
 80089d0:	e004      	b.n	80089dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fb1d 	bl	8009014 <USBD_CtlError>
          break;
 80089da:	bf00      	nop
      }
      break;
 80089dc:	e004      	b.n	80089e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fb17 	bl	8009014 <USBD_CtlError>
      break;
 80089e6:	bf00      	nop
  }

  return ret;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	0a1b      	lsrs	r3, r3, #8
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b06      	cmp	r3, #6
 8008a16:	f200 8128 	bhi.w	8008c6a <USBD_GetDescriptor+0x276>
 8008a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a20 <USBD_GetDescriptor+0x2c>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a3d 	.word	0x08008a3d
 8008a24:	08008a55 	.word	0x08008a55
 8008a28:	08008a95 	.word	0x08008a95
 8008a2c:	08008c6b 	.word	0x08008c6b
 8008a30:	08008c6b 	.word	0x08008c6b
 8008a34:	08008c0b 	.word	0x08008c0b
 8008a38:	08008c37 	.word	0x08008c37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
 8008a48:	f107 0108 	add.w	r1, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
      break;
 8008a52:	e112      	b.n	8008c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7c1b      	ldrb	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10d      	bne.n	8008a78 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a64:	f107 0208 	add.w	r2, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	2202      	movs	r2, #2
 8008a74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a76:	e100      	b.n	8008c7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	f107 0208 	add.w	r2, r7, #8
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
 8008a88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	2202      	movs	r2, #2
 8008a90:	701a      	strb	r2, [r3, #0]
      break;
 8008a92:	e0f2      	b.n	8008c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	885b      	ldrh	r3, [r3, #2]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	f200 80ac 	bhi.w	8008bf8 <USBD_GetDescriptor+0x204>
 8008aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <USBD_GetDescriptor+0xb4>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ac1 	.word	0x08008ac1
 8008aac:	08008af5 	.word	0x08008af5
 8008ab0:	08008b29 	.word	0x08008b29
 8008ab4:	08008b5d 	.word	0x08008b5d
 8008ab8:	08008b91 	.word	0x08008b91
 8008abc:	08008bc5 	.word	0x08008bc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7c12      	ldrb	r2, [r2, #16]
 8008ad8:	f107 0108 	add.w	r1, r7, #8
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ae2:	e091      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa94 	bl	8009014 <USBD_CtlError>
            err++;
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	3301      	adds	r3, #1
 8008af0:	72fb      	strb	r3, [r7, #11]
          break;
 8008af2:	e089      	b.n	8008c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	7c12      	ldrb	r2, [r2, #16]
 8008b0c:	f107 0108 	add.w	r1, r7, #8
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3
 8008b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b16:	e077      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa7a 	bl	8009014 <USBD_CtlError>
            err++;
 8008b20:	7afb      	ldrb	r3, [r7, #11]
 8008b22:	3301      	adds	r3, #1
 8008b24:	72fb      	strb	r3, [r7, #11]
          break;
 8008b26:	e06f      	b.n	8008c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	7c12      	ldrb	r2, [r2, #16]
 8008b40:	f107 0108 	add.w	r1, r7, #8
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
 8008b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b4a:	e05d      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa60 	bl	8009014 <USBD_CtlError>
            err++;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	3301      	adds	r3, #1
 8008b58:	72fb      	strb	r3, [r7, #11]
          break;
 8008b5a:	e055      	b.n	8008c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7c12      	ldrb	r2, [r2, #16]
 8008b74:	f107 0108 	add.w	r1, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7e:	e043      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa46 	bl	8009014 <USBD_CtlError>
            err++;
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8e:	e03b      	b.n	8008c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7c12      	ldrb	r2, [r2, #16]
 8008ba8:	f107 0108 	add.w	r1, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bb2:	e029      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa2c 	bl	8009014 <USBD_CtlError>
            err++;
 8008bbc:	7afb      	ldrb	r3, [r7, #11]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bc2:	e021      	b.n	8008c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	7c12      	ldrb	r2, [r2, #16]
 8008bdc:	f107 0108 	add.w	r1, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be6:	e00f      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa12 	bl	8009014 <USBD_CtlError>
            err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf6:	e007      	b.n	8008c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa0a 	bl	8009014 <USBD_CtlError>
          err++;
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	3301      	adds	r3, #1
 8008c04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c06:	e038      	b.n	8008c7a <USBD_GetDescriptor+0x286>
 8008c08:	e037      	b.n	8008c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	7c1b      	ldrb	r3, [r3, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1a:	f107 0208 	add.w	r2, r7, #8
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4798      	blx	r3
 8008c22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c24:	e029      	b.n	8008c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f9f3 	bl	8009014 <USBD_CtlError>
        err++;
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	3301      	adds	r3, #1
 8008c32:	72fb      	strb	r3, [r7, #11]
      break;
 8008c34:	e021      	b.n	8008c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7c1b      	ldrb	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c46:	f107 0208 	add.w	r2, r7, #8
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4798      	blx	r3
 8008c4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	2207      	movs	r2, #7
 8008c56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c58:	e00f      	b.n	8008c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9d9 	bl	8009014 <USBD_CtlError>
        err++;
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	3301      	adds	r3, #1
 8008c66:	72fb      	strb	r3, [r7, #11]
      break;
 8008c68:	e007      	b.n	8008c7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9d1 	bl	8009014 <USBD_CtlError>
      err++;
 8008c72:	7afb      	ldrb	r3, [r7, #11]
 8008c74:	3301      	adds	r3, #1
 8008c76:	72fb      	strb	r3, [r7, #11]
      break;
 8008c78:	bf00      	nop
  }

  if (err != 0U)
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11c      	bne.n	8008cba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c80:	893b      	ldrh	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d011      	beq.n	8008caa <USBD_GetDescriptor+0x2b6>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	88da      	ldrh	r2, [r3, #6]
 8008c92:	893b      	ldrh	r3, [r7, #8]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	bf28      	it	cs
 8008c98:	4613      	movcs	r3, r2
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c9e:	893b      	ldrh	r3, [r7, #8]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa1f 	bl	80090e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa58 	bl	8009168 <USBD_CtlSendStatus>
 8008cb8:	e000      	b.n	8008cbc <USBD_GetDescriptor+0x2c8>
    return;
 8008cba:	bf00      	nop
    }
  }
}
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop

08008cc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	889b      	ldrh	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d130      	bne.n	8008d38 <USBD_SetAddress+0x74>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d12c      	bne.n	8008d38 <USBD_SetAddress+0x74>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ce4:	d828      	bhi.n	8008d38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d104      	bne.n	8008d06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f988 	bl	8009014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d04:	e01d      	b.n	8008d42 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7bfa      	ldrb	r2, [r7, #15]
 8008d0a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fd55 	bl	80097c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa25 	bl	8009168 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	e009      	b.n	8008d42 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d36:	e004      	b.n	8008d42 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f96a 	bl	8009014 <USBD_CtlError>
  }
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	4b41      	ldr	r3, [pc, #260]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008d5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d60:	4b40      	ldr	r3, [pc, #256]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d904      	bls.n	8008d72 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f952 	bl	8009014 <USBD_CtlError>
 8008d70:	e075      	b.n	8008e5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d002      	beq.n	8008d82 <USBD_SetConfig+0x36>
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d023      	beq.n	8008dc8 <USBD_SetConfig+0x7c>
 8008d80:	e062      	b.n	8008e48 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d82:	4b38      	ldr	r3, [pc, #224]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01a      	beq.n	8008dc0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d8a:	4b36      	ldr	r3, [pc, #216]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2203      	movs	r2, #3
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d9c:	4b31      	ldr	r3, [pc, #196]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff f9e8 	bl	8008178 <USBD_SetClassConfig>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d104      	bne.n	8008db8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f92f 	bl	8009014 <USBD_CtlError>
            return;
 8008db6:	e052      	b.n	8008e5e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9d5 	bl	8009168 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dbe:	e04e      	b.n	8008e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9d1 	bl	8009168 <USBD_CtlSendStatus>
        break;
 8008dc6:	e04a      	b.n	8008e5e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008dc8:	4b26      	ldr	r3, [pc, #152]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d112      	bne.n	8008df6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008dd8:	4b22      	ldr	r3, [pc, #136]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008de2:	4b20      	ldr	r3, [pc, #128]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff f9e4 	bl	80081b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f9ba 	bl	8009168 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008df4:	e033      	b.n	8008e5e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008df6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d01d      	beq.n	8008e40 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff f9d2 	bl	80081b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e12:	4b14      	ldr	r3, [pc, #80]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e1c:	4b11      	ldr	r3, [pc, #68]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff f9a8 	bl	8008178 <USBD_SetClassConfig>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d104      	bne.n	8008e38 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8ef 	bl	8009014 <USBD_CtlError>
            return;
 8008e36:	e012      	b.n	8008e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f995 	bl	8009168 <USBD_CtlSendStatus>
        break;
 8008e3e:	e00e      	b.n	8008e5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f991 	bl	8009168 <USBD_CtlSendStatus>
        break;
 8008e46:	e00a      	b.n	8008e5e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8e2 	bl	8009014 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e50:	4b04      	ldr	r3, [pc, #16]	@ (8008e64 <USBD_SetConfig+0x118>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff f9ad 	bl	80081b6 <USBD_ClrClassConfig>
        break;
 8008e5c:	bf00      	nop
    }
  }
}
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000288 	.word	0x20000288

08008e68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88db      	ldrh	r3, [r3, #6]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d004      	beq.n	8008e84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8c9 	bl	8009014 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e82:	e022      	b.n	8008eca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	dc02      	bgt.n	8008e94 <USBD_GetConfig+0x2c>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dc03      	bgt.n	8008e9a <USBD_GetConfig+0x32>
 8008e92:	e015      	b.n	8008ec0 <USBD_GetConfig+0x58>
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d00b      	beq.n	8008eb0 <USBD_GetConfig+0x48>
 8008e98:	e012      	b.n	8008ec0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f91d 	bl	80090e8 <USBD_CtlSendData>
        break;
 8008eae:	e00c      	b.n	8008eca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f915 	bl	80090e8 <USBD_CtlSendData>
        break;
 8008ebe:	e004      	b.n	8008eca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f8a6 	bl	8009014 <USBD_CtlError>
        break;
 8008ec8:	bf00      	nop
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d81e      	bhi.n	8008f26 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	88db      	ldrh	r3, [r3, #6]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d004      	beq.n	8008efa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f88e 	bl	8009014 <USBD_CtlError>
        break;
 8008ef8:	e01a      	b.n	8008f30 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f043 0202 	orr.w	r2, r3, #2
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	330c      	adds	r3, #12
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f8e2 	bl	80090e8 <USBD_CtlSendData>
      break;
 8008f24:	e004      	b.n	8008f30 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f873 	bl	8009014 <USBD_CtlError>
      break;
 8008f2e:	bf00      	nop
  }
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d106      	bne.n	8008f58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f908 	bl	8009168 <USBD_CtlSendStatus>
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f70:	3b01      	subs	r3, #1
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d80b      	bhi.n	8008f8e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10c      	bne.n	8008f98 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f8ee 	bl	8009168 <USBD_CtlSendStatus>
      }
      break;
 8008f8c:	e004      	b.n	8008f98 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f83f 	bl	8009014 <USBD_CtlError>
      break;
 8008f96:	e000      	b.n	8008f9a <USBD_ClrFeature+0x3a>
      break;
 8008f98:	bf00      	nop
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785a      	ldrb	r2, [r3, #1]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3302      	adds	r3, #2
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	3303      	adds	r3, #3
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	3305      	adds	r3, #5
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	3306      	adds	r3, #6
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	3307      	adds	r3, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	b29b      	uxth	r3, r3
 8009002:	4413      	add	r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	80da      	strh	r2, [r3, #6]

}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr

08009014 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800901e:	2180      	movs	r1, #128	@ 0x80
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fb65 	bl	80096f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fb61 	bl	80096f0 <USBD_LL_StallEP>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d032      	beq.n	80090b2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f834 	bl	80090ba <USBD_GetLen>
 8009052:	4603      	mov	r3, r0
 8009054:	3301      	adds	r3, #1
 8009056:	b29b      	uxth	r3, r3
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	75fa      	strb	r2, [r7, #23]
 8009066:	461a      	mov	r2, r3
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	4413      	add	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	75fa      	strb	r2, [r7, #23]
 8009078:	461a      	mov	r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	2203      	movs	r2, #3
 8009080:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009082:	e012      	b.n	80090aa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	60fa      	str	r2, [r7, #12]
 800908a:	7dfa      	ldrb	r2, [r7, #23]
 800908c:	1c51      	adds	r1, r2, #1
 800908e:	75f9      	strb	r1, [r7, #23]
 8009090:	4611      	mov	r1, r2
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	440a      	add	r2, r1
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	75fa      	strb	r2, [r7, #23]
 80090a0:	461a      	mov	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e8      	bne.n	8009084 <USBD_GetString+0x4e>
    }
  }
}
 80090b2:	bf00      	nop
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090c6:	e005      	b.n	80090d4 <USBD_GetLen+0x1a>
  {
    len++;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	3301      	adds	r3, #1
 80090cc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3301      	adds	r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1f5      	bne.n	80090c8 <USBD_GetLen+0xe>
  }

  return len;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090fe:	88fa      	ldrh	r2, [r7, #6]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fb75 	bl	8009800 <USBD_LL_Transmit>

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	2100      	movs	r1, #0
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fb63 	bl	8009800 <USBD_LL_Transmit>

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fb74 	bl	8009846 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2204      	movs	r2, #4
 8009174:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009178:	2300      	movs	r3, #0
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fb3e 	bl	8009800 <USBD_LL_Transmit>

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2205      	movs	r2, #5
 800919a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800919e:	2300      	movs	r3, #0
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fb4e 	bl	8009846 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091b8:	2200      	movs	r2, #0
 80091ba:	490e      	ldr	r1, [pc, #56]	@ (80091f4 <MX_USB_DEVICE_Init+0x40>)
 80091bc:	480e      	ldr	r0, [pc, #56]	@ (80091f8 <MX_USB_DEVICE_Init+0x44>)
 80091be:	f7fe ff81 	bl	80080c4 <USBD_Init>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091c8:	f7f7 fa3a 	bl	8000640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80091cc:	490b      	ldr	r1, [pc, #44]	@ (80091fc <MX_USB_DEVICE_Init+0x48>)
 80091ce:	480a      	ldr	r0, [pc, #40]	@ (80091f8 <MX_USB_DEVICE_Init+0x44>)
 80091d0:	f7fe ffa3 	bl	800811a <USBD_RegisterClass>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091da:	f7f7 fa31 	bl	8000640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091de:	4806      	ldr	r0, [pc, #24]	@ (80091f8 <MX_USB_DEVICE_Init+0x44>)
 80091e0:	f7fe ffb4 	bl	800814c <USBD_Start>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80091ea:	f7f7 fa29 	bl	8000640 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091ee:	bf00      	nop
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000114 	.word	0x20000114
 80091f8:	2000028c 	.word	0x2000028c
 80091fc:	2000000c 	.word	0x2000000c

08009200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2212      	movs	r2, #18
 8009210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	@ (8009220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000130 	.word	0x20000130

08009224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2204      	movs	r2, #4
 8009234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009236:	4b03      	ldr	r3, [pc, #12]	@ (8009244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000144 	.word	0x20000144

08009248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	6039      	str	r1, [r7, #0]
 8009252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4907      	ldr	r1, [pc, #28]	@ (800927c <USBD_FS_ProductStrDescriptor+0x34>)
 800925e:	4808      	ldr	r0, [pc, #32]	@ (8009280 <USBD_FS_ProductStrDescriptor+0x38>)
 8009260:	f7ff fee9 	bl	8009036 <USBD_GetString>
 8009264:	e004      	b.n	8009270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4904      	ldr	r1, [pc, #16]	@ (800927c <USBD_FS_ProductStrDescriptor+0x34>)
 800926a:	4805      	ldr	r0, [pc, #20]	@ (8009280 <USBD_FS_ProductStrDescriptor+0x38>)
 800926c:	f7ff fee3 	bl	8009036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009270:	4b02      	ldr	r3, [pc, #8]	@ (800927c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000550 	.word	0x20000550
 8009280:	08009994 	.word	0x08009994

08009284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	4904      	ldr	r1, [pc, #16]	@ (80092a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009294:	4804      	ldr	r0, [pc, #16]	@ (80092a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009296:	f7ff fece 	bl	8009036 <USBD_GetString>
  return USBD_StrDesc;
 800929a:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000550 	.word	0x20000550
 80092a8:	080099ac 	.word	0x080099ac

080092ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	221a      	movs	r2, #26
 80092bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092be:	f000 f843 	bl	8009348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092c2:	4b02      	ldr	r3, [pc, #8]	@ (80092cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000148 	.word	0x20000148

080092d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d105      	bne.n	80092ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4907      	ldr	r1, [pc, #28]	@ (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092e6:	4808      	ldr	r0, [pc, #32]	@ (8009308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092e8:	f7ff fea5 	bl	8009036 <USBD_GetString>
 80092ec:	e004      	b.n	80092f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4904      	ldr	r1, [pc, #16]	@ (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092f2:	4805      	ldr	r0, [pc, #20]	@ (8009308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092f4:	f7ff fe9f 	bl	8009036 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f8:	4b02      	ldr	r3, [pc, #8]	@ (8009304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000550 	.word	0x20000550
 8009308:	080099b0 	.word	0x080099b0

0800930c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4907      	ldr	r1, [pc, #28]	@ (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009322:	4808      	ldr	r0, [pc, #32]	@ (8009344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009324:	f7ff fe87 	bl	8009036 <USBD_GetString>
 8009328:	e004      	b.n	8009334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4904      	ldr	r1, [pc, #16]	@ (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800932e:	4805      	ldr	r0, [pc, #20]	@ (8009344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009330:	f7ff fe81 	bl	8009036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000550 	.word	0x20000550
 8009344:	080099bc 	.word	0x080099bc

08009348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800934e:	4b0f      	ldr	r3, [pc, #60]	@ (800938c <Get_SerialNum+0x44>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009354:	4b0e      	ldr	r3, [pc, #56]	@ (8009390 <Get_SerialNum+0x48>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800935a:	4b0e      	ldr	r3, [pc, #56]	@ (8009394 <Get_SerialNum+0x4c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4413      	add	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800936e:	2208      	movs	r2, #8
 8009370:	4909      	ldr	r1, [pc, #36]	@ (8009398 <Get_SerialNum+0x50>)
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 f814 	bl	80093a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009378:	2204      	movs	r2, #4
 800937a:	4908      	ldr	r1, [pc, #32]	@ (800939c <Get_SerialNum+0x54>)
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	f000 f80f 	bl	80093a0 <IntToUnicode>
  }
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	1ffff7e8 	.word	0x1ffff7e8
 8009390:	1ffff7ec 	.word	0x1ffff7ec
 8009394:	1ffff7f0 	.word	0x1ffff7f0
 8009398:	2000014a 	.word	0x2000014a
 800939c:	2000015a 	.word	0x2000015a

080093a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]
 80093b6:	e027      	b.n	8009408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	2b09      	cmp	r3, #9
 80093be:	d80b      	bhi.n	80093d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0f1b      	lsrs	r3, r3, #28
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4619      	mov	r1, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	440b      	add	r3, r1
 80093d0:	3230      	adds	r2, #48	@ 0x30
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	e00a      	b.n	80093ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	440b      	add	r3, r1
 80093e8:	3237      	adds	r2, #55	@ 0x37
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	3301      	adds	r3, #1
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4413      	add	r3, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	3301      	adds	r3, #1
 8009406:	75fb      	strb	r3, [r7, #23]
 8009408:	7dfa      	ldrb	r2, [r7, #23]
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	429a      	cmp	r2, r3
 800940e:	d3d3      	bcc.n	80093b8 <IntToUnicode+0x18>
  }
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a0d      	ldr	r2, [pc, #52]	@ (8009460 <HAL_PCD_MspInit+0x44>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d113      	bne.n	8009456 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800942e:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <HAL_PCD_MspInit+0x48>)
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	4a0c      	ldr	r2, [pc, #48]	@ (8009464 <HAL_PCD_MspInit+0x48>)
 8009434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009438:	61d3      	str	r3, [r2, #28]
 800943a:	4b0a      	ldr	r3, [pc, #40]	@ (8009464 <HAL_PCD_MspInit+0x48>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	2014      	movs	r0, #20
 800944c:	f7f8 f819 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009450:	2014      	movs	r0, #20
 8009452:	f7f8 f832 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40005c00 	.word	0x40005c00
 8009464:	40021000 	.word	0x40021000

08009468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fe feac 	bl	80081dc <USBD_LL_SetupStage>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	4619      	mov	r1, r3
 80094b6:	f7fe fede 	bl	8008276 <USBD_LL_DataOutStage>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	440b      	add	r3, r1
 80094e2:	3324      	adds	r3, #36	@ 0x24
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	4619      	mov	r1, r3
 80094ea:	f7fe ff35 	bl	8008358 <USBD_LL_DataInStage>
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff f845 	bl	8008594 <USBD_LL_SOF>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800951a:	2301      	movs	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	799b      	ldrb	r3, [r3, #6]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d001      	beq.n	800952a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009526:	f7f7 f88b 	bl	8000640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe fff5 	bl	8008524 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe ffae 	bl	80084a2 <USBD_LL_Reset>
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe ffef 	bl	8008542 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7a9b      	ldrb	r3, [r3, #10]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800956c:	4b04      	ldr	r3, [pc, #16]	@ (8009580 <HAL_PCD_SuspendCallback+0x30>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	4a03      	ldr	r2, [pc, #12]	@ (8009580 <HAL_PCD_SuspendCallback+0x30>)
 8009572:	f043 0306 	orr.w	r3, r3, #6
 8009576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	e000ed00 	.word	0xe000ed00

08009584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe ffe9 	bl	800856a <USBD_LL_Resume>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009628 <USBD_LL_Init+0x88>)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009628 <USBD_LL_Init+0x88>)
 80095b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009628 <USBD_LL_Init+0x88>)
 80095ba:	4a1c      	ldr	r2, [pc, #112]	@ (800962c <USBD_LL_Init+0x8c>)
 80095bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095be:	4b1a      	ldr	r3, [pc, #104]	@ (8009628 <USBD_LL_Init+0x88>)
 80095c0:	2208      	movs	r2, #8
 80095c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095c4:	4b18      	ldr	r3, [pc, #96]	@ (8009628 <USBD_LL_Init+0x88>)
 80095c6:	2202      	movs	r2, #2
 80095c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095ca:	4b17      	ldr	r3, [pc, #92]	@ (8009628 <USBD_LL_Init+0x88>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095d0:	4b15      	ldr	r3, [pc, #84]	@ (8009628 <USBD_LL_Init+0x88>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095d6:	4b14      	ldr	r3, [pc, #80]	@ (8009628 <USBD_LL_Init+0x88>)
 80095d8:	2200      	movs	r2, #0
 80095da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095dc:	4812      	ldr	r0, [pc, #72]	@ (8009628 <USBD_LL_Init+0x88>)
 80095de:	f7f8 fdcf 	bl	8002180 <HAL_PCD_Init>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095e8:	f7f7 f82a 	bl	8000640 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80095f2:	2318      	movs	r3, #24
 80095f4:	2200      	movs	r2, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	f7fa fac9 	bl	8003b8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009602:	2358      	movs	r3, #88	@ 0x58
 8009604:	2200      	movs	r2, #0
 8009606:	2180      	movs	r1, #128	@ 0x80
 8009608:	f7fa fac1 	bl	8003b8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009616:	2200      	movs	r2, #0
 8009618:	2181      	movs	r1, #129	@ 0x81
 800961a:	f7fa fab8 	bl	8003b8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20000750 	.word	0x20000750
 800962c:	40005c00 	.word	0x40005c00

08009630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009646:	4618      	mov	r0, r3
 8009648:	f7f8 fe90 	bl	800236c <HAL_PCD_Start>
 800964c:	4603      	mov	r3, r0
 800964e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f93a 	bl	80098cc <USBD_Get_USB_Status>
 8009658:	4603      	mov	r3, r0
 800965a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965c:	7bbb      	ldrb	r3, [r7, #14]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	461a      	mov	r2, r3
 8009674:	4603      	mov	r3, r0
 8009676:	70fb      	strb	r3, [r7, #3]
 8009678:	460b      	mov	r3, r1
 800967a:	70bb      	strb	r3, [r7, #2]
 800967c:	4613      	mov	r3, r2
 800967e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800968e:	78bb      	ldrb	r3, [r7, #2]
 8009690:	883a      	ldrh	r2, [r7, #0]
 8009692:	78f9      	ldrb	r1, [r7, #3]
 8009694:	f7f8 ffe4 	bl	8002660 <HAL_PCD_EP_Open>
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f914 	bl	80098cc <USBD_Get_USB_Status>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7f9 f822 	bl	800271a <HAL_PCD_EP_Close>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 f8f5 	bl	80098cc <USBD_Get_USB_Status>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800970a:	78fa      	ldrb	r2, [r7, #3]
 800970c:	4611      	mov	r1, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f7f9 f8b3 	bl	800287a <HAL_PCD_EP_SetStall>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	4618      	mov	r0, r3
 800971c:	f000 f8d6 	bl	80098cc <USBD_Get_USB_Status>
 8009720:	4603      	mov	r3, r0
 8009722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009724:	7bbb      	ldrb	r3, [r7, #14]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f7f9 f8f4 	bl	800293a <HAL_PCD_EP_ClrStall>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 f8b7 	bl	80098cc <USBD_Get_USB_Status>
 800975e:	4603      	mov	r3, r0
 8009760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009762:	7bbb      	ldrb	r3, [r7, #14]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800977e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009784:	2b00      	cmp	r3, #0
 8009786:	da0b      	bge.n	80097a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	440b      	add	r3, r1
 800979a:	3312      	adds	r3, #18
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	e00b      	b.n	80097b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	440b      	add	r3, r1
 80097b2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80097b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f8 ff19 	bl	8002618 <HAL_PCD_SetAddress>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 f86d 	bl	80098cc <USBD_Get_USB_Status>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	607a      	str	r2, [r7, #4]
 800980a:	461a      	mov	r2, r3
 800980c:	460b      	mov	r3, r1
 800980e:	72fb      	strb	r3, [r7, #11]
 8009810:	4613      	mov	r3, r2
 8009812:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009822:	893b      	ldrh	r3, [r7, #8]
 8009824:	7af9      	ldrb	r1, [r7, #11]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	f7f8 fff0 	bl	800280c <HAL_PCD_EP_Transmit>
 800982c:	4603      	mov	r3, r0
 800982e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	4618      	mov	r0, r3
 8009834:	f000 f84a 	bl	80098cc <USBD_Get_USB_Status>
 8009838:	4603      	mov	r3, r0
 800983a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800983c:	7dbb      	ldrb	r3, [r7, #22]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b086      	sub	sp, #24
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	461a      	mov	r2, r3
 8009852:	460b      	mov	r3, r1
 8009854:	72fb      	strb	r3, [r7, #11]
 8009856:	4613      	mov	r3, r2
 8009858:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009868:	893b      	ldrh	r3, [r7, #8]
 800986a:	7af9      	ldrb	r1, [r7, #11]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	f7f8 ff9c 	bl	80027aa <HAL_PCD_EP_Receive>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f827 	bl	80098cc <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009882:	7dbb      	ldrb	r3, [r7, #22]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009894:	4b02      	ldr	r3, [pc, #8]	@ (80098a0 <USBD_static_malloc+0x14>)
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	bc80      	pop	{r7}
 800989e:	4770      	bx	lr
 80098a0:	20000a28 	.word	0x20000a28

080098a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bc80      	pop	{r7}
 80098b4:	4770      	bx	lr

080098b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098c2:	bf00      	nop
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr

080098cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d817      	bhi.n	8009910 <USBD_Get_USB_Status+0x44>
 80098e0:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <USBD_Get_USB_Status+0x1c>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	080098f9 	.word	0x080098f9
 80098ec:	080098ff 	.word	0x080098ff
 80098f0:	08009905 	.word	0x08009905
 80098f4:	0800990b 	.word	0x0800990b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e00b      	b.n	8009916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098fe:	2302      	movs	r3, #2
 8009900:	73fb      	strb	r3, [r7, #15]
    break;
 8009902:	e008      	b.n	8009916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009904:	2301      	movs	r3, #1
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	e005      	b.n	8009916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800990a:	2302      	movs	r3, #2
 800990c:	73fb      	strb	r3, [r7, #15]
    break;
 800990e:	e002      	b.n	8009916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009910:	2302      	movs	r3, #2
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	bf00      	nop
  }
  return usb_status;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <memset>:
 8009924:	4603      	mov	r3, r0
 8009926:	4402      	add	r2, r0
 8009928:	4293      	cmp	r3, r2
 800992a:	d100      	bne.n	800992e <memset+0xa>
 800992c:	4770      	bx	lr
 800992e:	f803 1b01 	strb.w	r1, [r3], #1
 8009932:	e7f9      	b.n	8009928 <memset+0x4>

08009934 <__libc_init_array>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	2600      	movs	r6, #0
 8009938:	4d0c      	ldr	r5, [pc, #48]	@ (800996c <__libc_init_array+0x38>)
 800993a:	4c0d      	ldr	r4, [pc, #52]	@ (8009970 <__libc_init_array+0x3c>)
 800993c:	1b64      	subs	r4, r4, r5
 800993e:	10a4      	asrs	r4, r4, #2
 8009940:	42a6      	cmp	r6, r4
 8009942:	d109      	bne.n	8009958 <__libc_init_array+0x24>
 8009944:	f000 f81a 	bl	800997c <_init>
 8009948:	2600      	movs	r6, #0
 800994a:	4d0a      	ldr	r5, [pc, #40]	@ (8009974 <__libc_init_array+0x40>)
 800994c:	4c0a      	ldr	r4, [pc, #40]	@ (8009978 <__libc_init_array+0x44>)
 800994e:	1b64      	subs	r4, r4, r5
 8009950:	10a4      	asrs	r4, r4, #2
 8009952:	42a6      	cmp	r6, r4
 8009954:	d105      	bne.n	8009962 <__libc_init_array+0x2e>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	f855 3b04 	ldr.w	r3, [r5], #4
 800995c:	4798      	blx	r3
 800995e:	3601      	adds	r6, #1
 8009960:	e7ee      	b.n	8009940 <__libc_init_array+0xc>
 8009962:	f855 3b04 	ldr.w	r3, [r5], #4
 8009966:	4798      	blx	r3
 8009968:	3601      	adds	r6, #1
 800996a:	e7f2      	b.n	8009952 <__libc_init_array+0x1e>
 800996c:	08009a0c 	.word	0x08009a0c
 8009970:	08009a0c 	.word	0x08009a0c
 8009974:	08009a0c 	.word	0x08009a0c
 8009978:	08009a10 	.word	0x08009a10

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr
