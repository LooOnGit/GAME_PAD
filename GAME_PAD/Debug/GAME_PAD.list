
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009ebc  08009ebc  0000aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f44  08009f44  0000b134  2**0
                  CONTENTS
  4 .ARM          00000000  08009f44  08009f44  0000b134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f44  08009f44  0000b134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f44  08009f44  0000af44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f48  08009f48  0000af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  08009f4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000134  0800a080  0000b134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  0800a080  0000bb04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e80  00000000  00000000  0000b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c9  00000000  00000000  0001ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000235a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  00024998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae7c  00000000  00000000  000258ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019408  00000000  00000000  0004076b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094141  00000000  00000000  00059b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edcb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000edcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f2fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ea4 	.word	0x08009ea4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	08009ea4 	.word	0x08009ea4

0800014c <HAL_GPIO_EXTI_Callback>:
uint32_t HC165_DT;
uint8_t click_report[REPORT_SIZE] = {0};


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin==GPIO_PIN_4){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b10      	cmp	r3, #16
 800015a:	d102      	bne.n	8000162 <HAL_GPIO_EXTI_Callback+0x16>
	  ButtonPoten2 = 1;
 800015c:	4b06      	ldr	r3, [pc, #24]	@ (8000178 <HAL_GPIO_EXTI_Callback+0x2c>)
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin==GPIO_PIN_5){
 8000162:	88fb      	ldrh	r3, [r7, #6]
 8000164:	2b20      	cmp	r3, #32
 8000166:	d102      	bne.n	800016e <HAL_GPIO_EXTI_Callback+0x22>
	  ButtonPoten1 = 1;
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <HAL_GPIO_EXTI_Callback+0x30>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
  }

}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000034a 	.word	0x2000034a
 800017c:	20000340 	.word	0x20000340

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 ff0f 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f9b9 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 fc13 	bl	80009b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000192:	f000 fa13 	bl	80005bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000196:	f000 fa4f 	bl	8000638 <MX_ADC2_Init>
  MX_TIM1_Init();
 800019a:	f000 fab9 	bl	8000710 <MX_TIM1_Init>
  MX_TIM2_Init();
 800019e:	f000 fb0f 	bl	80007c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001a2:	f000 fb61 	bl	8000868 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80001a6:	f009 fa99 	bl	80096dc <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001aa:	f000 fbb1 	bl	8000910 <MX_TIM4_Init>
  MX_I2C2_Init();
 80001ae:	f000 fa81 	bl	80006b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MCP23017_Init(&hi2c2);
 80001b2:	4895      	ldr	r0, [pc, #596]	@ (8000408 <main+0x288>)
 80001b4:	f007 ff53 	bl	800805e <MCP23017_Init>
  MCP23017_EnablePullUps(&hi2c2);
 80001b8:	4893      	ldr	r0, [pc, #588]	@ (8000408 <main+0x288>)
 80001ba:	f007 ffbe 	bl	800813a <MCP23017_EnablePullUps>

//  mode digital
  TLC59116_Init(&hi2c2);
 80001be:	4892      	ldr	r0, [pc, #584]	@ (8000408 <main+0x288>)
 80001c0:	f007 ffcd 	bl	800815e <TLC59116_Init>

  //mode pwm
  TLC59116_Set_All_PWM_Mode(&hi2c2);
 80001c4:	4890      	ldr	r0, [pc, #576]	@ (8000408 <main+0x288>)
 80001c6:	f007 fff2 	bl	80081ae <TLC59116_Set_All_PWM_Mode>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001ca:	2104      	movs	r1, #4
 80001cc:	488f      	ldr	r0, [pc, #572]	@ (800040c <main+0x28c>)
 80001ce:	f005 fa33 	bl	8005638 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001d2:	2104      	movs	r1, #4
 80001d4:	488e      	ldr	r0, [pc, #568]	@ (8000410 <main+0x290>)
 80001d6:	f005 fa2f 	bl	8005638 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001da:	2104      	movs	r1, #4
 80001dc:	488d      	ldr	r0, [pc, #564]	@ (8000414 <main+0x294>)
 80001de:	f005 fa2b 	bl	8005638 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	488c      	ldr	r0, [pc, #560]	@ (8000418 <main+0x298>)
 80001e6:	f005 fa27 	bl	8005638 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//read pot
	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim1);
 80001ea:	4b88      	ldr	r3, [pc, #544]	@ (800040c <main+0x28c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	4b8a      	ldr	r3, [pc, #552]	@ (800041c <main+0x29c>)
 80001f4:	801a      	strh	r2, [r3, #0]
	pulsePre2 = __HAL_TIM_GET_COUNTER(&htim2);
 80001f6:	4b86      	ldr	r3, [pc, #536]	@ (8000410 <main+0x290>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001fc:	b21a      	sxth	r2, r3
 80001fe:	4b88      	ldr	r3, [pc, #544]	@ (8000420 <main+0x2a0>)
 8000200:	801a      	strh	r2, [r3, #0]
	pulsePre3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000202:	4b84      	ldr	r3, [pc, #528]	@ (8000414 <main+0x294>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000208:	b21a      	sxth	r2, r3
 800020a:	4b86      	ldr	r3, [pc, #536]	@ (8000424 <main+0x2a4>)
 800020c:	801a      	strh	r2, [r3, #0]
	pulsePre4 = __HAL_TIM_GET_COUNTER(&htim4);
 800020e:	4b82      	ldr	r3, [pc, #520]	@ (8000418 <main+0x298>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000214:	b21a      	sxth	r2, r3
 8000216:	4b84      	ldr	r3, [pc, #528]	@ (8000428 <main+0x2a8>)
 8000218:	801a      	strh	r2, [r3, #0]
//
//	//	  read button
	portA = ~MCP23017_Read_GPIOA(&hi2c2);
 800021a:	487b      	ldr	r0, [pc, #492]	@ (8000408 <main+0x288>)
 800021c:	f007 ff45 	bl	80080aa <MCP23017_Read_GPIOA>
 8000220:	4603      	mov	r3, r0
 8000222:	43db      	mvns	r3, r3
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b81      	ldr	r3, [pc, #516]	@ (800042c <main+0x2ac>)
 8000228:	701a      	strb	r2, [r3, #0]
	portB = ~MCP23017_Read_GPIOB(&hi2c2);
 800022a:	4877      	ldr	r0, [pc, #476]	@ (8000408 <main+0x288>)
 800022c:	f007 ff54 	bl	80080d8 <MCP23017_Read_GPIOB>
 8000230:	4603      	mov	r3, r0
 8000232:	43db      	mvns	r3, r3
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b7e      	ldr	r3, [pc, #504]	@ (8000430 <main+0x2b0>)
 8000238:	701a      	strb	r2, [r3, #0]
	portA = 0;
 800023a:	4b7c      	ldr	r3, [pc, #496]	@ (800042c <main+0x2ac>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	portB = 0;
 8000240:	4b7b      	ldr	r3, [pc, #492]	@ (8000430 <main+0x2b0>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]

	//set status button buffer HID
	keyboardhid.Keycode0 = portA;
 8000246:	4b79      	ldr	r3, [pc, #484]	@ (800042c <main+0x2ac>)
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	4b7a      	ldr	r3, [pc, #488]	@ (8000434 <main+0x2b4>)
 800024c:	701a      	strb	r2, [r3, #0]
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x08;//button4
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x10;//button5
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x20;//button6
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x40;//button7
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x80;//button8
	keyboardhid.Keycode1 = portB;
 800024e:	4b78      	ldr	r3, [pc, #480]	@ (8000430 <main+0x2b0>)
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b78      	ldr	r3, [pc, #480]	@ (8000434 <main+0x2b4>)
 8000254:	705a      	strb	r2, [r3, #1]
	//set cursor status buffer HID
//	keyboardhid.Keycode0 = pulse1*50;
//	keyboardhid.Keycode1 = pulse2*50;

	//button on poten 1
	if(pulsePre1 > pulseOld1){
 8000256:	4b71      	ldr	r3, [pc, #452]	@ (800041c <main+0x29c>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	b21a      	sxth	r2, r3
 800025c:	4b76      	ldr	r3, [pc, #472]	@ (8000438 <main+0x2b8>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b21b      	sxth	r3, r3
 8000262:	429a      	cmp	r2, r3
 8000264:	dd0b      	ble.n	800027e <main+0xfe>
		pulseOld1 = pulsePre1;
 8000266:	4b6d      	ldr	r3, [pc, #436]	@ (800041c <main+0x29c>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	b21a      	sxth	r2, r3
 800026c:	4b72      	ldr	r3, [pc, #456]	@ (8000438 <main+0x2b8>)
 800026e:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode1 = keyboardhid.Keycode1 | 0x40;
 8000270:	4b70      	ldr	r3, [pc, #448]	@ (8000434 <main+0x2b4>)
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b6e      	ldr	r3, [pc, #440]	@ (8000434 <main+0x2b4>)
 800027c:	705a      	strb	r2, [r3, #1]
	}

	if(pulsePre1 < pulseOld1){
 800027e:	4b67      	ldr	r3, [pc, #412]	@ (800041c <main+0x29c>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b21a      	sxth	r2, r3
 8000284:	4b6c      	ldr	r3, [pc, #432]	@ (8000438 <main+0x2b8>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b21b      	sxth	r3, r3
 800028a:	429a      	cmp	r2, r3
 800028c:	da0b      	bge.n	80002a6 <main+0x126>
		pulseOld1 = pulsePre1;
 800028e:	4b63      	ldr	r3, [pc, #396]	@ (800041c <main+0x29c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b21a      	sxth	r2, r3
 8000294:	4b68      	ldr	r3, [pc, #416]	@ (8000438 <main+0x2b8>)
 8000296:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode1 = keyboardhid.Keycode1 | 0x80;
 8000298:	4b66      	ldr	r3, [pc, #408]	@ (8000434 <main+0x2b4>)
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b64      	ldr	r3, [pc, #400]	@ (8000434 <main+0x2b4>)
 80002a4:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonPoten1  == 1){
 80002a6:	4b65      	ldr	r3, [pc, #404]	@ (800043c <main+0x2bc>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d109      	bne.n	80002c4 <main+0x144>
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x01;
 80002b0:	4b60      	ldr	r3, [pc, #384]	@ (8000434 <main+0x2b4>)
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000434 <main+0x2b4>)
 80002bc:	709a      	strb	r2, [r3, #2]
		ButtonPoten1 = 0;
 80002be:	4b5f      	ldr	r3, [pc, #380]	@ (800043c <main+0x2bc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
	}

	if(pulsePre3 > pulseOld3){
 80002c4:	4b57      	ldr	r3, [pc, #348]	@ (8000424 <main+0x2a4>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	b21a      	sxth	r2, r3
 80002ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000440 <main+0x2c0>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dd0b      	ble.n	80002ec <main+0x16c>
		pulseOld3 = pulsePre3;
 80002d4:	4b53      	ldr	r3, [pc, #332]	@ (8000424 <main+0x2a4>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	b21a      	sxth	r2, r3
 80002da:	4b59      	ldr	r3, [pc, #356]	@ (8000440 <main+0x2c0>)
 80002dc:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x02;
 80002de:	4b55      	ldr	r3, [pc, #340]	@ (8000434 <main+0x2b4>)
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b52      	ldr	r3, [pc, #328]	@ (8000434 <main+0x2b4>)
 80002ea:	709a      	strb	r2, [r3, #2]
	}

	if(pulsePre3 < pulseOld3){
 80002ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000424 <main+0x2a4>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b21a      	sxth	r2, r3
 80002f2:	4b53      	ldr	r3, [pc, #332]	@ (8000440 <main+0x2c0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	429a      	cmp	r2, r3
 80002fa:	da0b      	bge.n	8000314 <main+0x194>
		pulseOld3 = pulsePre3;
 80002fc:	4b49      	ldr	r3, [pc, #292]	@ (8000424 <main+0x2a4>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b21a      	sxth	r2, r3
 8000302:	4b4f      	ldr	r3, [pc, #316]	@ (8000440 <main+0x2c0>)
 8000304:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x04;
 8000306:	4b4b      	ldr	r3, [pc, #300]	@ (8000434 <main+0x2b4>)
 8000308:	789b      	ldrb	r3, [r3, #2]
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b48      	ldr	r3, [pc, #288]	@ (8000434 <main+0x2b4>)
 8000312:	709a      	strb	r2, [r3, #2]
	}

	//button on poten 2
	if(pulsePre2 > pulseOld2){
 8000314:	4b42      	ldr	r3, [pc, #264]	@ (8000420 <main+0x2a0>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	b21a      	sxth	r2, r3
 800031a:	4b4a      	ldr	r3, [pc, #296]	@ (8000444 <main+0x2c4>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	b21b      	sxth	r3, r3
 8000320:	429a      	cmp	r2, r3
 8000322:	dd0b      	ble.n	800033c <main+0x1bc>
		pulseOld2 = pulsePre2;
 8000324:	4b3e      	ldr	r3, [pc, #248]	@ (8000420 <main+0x2a0>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	b21a      	sxth	r2, r3
 800032a:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <main+0x2c4>)
 800032c:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x08;
 800032e:	4b41      	ldr	r3, [pc, #260]	@ (8000434 <main+0x2b4>)
 8000330:	789b      	ldrb	r3, [r3, #2]
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b3e      	ldr	r3, [pc, #248]	@ (8000434 <main+0x2b4>)
 800033a:	709a      	strb	r2, [r3, #2]
	}
	if(pulsePre2 < pulseOld2){
 800033c:	4b38      	ldr	r3, [pc, #224]	@ (8000420 <main+0x2a0>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b21a      	sxth	r2, r3
 8000342:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <main+0x2c4>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	b21b      	sxth	r3, r3
 8000348:	429a      	cmp	r2, r3
 800034a:	da0b      	bge.n	8000364 <main+0x1e4>
		pulseOld2 = pulsePre2;
 800034c:	4b34      	ldr	r3, [pc, #208]	@ (8000420 <main+0x2a0>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	b21a      	sxth	r2, r3
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <main+0x2c4>)
 8000354:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x10;
 8000356:	4b37      	ldr	r3, [pc, #220]	@ (8000434 <main+0x2b4>)
 8000358:	789b      	ldrb	r3, [r3, #2]
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b34      	ldr	r3, [pc, #208]	@ (8000434 <main+0x2b4>)
 8000362:	709a      	strb	r2, [r3, #2]
	}

	if(ButtonPoten2  == 1){
 8000364:	4b38      	ldr	r3, [pc, #224]	@ (8000448 <main+0x2c8>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b01      	cmp	r3, #1
 800036c:	d109      	bne.n	8000382 <main+0x202>
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x20;
 800036e:	4b31      	ldr	r3, [pc, #196]	@ (8000434 <main+0x2b4>)
 8000370:	789b      	ldrb	r3, [r3, #2]
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b2e      	ldr	r3, [pc, #184]	@ (8000434 <main+0x2b4>)
 800037a:	709a      	strb	r2, [r3, #2]
		ButtonPoten2 = 0;
 800037c:	4b32      	ldr	r3, [pc, #200]	@ (8000448 <main+0x2c8>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	}

	if(pulsePre4 > pulseOld4){
 8000382:	4b29      	ldr	r3, [pc, #164]	@ (8000428 <main+0x2a8>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	b21a      	sxth	r2, r3
 8000388:	4b30      	ldr	r3, [pc, #192]	@ (800044c <main+0x2cc>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b21b      	sxth	r3, r3
 800038e:	429a      	cmp	r2, r3
 8000390:	dd0b      	ble.n	80003aa <main+0x22a>
		pulseOld4 = pulsePre4;
 8000392:	4b25      	ldr	r3, [pc, #148]	@ (8000428 <main+0x2a8>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	b21a      	sxth	r2, r3
 8000398:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <main+0x2cc>)
 800039a:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x40;
 800039c:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <main+0x2b4>)
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b23      	ldr	r3, [pc, #140]	@ (8000434 <main+0x2b4>)
 80003a8:	709a      	strb	r2, [r3, #2]
	}
	if(pulsePre4 < pulseOld4){
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <main+0x2a8>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	b21a      	sxth	r2, r3
 80003b0:	4b26      	ldr	r3, [pc, #152]	@ (800044c <main+0x2cc>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	429a      	cmp	r2, r3
 80003b8:	da0b      	bge.n	80003d2 <main+0x252>
		pulseOld4 = pulsePre4;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <main+0x2a8>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	b21a      	sxth	r2, r3
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <main+0x2cc>)
 80003c2:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x80;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <main+0x2b4>)
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b19      	ldr	r3, [pc, #100]	@ (8000434 <main+0x2b4>)
 80003d0:	709a      	strb	r2, [r3, #2]
//
//	//button on poten 1
//	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim2);
//	pulsePre2 = __HAL_TIM_GET_COUNTER(&htim3);
//
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80003d2:	2203      	movs	r2, #3
 80003d4:	4917      	ldr	r1, [pc, #92]	@ (8000434 <main+0x2b4>)
 80003d6:	481e      	ldr	r0, [pc, #120]	@ (8000450 <main+0x2d0>)
 80003d8:	f008 f894 	bl	8008504 <USBD_HID_SendReport>
//	EnAPoten2 = 0;
//	EnBPoten2 = 0;
//	HAL_Delay(10);
//
//	//reset status button on poten
	keyboardhid.Keycode2 = keyboardhid.Keycode2 & 0x00;
 80003dc:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <main+0x2b4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	709a      	strb	r2, [r3, #2]
//
//
////	//control led follow PWM
    HAL_ADC_Start(&hadc1);
 80003e2:	481c      	ldr	r0, [pc, #112]	@ (8000454 <main+0x2d4>)
 80003e4:	f000 ff1a 	bl	800121c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80003e8:	2164      	movs	r1, #100	@ 0x64
 80003ea:	481a      	ldr	r0, [pc, #104]	@ (8000454 <main+0x2d4>)
 80003ec:	f000 fff0 	bl	80013d0 <HAL_ADC_PollForConversion>
    ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80003f0:	4818      	ldr	r0, [pc, #96]	@ (8000454 <main+0x2d4>)
 80003f2:	f001 f8f3 	bl	80015dc <HAL_ADC_GetValue>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <main+0x2d8>)
 80003fc:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 80003fe:	4815      	ldr	r0, [pc, #84]	@ (8000454 <main+0x2d4>)
 8000400:	f000 ffba 	bl	8001378 <HAL_ADC_Stop>
 8000404:	e02a      	b.n	800045c <main+0x2dc>
 8000406:	bf00      	nop
 8000408:	200001b4 	.word	0x200001b4
 800040c:	20000208 	.word	0x20000208
 8000410:	20000250 	.word	0x20000250
 8000414:	20000298 	.word	0x20000298
 8000418:	200002e0 	.word	0x200002e0
 800041c:	2000033a 	.word	0x2000033a
 8000420:	20000344 	.word	0x20000344
 8000424:	2000033e 	.word	0x2000033e
 8000428:	20000348 	.word	0x20000348
 800042c:	20000328 	.word	0x20000328
 8000430:	20000329 	.word	0x20000329
 8000434:	20000150 	.word	0x20000150
 8000438:	20000338 	.word	0x20000338
 800043c:	20000340 	.word	0x20000340
 8000440:	2000033c 	.word	0x2000033c
 8000444:	20000342 	.word	0x20000342
 8000448:	2000034a 	.word	0x2000034a
 800044c:	20000346 	.word	0x20000346
 8000450:	20000354 	.word	0x20000354
 8000454:	20000154 	.word	0x20000154
 8000458:	2000032c 	.word	0x2000032c
    value_ledPWM = (ADC_VAL * 255)/4095;
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <main+0x364>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4613      	mov	r3, r2
 8000462:	021b      	lsls	r3, r3, #8
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	4a20      	ldr	r2, [pc, #128]	@ (80004e8 <main+0x368>)
 8000468:	fb82 1203 	smull	r1, r2, r2, r3
 800046c:	441a      	add	r2, r3
 800046e:	12d2      	asrs	r2, r2, #11
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	4a1d      	ldr	r2, [pc, #116]	@ (80004ec <main+0x36c>)
 8000476:	6013      	str	r3, [r2, #0]
	for(uint8_t j = 0; j < 14; j++){
 8000478:	2300      	movs	r3, #0
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	e00a      	b.n	8000494 <main+0x314>
		TLC59116_Set_PWM(&hi2c2, j, value_ledPWM); // Tăng độ sáng OUT0
 800047e:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <main+0x36c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	b2da      	uxtb	r2, r3
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4619      	mov	r1, r3
 8000488:	4819      	ldr	r0, [pc, #100]	@ (80004f0 <main+0x370>)
 800048a:	f007 fed3 	bl	8008234 <TLC59116_Set_PWM>
	for(uint8_t j = 0; j < 14; j++){
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	3301      	adds	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b0d      	cmp	r3, #13
 8000498:	d9f1      	bls.n	800047e <main+0x2fe>
	}
//
////	//control lcd light
	HAL_ADC_Start(&hadc2);
 800049a:	4816      	ldr	r0, [pc, #88]	@ (80004f4 <main+0x374>)
 800049c:	f000 febe 	bl	800121c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80004a0:	2164      	movs	r1, #100	@ 0x64
 80004a2:	4814      	ldr	r0, [pc, #80]	@ (80004f4 <main+0x374>)
 80004a4:	f000 ff94 	bl	80013d0 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 80004a8:	4812      	ldr	r0, [pc, #72]	@ (80004f4 <main+0x374>)
 80004aa:	f001 f897 	bl	80015dc <HAL_ADC_GetValue>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <main+0x364>)
 80004b4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80004b6:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <main+0x374>)
 80004b8:	f000 ff5e 	bl	8001378 <HAL_ADC_Stop>
	value_lcdPWM = (ADC_VAL * 800)/4096;
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <main+0x364>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80004c4:	fb02 f303 	mul.w	r3, r2, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	da01      	bge.n	80004d0 <main+0x350>
 80004cc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004d0:	131b      	asrs	r3, r3, #12
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <main+0x378>)
 80004d6:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_lcdPWM);
 80004d8:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <main+0x378>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <main+0x37c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	639a      	str	r2, [r3, #56]	@ 0x38
	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim1);
 80004e2:	e682      	b.n	80001ea <main+0x6a>
 80004e4:	2000032c 	.word	0x2000032c
 80004e8:	80080081 	.word	0x80080081
 80004ec:	20000330 	.word	0x20000330
 80004f0:	200001b4 	.word	0x200001b4
 80004f4:	20000184 	.word	0x20000184
 80004f8:	20000334 	.word	0x20000334
 80004fc:	20000208 	.word	0x20000208

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	@ 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800050a:	2228      	movs	r2, #40	@ 0x28
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f009 fc9c 	bl	8009e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000530:	2301      	movs	r3, #1
 8000532:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000550:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fa50 	bl	80049fc <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000562:	f000 facb 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000576:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fcbc 	bl	8004f00 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058e:	f000 fab5 	bl	8000afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000592:	2312      	movs	r3, #18
 8000594:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800059a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fe3a 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ae:	f000 faa5 	bl	8000afc <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	@ 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005ce:	4a19      	ldr	r2, [pc, #100]	@ (8000634 <MX_ADC1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC1_Init+0x74>)
 80005fa:	f000 fd37 	bl	800106c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 fa7a 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000610:	2307      	movs	r3, #7
 8000612:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_ADC1_Init+0x74>)
 800061a:	f000 ffeb 	bl	80015f4 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000624:	f000 fa6a 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000154 	.word	0x20000154
 8000634:	40012400 	.word	0x40012400

08000638 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <MX_ADC2_Init+0x74>)
 800064a:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <MX_ADC2_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_ADC2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000662:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000666:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000668:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <MX_ADC2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000676:	f000 fcf9 	bl	800106c <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fa3c 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000684:	2301      	movs	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000688:	2301      	movs	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800068c:	2307      	movs	r3, #7
 800068e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_ADC2_Init+0x74>)
 8000696:	f000 ffad 	bl	80015f4 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80006a0:	f000 fa2c 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000184 	.word	0x20000184
 80006b0:	40012800 	.word	0x40012800

080006b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C2_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C2_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C2_Init+0x50>)
 80006f2:	f001 fbd5 	bl	8001ea0 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9fe 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200001b4 	.word	0x200001b4
 8000708:	40005800 	.word	0x40005800
 800070c:	000186a0 	.word	0x000186a0

08000710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2224      	movs	r2, #36	@ 0x24
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f009 fb94 	bl	8009e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 800072e:	4a23      	ldr	r2, [pc, #140]	@ (80007bc <MX_TIM1_Init+0xac>)
 8000730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 8000740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074c:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000758:	2303      	movs	r3, #3
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 8000784:	f004 feb6 	bl	80054f4 <HAL_TIM_Encoder_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800078e:	f000 f9b5 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_TIM1_Init+0xa8>)
 80007a0:	f005 f86a 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f9a7 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	@ 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000208 	.word	0x20000208
 80007bc:	40012c00 	.word	0x40012c00

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2224      	movs	r2, #36	@ 0x24
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f009 fb3c 	bl	8009e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007dc:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <MX_TIM2_Init+0xa4>)
 80007de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <MX_TIM2_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <MX_TIM2_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_TIM2_Init+0xa4>)
 80007f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_TIM2_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000804:	2303      	movs	r3, #3
 8000806:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800080c:	2301      	movs	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800081c:	2301      	movs	r3, #1
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <MX_TIM2_Init+0xa4>)
 8000830:	f004 fe60 	bl	80054f4 <HAL_TIM_Encoder_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800083a:	f000 f95f 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_TIM2_Init+0xa4>)
 800084c:	f005 f814 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000856:	f000 f951 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3730      	adds	r7, #48	@ 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000250 	.word	0x20000250

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2224      	movs	r2, #36	@ 0x24
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fae8 	bl	8009e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_TIM3_Init+0xa0>)
 8000886:	4a21      	ldr	r2, [pc, #132]	@ (800090c <MX_TIM3_Init+0xa4>)
 8000888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_TIM3_Init+0xa0>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_TIM3_Init+0xa0>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_TIM3_Init+0xa0>)
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_TIM3_Init+0xa0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_TIM3_Init+0xa0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008aa:	2303      	movs	r3, #3
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c2:	2301      	movs	r3, #1
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <MX_TIM3_Init+0xa0>)
 80008d6:	f004 fe0d 	bl	80054f4 <HAL_TIM_Encoder_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f90c 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_TIM3_Init+0xa0>)
 80008f2:	f004 ffc1 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008fc:	f000 f8fe 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	@ 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000298 	.word	0x20000298
 800090c:	40000400 	.word	0x40000400

08000910 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	@ 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	2224      	movs	r2, #36	@ 0x24
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f009 fa94 	bl	8009e4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800092c:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 800092e:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <MX_TIM4_Init+0xa4>)
 8000930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 8000940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000952:	2303      	movs	r3, #3
 8000954:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 800097e:	f004 fdb9 	bl	80054f4 <HAL_TIM_Encoder_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f8b8 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 800099a:	f004 ff6d 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009a4:	f000 f8aa 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	@ 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200002e0 	.word	0x200002e0
 80009b4:	40000800 	.word	0x40000800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a39      	ldr	r2, [pc, #228]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b37      	ldr	r3, [pc, #220]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b34      	ldr	r3, [pc, #208]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a33      	ldr	r2, [pc, #204]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <MX_GPIO_Init+0x130>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	482e      	ldr	r0, [pc, #184]	@ (8000aec <MX_GPIO_Init+0x134>)
 8000a32:	f001 fa05 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a36:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <MX_GPIO_Init+0x138>)
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	482a      	ldr	r0, [pc, #168]	@ (8000af4 <MX_GPIO_Init+0x13c>)
 8000a4c:	f001 f874 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a50:	2328      	movs	r3, #40	@ 0x28
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a54:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <MX_GPIO_Init+0x138>)
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4825      	ldr	r0, [pc, #148]	@ (8000af8 <MX_GPIO_Init+0x140>)
 8000a64:	f001 f868 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481b      	ldr	r0, [pc, #108]	@ (8000aec <MX_GPIO_Init+0x134>)
 8000a80:	f001 f85a 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4;
 8000a84:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_GPIO_Init+0x138>)
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	4814      	ldr	r0, [pc, #80]	@ (8000aec <MX_GPIO_Init+0x134>)
 8000a9a:	f001 f84d 	bl	8001b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2009      	movs	r0, #9
 8000aa4:	f001 f811 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aa8:	2009      	movs	r0, #9
 8000aaa:	f001 f82a 	bl	8001b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f001 f809 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f001 f822 	bl	8001b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	2017      	movs	r0, #23
 8000ac4:	f001 f801 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f001 f81a 	bl	8001b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f000 fff9 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad8:	2028      	movs	r0, #40	@ 0x28
 8000ada:	f001 f812 	bl	8001b02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	10110000 	.word	0x10110000
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40010800 	.word	0x40010800

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_MspInit+0x60>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_MspInit+0x60>)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a28      	ldr	r2, [pc, #160]	@ (8000c28 <HAL_ADC_MspInit+0xbc>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d122      	bne.n	8000bd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8c:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4819      	ldr	r0, [pc, #100]	@ (8000c30 <HAL_ADC_MspInit+0xc4>)
 8000bcc:	f000 ffb4 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bd0:	e026      	b.n	8000c20 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_ADC_MspInit+0xc8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d121      	bne.n	8000c20 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_ADC_MspInit+0xc0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <HAL_ADC_MspInit+0xc4>)
 8000c1c:	f000 ff8c 	bl	8001b38 <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40012400 	.word	0x40012400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40012800 	.word	0x40012800

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_I2C_MspInit+0x74>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d124      	bne.n	8000ca2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <HAL_I2C_MspInit+0x7c>)
 8000c86:	f000 ff57 	bl	8001b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_I2C_MspInit+0x78>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005800 	.word	0x40005800
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b090      	sub	sp, #64	@ 0x40
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8000e7c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d125      	bne.n	8000d24 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd8:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b66      	ldr	r3, [pc, #408]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b63      	ldr	r3, [pc, #396]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a62      	ldr	r2, [pc, #392]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b60      	ldr	r3, [pc, #384]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4859      	ldr	r0, [pc, #356]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d1e:	f000 ff0b 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d22:	e0a7      	b.n	8000e74 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d2c:	d14f      	bne.n	8000dce <HAL_TIM_Encoder_MspInit+0x116>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2e:	4b54      	ldr	r3, [pc, #336]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a53      	ldr	r2, [pc, #332]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b51      	ldr	r3, [pc, #324]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b4b      	ldr	r3, [pc, #300]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b48      	ldr	r3, [pc, #288]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a47      	ldr	r2, [pc, #284]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	483e      	ldr	r0, [pc, #248]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d8c:	f000 fed4 	bl	8001b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d90:	2308      	movs	r3, #8
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4839      	ldr	r0, [pc, #228]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000da4:	f000 fec8 	bl	8001b38 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc6:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dca:	6053      	str	r3, [r2, #4]
}
 8000dcc:	e052      	b.n	8000e74 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d124      	bne.n	8000e22 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd8:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4a28      	ldr	r2, [pc, #160]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	61d3      	str	r3, [r2, #28]
 8000de4:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481a      	ldr	r0, [pc, #104]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000e1c:	f000 fe8c 	bl	8001b38 <HAL_GPIO_Init>
}
 8000e20:	e028      	b.n	8000e74 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM4)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d123      	bne.n	8000e74 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	61d3      	str	r3, [r2, #28]
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5c:	23c0      	movs	r3, #192	@ 0xc0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000e70:	f000 fe62 	bl	8001b38 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3740      	adds	r7, #64	@ 0x40
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40012c00 	.word	0x40012c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40000800 	.word	0x40000800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8a4 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f000 ffbb 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f02:	2010      	movs	r0, #16
 8000f04:	f000 ffb4 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f12:	f002 f946 	bl	80031a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000818 	.word	0x20000818

08000f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f24:	2020      	movs	r0, #32
 8000f26:	f000 ffa3 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f32:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f36:	f000 ff9b 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f3e:	f000 ff97 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f42:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f46:	f000 ff93 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f5c:	f7ff fff7 	bl	8000f4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f62:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f64:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a09      	ldr	r2, [pc, #36]	@ (8000f9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f78:	4c09      	ldr	r4, [pc, #36]	@ (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 ff69 	bl	8009e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff f8f9 	bl	8000180 <main>
  bx lr
 8000f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000f98:	08009f4c 	.word	0x08009f4c
  ldr r2, =_sbss
 8000f9c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000fa0:	20000b04 	.word	0x20000b04

08000fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_2_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_Init+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_Init+0x28>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fd7b 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fda0 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fd93 	bl	8001b1e <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 fd5b 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_IncTick+0x1c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <HAL_IncTick+0x20>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000008 	.word	0x20000008
 8001054:	2000034c 	.word	0x2000034c

08001058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b02      	ldr	r3, [pc, #8]	@ (8001068 <HAL_GetTick+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	2000034c 	.word	0x2000034c

0800106c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0be      	b.n	800120c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001098:	2b00      	cmp	r3, #0
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd5e 	bl	8000b6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fbf1 	bl	8001898 <ADC_ConversionStop_Disable>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 8099 	bne.w	80011fa <HAL_ADC_Init+0x18e>
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 8095 	bne.w	80011fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010d8:	f023 0302 	bic.w	r3, r3, #2
 80010dc:	f043 0202 	orr.w	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b1b      	ldrb	r3, [r3, #12]
 80010f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001104:	d003      	beq.n	800110e <HAL_ADC_Init+0xa2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <HAL_ADC_Init+0xa8>
 800110e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001112:	e000      	b.n	8001116 <HAL_ADC_Init+0xaa>
 8001114:	2300      	movs	r3, #0
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7d1b      	ldrb	r3, [r3, #20]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d119      	bne.n	8001158 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	3b01      	subs	r3, #1
 8001132:	035a      	lsls	r2, r3, #13
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	e00b      	b.n	8001158 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001144:	f043 0220 	orr.w	r2, r3, #32
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <HAL_ADC_Init+0x1a8>)
 8001174:	4013      	ands	r3, r2
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	430b      	orrs	r3, r1
 800117e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001188:	d003      	beq.n	8001192 <HAL_ADC_Init+0x126>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d104      	bne.n	800119c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	3b01      	subs	r3, #1
 8001198:	051b      	lsls	r3, r3, #20
 800119a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_ADC_Init+0x1ac>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d10b      	bne.n	80011d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d6:	e018      	b.n	800120a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011dc:	f023 0312 	bic.w	r3, r3, #18
 80011e0:	f043 0210 	orr.w	r2, r3, #16
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f8:	e007      	b.n	800120a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	ffe1f7fd 	.word	0xffe1f7fd
 8001218:	ff1f0efe 	.word	0xff1f0efe

0800121c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Start+0x1a>
 8001232:	2302      	movs	r3, #2
 8001234:	e098      	b.n	8001368 <HAL_ADC_Start+0x14c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fad0 	bl	80017e4 <ADC_Enable>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8087 	bne.w	800135e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a41      	ldr	r2, [pc, #260]	@ (8001370 <HAL_ADC_Start+0x154>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d105      	bne.n	800127a <HAL_ADC_Start+0x5e>
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <HAL_ADC_Start+0x158>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d026      	beq.n	80012e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001298:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a4:	e01d      	b.n	80012e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <HAL_ADC_Start+0x158>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Start+0xaa>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001370 <HAL_ADC_Start+0x154>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10d      	bne.n	80012e2 <HAL_ADC_Start+0xc6>
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <HAL_ADC_Start+0x158>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f2:	f023 0206 	bic.w	r2, r3, #6
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012fa:	e002      	b.n	8001302 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f06f 0202 	mvn.w	r2, #2
 8001312:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800131e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001322:	d113      	bne.n	800134c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001328:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_ADC_Start+0x154>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d105      	bne.n	800133a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_ADC_Start+0x158>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	e00c      	b.n	8001366 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e003      	b.n	8001366 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40012800 	.word	0x40012800
 8001374:	40012400 	.word	0x40012400

08001378 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_Stop+0x1a>
 800138e:	2302      	movs	r3, #2
 8001390:	e01a      	b.n	80013c8 <HAL_ADC_Stop+0x50>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa7c 	bl	8001898 <ADC_ConversionStop_Disable>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013e6:	f7ff fe37 	bl	8001058 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fe:	f043 0220 	orr.w	r2, r3, #32
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0d3      	b.n	80015ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d131      	bne.n	8001484 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800142a:	2b00      	cmp	r3, #0
 800142c:	d12a      	bne.n	8001484 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800142e:	e021      	b.n	8001474 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001436:	d01d      	beq.n	8001474 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_ADC_PollForConversion+0x7e>
 800143e:	f7ff fe0b 	bl	8001058 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d212      	bcs.n	8001474 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10b      	bne.n	8001474 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0a2      	b.n	80015ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0d6      	beq.n	8001430 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001482:	e070      	b.n	8001566 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001484:	4b4f      	ldr	r3, [pc, #316]	@ (80015c4 <HAL_ADC_PollForConversion+0x1f4>)
 8001486:	681c      	ldr	r4, [r3, #0]
 8001488:	2002      	movs	r0, #2
 800148a:	f003 ff7d 	bl	8005388 <HAL_RCCEx_GetPeriphCLKFreq>
 800148e:	4603      	mov	r3, r0
 8001490:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	4b4b      	ldr	r3, [pc, #300]	@ (80015c8 <HAL_ADC_PollForConversion+0x1f8>)
 800149c:	400b      	ands	r3, r1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_ADC_PollForConversion+0x104>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68d9      	ldr	r1, [r3, #12]
 80014a8:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <HAL_ADC_PollForConversion+0x1fc>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_ADC_PollForConversion+0x104>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6919      	ldr	r1, [r3, #16]
 80014b6:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <HAL_ADC_PollForConversion+0x200>)
 80014b8:	400b      	ands	r3, r1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d108      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x100>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68d9      	ldr	r1, [r3, #12]
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_ADC_PollForConversion+0x204>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x100>
 80014cc:	2314      	movs	r3, #20
 80014ce:	e020      	b.n	8001512 <HAL_ADC_PollForConversion+0x142>
 80014d0:	2329      	movs	r3, #41	@ 0x29
 80014d2:	e01e      	b.n	8001512 <HAL_ADC_PollForConversion+0x142>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6919      	ldr	r1, [r3, #16]
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <HAL_ADC_PollForConversion+0x200>)
 80014dc:	400b      	ands	r3, r1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x120>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68d9      	ldr	r1, [r3, #12]
 80014e8:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <HAL_ADC_PollForConversion+0x204>)
 80014ea:	400b      	ands	r3, r1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00d      	beq.n	800150c <HAL_ADC_PollForConversion+0x13c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_ADC_PollForConversion+0x208>)
 80014f8:	400b      	ands	r3, r1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <HAL_ADC_PollForConversion+0x140>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_ADC_PollForConversion+0x208>)
 8001506:	400b      	ands	r3, r1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_ADC_PollForConversion+0x140>
 800150c:	2354      	movs	r3, #84	@ 0x54
 800150e:	e000      	b.n	8001512 <HAL_ADC_PollForConversion+0x142>
 8001510:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001518:	e021      	b.n	800155e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d01a      	beq.n	8001558 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_ADC_PollForConversion+0x168>
 8001528:	f7ff fd96 	bl	8001058 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d20f      	bcs.n	8001558 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d90b      	bls.n	8001558 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	f043 0204 	orr.w	r2, r3, #4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e030      	b.n	80015ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	429a      	cmp	r2, r3
 8001564:	d8d9      	bhi.n	800151a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f06f 0212 	mvn.w	r2, #18
 800156e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001574:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001586:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800158a:	d115      	bne.n	80015b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001590:	2b00      	cmp	r3, #0
 8001592:	d111      	bne.n	80015b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000
 80015c8:	24924924 	.word	0x24924924
 80015cc:	00924924 	.word	0x00924924
 80015d0:	12492492 	.word	0x12492492
 80015d4:	00492492 	.word	0x00492492
 80015d8:	00249249 	.word	0x00249249

080015dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x20>
 8001610:	2302      	movs	r3, #2
 8001612:	e0dc      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1da>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d81c      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b05      	subs	r3, #5
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34
 800165c:	e03c      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d81c      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b23      	subs	r3, #35	@ 0x23
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	4019      	ands	r1, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	@ 0x23
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30
 800169e:	e01b      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b41      	subs	r3, #65	@ 0x41
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	@ 0x41
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d91c      	bls.n	800171a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3b1e      	subs	r3, #30
 80016f2:	2207      	movs	r2, #7
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6898      	ldr	r0, [r3, #8]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	3b1e      	subs	r3, #30
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	e019      	b.n	800174e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	2207      	movs	r2, #7
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6898      	ldr	r0, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b10      	cmp	r3, #16
 8001754:	d003      	beq.n	800175e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d132      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d125      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d126      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001784:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b10      	cmp	r3, #16
 800178c:	d11a      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	0c9a      	lsrs	r2, r3, #18
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a4:	e002      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f9      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x1b2>
 80017b2:	e007      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	40012400 	.word	0x40012400
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d040      	beq.n	8001884 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <ADC_Enable+0xac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1f      	ldr	r2, [pc, #124]	@ (8001894 <ADC_Enable+0xb0>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001820:	e002      	b.n	8001828 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182e:	f7ff fc13 	bl	8001058 <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001834:	e01f      	b.n	8001876 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001836:	f7ff fc0f 	bl	8001058 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d918      	bls.n	8001876 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d011      	beq.n	8001876 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e007      	b.n	8001886 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d1d8      	bne.n	8001836 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83

08001898 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d12e      	bne.n	8001910 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018c2:	f7ff fbc9 	bl	8001058 <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	e01b      	b.n	8001902 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ca:	f7ff fbc5 	bl	8001058 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d914      	bls.n	8001902 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10d      	bne.n	8001902 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d0dc      	beq.n	80018ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4906      	ldr	r1, [pc, #24]	@ (80019b4 <__NVIC_EnableIRQ+0x34>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff90 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff2d 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff42 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff90 	bl	8001a0c <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5f 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff35 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b08b      	sub	sp, #44	@ 0x2c
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e169      	b.n	8001e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8158 	bne.w	8001e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a9a      	ldr	r2, [pc, #616]	@ (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d05e      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b74:	4a98      	ldr	r2, [pc, #608]	@ (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d875      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a98      	ldr	r2, [pc, #608]	@ (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d058      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b80:	4a96      	ldr	r2, [pc, #600]	@ (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d86f      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b86:	4a96      	ldr	r2, [pc, #600]	@ (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d052      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b8c:	4a94      	ldr	r2, [pc, #592]	@ (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d869      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b92:	4a94      	ldr	r2, [pc, #592]	@ (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04c      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b98:	4a92      	ldr	r2, [pc, #584]	@ (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d863      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a92      	ldr	r2, [pc, #584]	@ (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d046      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a90      	ldr	r2, [pc, #576]	@ (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d85d      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d82a      	bhi.n	8001c04 <HAL_GPIO_Init+0xcc>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d859      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <HAL_GPIO_Init+0x80>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c0d 	.word	0x08001c0d
 8001bc0:	08001c1f 	.word	0x08001c1f
 8001bc4:	08001c61 	.word	0x08001c61
 8001bc8:	08001c67 	.word	0x08001c67
 8001bcc:	08001c67 	.word	0x08001c67
 8001bd0:	08001c67 	.word	0x08001c67
 8001bd4:	08001c67 	.word	0x08001c67
 8001bd8:	08001c67 	.word	0x08001c67
 8001bdc:	08001c67 	.word	0x08001c67
 8001be0:	08001c67 	.word	0x08001c67
 8001be4:	08001c67 	.word	0x08001c67
 8001be8:	08001c67 	.word	0x08001c67
 8001bec:	08001c67 	.word	0x08001c67
 8001bf0:	08001c67 	.word	0x08001c67
 8001bf4:	08001c67 	.word	0x08001c67
 8001bf8:	08001c67 	.word	0x08001c67
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	4a79      	ldr	r2, [pc, #484]	@ (8001dec <HAL_GPIO_Init+0x2b4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0a:	e02c      	b.n	8001c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e029      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e024      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	3308      	adds	r3, #8
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e01f      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e01a      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e013      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	611a      	str	r2, [r3, #16]
          break;
 8001c52:	e009      	b.n	8001c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	615a      	str	r2, [r3, #20]
          break;
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          break;
 8001c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2bff      	cmp	r3, #255	@ 0xff
 8001c6c:	d801      	bhi.n	8001c72 <HAL_GPIO_Init+0x13a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_Init+0x13e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2bff      	cmp	r3, #255	@ 0xff
 8001c7c:	d802      	bhi.n	8001c84 <HAL_GPIO_Init+0x14c>
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x152>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	3b08      	subs	r3, #8
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	210f      	movs	r1, #15
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80b1 	beq.w	8001e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd0:	4a48      	ldr	r2, [pc, #288]	@ (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a40      	ldr	r2, [pc, #256]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_GPIO_Init+0x1ec>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001dfc <HAL_GPIO_Init+0x2c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1e8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	@ (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1e0>
 8001d14:	2303      	movs	r3, #3
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d24:	2300      	movs	r3, #0
 8001d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d36:	492f      	ldr	r1, [pc, #188]	@ (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	492c      	ldr	r1, [pc, #176]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4928      	ldr	r1, [pc, #160]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4922      	ldr	r1, [pc, #136]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	491e      	ldr	r1, [pc, #120]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4918      	ldr	r1, [pc, #96]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4914      	ldr	r1, [pc, #80]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d021      	beq.n	8001e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	490e      	ldr	r1, [pc, #56]	@ (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x2e2>
 8001dd6:	bf00      	nop
 8001dd8:	10320000 	.word	0x10320000
 8001ddc:	10310000 	.word	0x10310000
 8001de0:	10220000 	.word	0x10220000
 8001de4:	10210000 	.word	0x10210000
 8001de8:	10120000 	.word	0x10120000
 8001dec:	10110000 	.word	0x10110000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40011400 	.word	0x40011400
 8001e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4909      	ldr	r1, [pc, #36]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f47f ae8e 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	372c      	adds	r7, #44	@ 0x2c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f95c 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e12b      	b.n	800210a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe feb6 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f04:	f003 f944 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a81      	ldr	r2, [pc, #516]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d807      	bhi.n	8001f24 <HAL_I2C_Init+0x84>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a80      	ldr	r2, [pc, #512]	@ (8002118 <HAL_I2C_Init+0x278>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e006      	b.n	8001f32 <HAL_I2C_Init+0x92>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a7d      	ldr	r2, [pc, #500]	@ (800211c <HAL_I2C_Init+0x27c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0e7      	b.n	800210a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a78      	ldr	r2, [pc, #480]	@ (8002120 <HAL_I2C_Init+0x280>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d802      	bhi.n	8001f74 <HAL_I2C_Init+0xd4>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	e009      	b.n	8001f88 <HAL_I2C_Init+0xe8>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	4a69      	ldr	r2, [pc, #420]	@ (8002124 <HAL_I2C_Init+0x284>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	3301      	adds	r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	495c      	ldr	r1, [pc, #368]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d819      	bhi.n	8001fdc <HAL_I2C_Init+0x13c>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e59      	subs	r1, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_I2C_Init+0x138>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e59      	subs	r1, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd6:	e051      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e04f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d111      	bne.n	8002008 <HAL_I2C_Init+0x168>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e012      	b.n	800202e <HAL_I2C_Init+0x18e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	0099      	lsls	r1, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Init+0x196>
 8002032:	2301      	movs	r3, #1
 8002034:	e022      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10e      	bne.n	800205c <HAL_I2C_Init+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e58      	subs	r0, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800205a:	e00f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6911      	ldr	r1, [r2, #16]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	000186a0 	.word	0x000186a0
 8002118:	001e847f 	.word	0x001e847f
 800211c:	003d08ff 	.word	0x003d08ff
 8002120:	431bde83 	.word	0x431bde83
 8002124:	10624dd3 	.word	0x10624dd3

08002128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	460b      	mov	r3, r1
 800213c:	813b      	strh	r3, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002142:	f7fe ff89 	bl	8001058 <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	f040 80d9 	bne.w	8002308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2319      	movs	r3, #25
 800215c:	2201      	movs	r2, #1
 800215e:	496d      	ldr	r1, [pc, #436]	@ (8002314 <HAL_I2C_Mem_Write+0x1ec>)
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fccd 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	e0cc      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_I2C_Mem_Write+0x56>
 800217a:	2302      	movs	r3, #2
 800217c:	e0c5      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d007      	beq.n	80021a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2221      	movs	r2, #33	@ 0x21
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002318 <HAL_I2C_Mem_Write+0x1f0>)
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e6:	88f8      	ldrh	r0, [r7, #6]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb04 	bl	8002804 <I2C_RequestMemoryWrite>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d052      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e081      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fd92 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b04      	cmp	r3, #4
 800221c:	d107      	bne.n	800222e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06b      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_I2C_Mem_Write+0x180>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d017      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1aa      	bne.n	8002206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fd85 	bl	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d107      	bne.n	80022d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e016      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	00100002 	.word	0x00100002
 8002318:	ffff0000 	.word	0xffff0000

0800231c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	@ 0x30
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4603      	mov	r3, r0
 800232c:	817b      	strh	r3, [r7, #10]
 800232e:	460b      	mov	r3, r1
 8002330:	813b      	strh	r3, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800233a:	f7fe fe8d 	bl	8001058 <HAL_GetTick>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	f040 8250 	bne.w	80027ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2319      	movs	r3, #25
 8002354:	2201      	movs	r2, #1
 8002356:	4982      	ldr	r1, [pc, #520]	@ (8002560 <HAL_I2C_Mem_Read+0x244>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fbd1 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
 8002366:	e243      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Mem_Read+0x5a>
 8002372:	2302      	movs	r3, #2
 8002374:	e23c      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d007      	beq.n	800239c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2222      	movs	r2, #34	@ 0x22
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	@ 0x40
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a62      	ldr	r2, [pc, #392]	@ (8002564 <HAL_I2C_Mem_Read+0x248>)
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023de:	88f8      	ldrh	r0, [r7, #6]
 80023e0:	893a      	ldrh	r2, [r7, #8]
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4603      	mov	r3, r0
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa9e 	bl	8002930 <I2C_RequestMemoryRead>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1f8      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d113      	bne.n	800242e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e1cc      	b.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	2b01      	cmp	r3, #1
 8002434:	d11e      	bne.n	8002474 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002446:	b672      	cpsid	i
}
 8002448:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800246e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002470:	b662      	cpsie	i
}
 8002472:	e035      	b.n	80024e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11e      	bne.n	80024ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800248a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024b6:	b662      	cpsie	i
}
 80024b8:	e012      	b.n	80024e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80024e0:	e172      	b.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	f200 811f 	bhi.w	800272a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d123      	bne.n	800253c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fcab 	bl	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e173      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800253a:	e145      	b.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b02      	cmp	r3, #2
 8002542:	d152      	bne.n	80025ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254a:	2200      	movs	r2, #0
 800254c:	4906      	ldr	r1, [pc, #24]	@ (8002568 <HAL_I2C_Mem_Read+0x24c>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fad6 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e148      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
 800255e:	bf00      	nop
 8002560:	00100002 	.word	0x00100002
 8002564:	ffff0000 	.word	0xffff0000
 8002568:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025b2:	b662      	cpsie	i
}
 80025b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e8:	e0ee      	b.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	2200      	movs	r2, #0
 80025f2:	4981      	ldr	r1, [pc, #516]	@ (80027f8 <HAL_I2C_Mem_Read+0x4dc>)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fa83 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0f5      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800264a:	4b6c      	ldr	r3, [pc, #432]	@ (80027fc <HAL_I2C_Mem_Read+0x4e0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	4a6b      	ldr	r2, [pc, #428]	@ (8002800 <HAL_I2C_Mem_Read+0x4e4>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a1a      	lsrs	r2, r3, #8
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00da      	lsls	r2, r3, #3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	3b01      	subs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d118      	bne.n	80026a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002692:	b662      	cpsie	i
}
 8002694:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0a6      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d1d9      	bne.n	8002664 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
}
 80026f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002728:	e04e      	b.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fb90 	bl	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e058      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d124      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002794:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f ae88 	bne.w	80024e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3728      	adds	r7, #40	@ 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	00010004 	.word	0x00010004
 80027fc:	20000000 	.word	0x20000000
 8002800:	14f8b589 	.word	0x14f8b589

08002804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2200      	movs	r2, #0
 8002836:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f960 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002854:	d103      	bne.n	800285e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e05f      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	492d      	ldr	r1, [pc, #180]	@ (800292c <I2C_RequestMemoryWrite+0x128>)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f9bb 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04c      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa46 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d107      	bne.n	80028c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e02b      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	e021      	b.n	8002920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa20 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e005      	b.n	8002922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002916:	893b      	ldrh	r3, [r7, #8]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00010002 	.word	0x00010002

08002930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2200      	movs	r2, #0
 8002972:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8c2 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002990:	d103      	bne.n	800299a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0aa      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	4952      	ldr	r1, [pc, #328]	@ (8002afc <I2C_RequestMemoryRead+0x1cc>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f91d 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e097      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f9a8 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d107      	bne.n	8002a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e076      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]
 8002a16:	e021      	b.n	8002a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f982 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d107      	bne.n	8002a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e050      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a52:	893b      	ldrh	r3, [r7, #8]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5e:	6a39      	ldr	r1, [r7, #32]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f967 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e035      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f82b 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002abe:	d103      	bne.n	8002ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e013      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	4906      	ldr	r1, [pc, #24]	@ (8002afc <I2C_RequestMemoryRead+0x1cc>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f886 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e048      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d044      	beq.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fa9d 	bl	8001058 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d139      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	e00c      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d116      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e023      	b.n	8002bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	e00c      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d093      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	e071      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	d123      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e067      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d041      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fe f9f8 	bl	8001058 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d136      	bne.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e00b      	b.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e021      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10c      	bne.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e00b      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f af6d 	bne.w	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8e3 	bl	8002f0e <I2C_IsAcknowledgeFailed>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe f97d 	bl	8001058 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	2b80      	cmp	r3, #128	@ 0x80
 8002d7c:	d016      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db6:	2b80      	cmp	r3, #128	@ 0x80
 8002db8:	d1c3      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f89b 	bl	8002f0e <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e034      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d028      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe f935 	bl	8001058 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11d      	bne.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d016      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1c3      	bne.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e60:	e049      	b.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d119      	bne.n	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0210 	mvn.w	r2, #16
 8002e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e030      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe f8d8 	bl	8001058 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11d      	bne.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d016      	beq.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e007      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d1ae      	bne.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f24:	d11b      	bne.n	8002f5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0e8      	b.n	800314e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f006 fcd7 	bl	8009944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fce6 	bl	800597a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb8:	f002 fcbc 	bl	8005934 <USB_CoreInit>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0bf      	b.n	800314e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 fcea 	bl	80059ae <USB_SetCurrentMode>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b0      	b.n	800314e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e03e      	b.n	8003070 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3311      	adds	r3, #17
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	3310      	adds	r3, #16
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	3313      	adds	r3, #19
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	3320      	adds	r3, #32
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3324      	adds	r3, #36	@ 0x24
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	791b      	ldrb	r3, [r3, #4]
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3bb      	bcc.n	8002ff2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e044      	b.n	800310a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	3301      	adds	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3b5      	bcc.n	8003080 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311e:	f002 fc52 	bl	80059c6 <USB_DevInit>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e00c      	b.n	800314e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fed1 	bl	8007eee <USB_DevDisconnect>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_PCD_Start+0x16>
 8003168:	2302      	movs	r3, #2
 800316a:	e016      	b.n	800319a <HAL_PCD_Start+0x44>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fbe8 	bl	800594e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800317e:	2101      	movs	r1, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f006 fe2c 	bl	8009dde <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fea5 	bl	8007eda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fea7 	bl	8007f02 <USB_ReadInterrupts>
 80031b4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fb03 	bl	80037cc <PCD_EP_ISR_Handler>

    return;
 80031c6:	e119      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e4:	b292      	uxth	r2, r2
 80031e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f006 fc25 	bl	8009a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f905 	bl	8003402 <HAL_PCD_SetAddress>

    return;
 80031f8:	e100      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003216:	b292      	uxth	r2, r2
 8003218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800321c:	e0ee      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800323a:	b292      	uxth	r2, r2
 800323c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003240:	e0dc      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d027      	beq.n	800329c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	b292      	uxth	r2, r2
 8003260:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0208 	bic.w	r2, r2, #8
 8003276:	b292      	uxth	r2, r2
 8003278:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f006 fc15 	bl	8009aac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003294:	b292      	uxth	r2, r2
 8003296:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800329a:	e0af      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8083 	beq.w	80033ae <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e010      	b.n	80032d0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	8812      	ldrh	r2, [r2, #0]
 80032be:	b292      	uxth	r2, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	3320      	adds	r3, #32
 80032c4:	443b      	add	r3, r7
 80032c6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	3301      	adds	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d9eb      	bls.n	80032ae <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	b292      	uxth	r2, r2
 80032ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	b292      	uxth	r2, r2
 8003302:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003306:	bf00      	nop
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003310:	b29b      	uxth	r3, r3
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f6      	beq.n	8003308 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800332c:	b292      	uxth	r2, r2
 800332e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e00f      	b.n	8003358 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003338:	7ffb      	ldrb	r3, [r7, #31]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4611      	mov	r1, r2
 8003340:	7ffa      	ldrb	r2, [r7, #31]
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	440a      	add	r2, r1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	3320      	adds	r3, #32
 800334a:	443b      	add	r3, r7
 800334c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003350:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	3301      	adds	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	2b07      	cmp	r3, #7
 800335c:	d9ec      	bls.n	8003338 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0208 	orr.w	r2, r2, #8
 8003370:	b292      	uxth	r2, r2
 8003372:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003388:	b292      	uxth	r2, r2
 800338a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0204 	orr.w	r2, r2, #4
 80033a0:	b292      	uxth	r2, r2
 80033a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f006 fb66 	bl	8009a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033ac:	e026      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00f      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033ca:	b292      	uxth	r2, r2
 80033cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 fb24 	bl	8009a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033d6:	e011      	b.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f4:	b292      	uxth	r2, r2
 80033f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033fa:	bf00      	nop
  }
}
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_PCD_SetAddress+0x1a>
 8003418:	2302      	movs	r3, #2
 800341a:	e012      	b.n	8003442 <HAL_PCD_SetAddress+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fd3e 	bl	8007eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	4608      	mov	r0, r1
 8003454:	4611      	mov	r1, r2
 8003456:	461a      	mov	r2, r3
 8003458:	4603      	mov	r3, r0
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	460b      	mov	r3, r1
 800345e:	803b      	strh	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da0e      	bge.n	800348e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 0207 	and.w	r2, r3, #7
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	3310      	adds	r3, #16
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	705a      	strb	r2, [r3, #1]
 800348c:	e00e      	b.n	80034ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 0207 	and.w	r2, r3, #7
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034b8:	883a      	ldrh	r2, [r7, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	78ba      	ldrb	r2, [r7, #2]
 80034c2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034c4:	78bb      	ldrb	r3, [r7, #2]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d102      	bne.n	80034d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_PCD_EP_Open+0x94>
 80034da:	2302      	movs	r3, #2
 80034dc:	e00e      	b.n	80034fc <HAL_PCD_EP_Open+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 fa87 	bl	8005a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80034fa:	7afb      	ldrb	r3, [r7, #11]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da0e      	bge.n	8003536 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 0207 	and.w	r2, r3, #7
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	3310      	adds	r3, #16
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	705a      	strb	r2, [r3, #1]
 8003534:	e00e      	b.n	8003554 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 0207 	and.w	r2, r3, #7
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_PCD_EP_Close+0x6a>
 800356a:	2302      	movs	r3, #2
 800356c:	e00e      	b.n	800358c <HAL_PCD_EP_Close+0x88>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f002 fdff 	bl	8006180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	460b      	mov	r3, r1
 80035a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	f003 0207 	and.w	r2, r3, #7
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 ffb6 	bl	8006558 <USB_EPStartXfer>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	460b      	mov	r3, r1
 8003604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f003 0207 	and.w	r2, r3, #7
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3310      	adds	r3, #16
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2201      	movs	r2, #1
 8003640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	7afb      	ldrb	r3, [r7, #11]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f002 ff7f 	bl	8006558 <USB_EPStartXfer>

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	7912      	ldrb	r2, [r2, #4]
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e04c      	b.n	800371c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	da0e      	bge.n	80036a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 0207 	and.w	r2, r3, #7
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3310      	adds	r3, #16
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	705a      	strb	r2, [r3, #1]
 80036a6:	e00c      	b.n	80036c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_PCD_EP_SetStall+0x7e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e01c      	b.n	800371c <HAL_PCD_EP_SetStall+0xb8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 fae2 	bl	8007cba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f004 fc07 	bl	8007f20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	7912      	ldrb	r2, [r2, #4]
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e040      	b.n	80037c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003746:	2b00      	cmp	r3, #0
 8003748:	da0e      	bge.n	8003768 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 0207 	and.w	r2, r3, #7
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3310      	adds	r3, #16
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	705a      	strb	r2, [r3, #1]
 8003766:	e00e      	b.n	8003786 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 0207 	and.w	r2, r3, #7
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_PCD_EP_ClrStall+0x82>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e00e      	b.n	80037c4 <HAL_PCD_EP_ClrStall+0xa0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 fad0 	bl	8007d5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b096      	sub	sp, #88	@ 0x58
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037d4:	e3bb      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80037f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 8175 	bne.w	8003ae4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d14e      	bne.n	80038a4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	81fb      	strh	r3, [r7, #14]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	89fb      	ldrh	r3, [r7, #14]
 800381e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003826:	b29b      	uxth	r3, r3
 8003828:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3310      	adds	r3, #16
 800382e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	3302      	adds	r3, #2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	441a      	add	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800386a:	2100      	movs	r1, #0
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f006 f8bc 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7b5b      	ldrb	r3, [r3, #13]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8368 	beq.w	8003f4e <PCD_EP_ISR_Handler+0x782>
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8363 	bne.w	8003f4e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7b5b      	ldrb	r3, [r3, #13]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003892:	b2da      	uxtb	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	735a      	strb	r2, [r3, #13]
 80038a2:	e354      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038aa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d034      	beq.n	800392c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	3306      	adds	r3, #6
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80038f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003900:	b29b      	uxth	r3, r3
 8003902:	f004 fb5d 	bl	8007fc0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003912:	4013      	ands	r3, r2
 8003914:	823b      	strh	r3, [r7, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	8a3a      	ldrh	r2, [r7, #16]
 800391c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003920:	b292      	uxth	r2, r2
 8003922:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f006 f833 	bl	8009990 <HAL_PCD_SetupStageCallback>
 800392a:	e310      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800392c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003930:	2b00      	cmp	r3, #0
 8003932:	f280 830c 	bge.w	8003f4e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29a      	uxth	r2, r3
 800393e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003942:	4013      	ands	r3, r2
 8003944:	83fb      	strh	r3, [r7, #30]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	8bfa      	ldrh	r2, [r7, #30]
 800394c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003950:	b292      	uxth	r2, r2
 8003952:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800395c:	b29b      	uxth	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	3306      	adds	r3, #6
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800397c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d019      	beq.n	80039bc <PCD_EP_ISR_Handler+0x1f0>
 8003988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	6959      	ldr	r1, [r3, #20]
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f004 fb0d 	bl	8007fc0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	441a      	add	r2, r3
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039b4:	2100      	movs	r1, #0
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f005 fffc 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 82bd 	bne.w	8003f4e <PCD_EP_ISR_Handler+0x782>
 80039d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039d8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039e0:	f000 82b5 	beq.w	8003f4e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a1a:	d91d      	bls.n	8003a58 <PCD_EP_ISR_Handler+0x28c>
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <PCD_EP_ISR_Handler+0x26a>
 8003a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a32:	3b01      	subs	r3, #1
 8003a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	029b      	lsls	r3, r3, #10
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	e026      	b.n	8003aa6 <PCD_EP_ISR_Handler+0x2da>
 8003a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <PCD_EP_ISR_Handler+0x2aa>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e017      	b.n	8003aa6 <PCD_EP_ISR_Handler+0x2da>
 8003a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <PCD_EP_ISR_Handler+0x2c4>
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	827b      	strh	r3, [r7, #18]
 8003ab8:	8a7b      	ldrh	r3, [r7, #18]
 8003aba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003abe:	827b      	strh	r3, [r7, #18]
 8003ac0:	8a7b      	ldrh	r3, [r7, #18]
 8003ac2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ac6:	827b      	strh	r3, [r7, #18]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	8a7b      	ldrh	r3, [r7, #18]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
 8003ae2:	e234      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003af8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f280 80fc 	bge.w	8003cfa <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b18:	4013      	ands	r3, r2
 8003b1a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003b30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b34:	b292      	uxth	r2, r2
 8003b36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b38:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b50:	7b1b      	ldrb	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d125      	bne.n	8003ba2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003b82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8092 	beq.w	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	6959      	ldr	r1, [r3, #20]
 8003b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b96:	88da      	ldrh	r2, [r3, #6]
 8003b98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b9c:	f004 fa10 	bl	8007fc0 <USB_ReadPMA>
 8003ba0:	e086      	b.n	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	78db      	ldrb	r3, [r3, #3]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d10a      	bne.n	8003bc0 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003baa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9d9 	bl	8003f6a <HAL_PCD_EP_DB_Receive>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003bbe:	e077      	b.n	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d024      	beq.n	8003c68 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	3302      	adds	r3, #2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02e      	beq.n	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c58:	6959      	ldr	r1, [r3, #20]
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	891a      	ldrh	r2, [r3, #8]
 8003c5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c62:	f004 f9ad 	bl	8007fc0 <USB_ReadPMA>
 8003c66:	e023      	b.n	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3306      	adds	r3, #6
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c90:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca2:	6959      	ldr	r1, [r3, #20]
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca6:	895a      	ldrh	r2, [r3, #10]
 8003ca8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cac:	f004 f988 	bl	8007fc0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cb8:	441a      	add	r2, r3
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cc6:	441a      	add	r2, r3
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <PCD_EP_ISR_Handler+0x514>
 8003cd4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d206      	bcs.n	8003cee <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f005 fe64 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
 8003cec:	e005      	b.n	8003cfa <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f002 fc2f 	bl	8006558 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003cfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8123 	beq.w	8003f4e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d08:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3310      	adds	r3, #16
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	441a      	add	r2, r3
 8003d48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	f040 80a2 	bne.w	8003ea6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6a:	7b1b      	ldrb	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8093 	beq.w	8003e98 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d046      	beq.n	8003e0c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d126      	bne.n	8003dd4 <PCD_EP_ISR_Handler+0x608>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	4413      	add	r3, r2
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	011a      	lsls	r2, r3, #4
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	4413      	add	r3, r2
 8003da8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e061      	b.n	8003e98 <PCD_EP_ISR_Handler+0x6cc>
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d15d      	bne.n	8003e98 <PCD_EP_ISR_Handler+0x6cc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	4413      	add	r3, r2
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	011a      	lsls	r2, r3, #4
 8003dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	2200      	movs	r2, #0
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e045      	b.n	8003e98 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d126      	bne.n	8003e68 <PCD_EP_ISR_Handler+0x69c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	4413      	add	r3, r2
 8003e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e017      	b.n	8003e98 <PCD_EP_ISR_Handler+0x6cc>
 8003e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d113      	bne.n	8003e98 <PCD_EP_ISR_Handler+0x6cc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7e:	4413      	add	r3, r2
 8003e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	011a      	lsls	r2, r3, #4
 8003e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f005 fda3 	bl	80099ea <HAL_PCD_DataInStageCallback>
 8003ea4:	e053      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ea6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d146      	bne.n	8003f40 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d907      	bls.n	8003efa <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	e002      	b.n	8003f00 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f005 fd6b 	bl	80099ea <HAL_PCD_DataInStageCallback>
 8003f14:	e01b      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f1e:	441a      	add	r2, r3
 8003f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f22:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f2c:	441a      	add	r2, r3
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 fb0d 	bl	8006558 <USB_EPStartXfer>
 8003f3e:	e006      	b.n	8003f4e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f44:	461a      	mov	r2, r3
 8003f46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f91b 	bl	8004184 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f6ff ac3b 	blt.w	80037d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3758      	adds	r7, #88	@ 0x58
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d07e      	beq.n	8004080 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	3302      	adds	r3, #2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003faa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	8b7b      	ldrh	r3, [r7, #26]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d306      	bcc.n	8003fc4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	8b7b      	ldrh	r3, [r7, #26]
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	619a      	str	r2, [r3, #24]
 8003fc2:	e002      	b.n	8003fca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d123      	bne.n	800401a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fec:	833b      	strh	r3, [r7, #24]
 8003fee:	8b3b      	ldrh	r3, [r7, #24]
 8003ff0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ff4:	833b      	strh	r3, [r7, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	8b3b      	ldrh	r3, [r7, #24]
 8004006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800400a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800400e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01f      	beq.n	8004064 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	82fb      	strh	r3, [r7, #22]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800405c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004060:	b29b      	uxth	r3, r3
 8004062:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004064:	8b7b      	ldrh	r3, [r7, #26]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8087 	beq.w	800417a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6959      	ldr	r1, [r3, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	891a      	ldrh	r2, [r3, #8]
 8004078:	8b7b      	ldrh	r3, [r7, #26]
 800407a:	f003 ffa1 	bl	8007fc0 <USB_ReadPMA>
 800407e:	e07c      	b.n	800417a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	3306      	adds	r3, #6
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d306      	bcc.n	80040c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	8b7b      	ldrh	r3, [r7, #26]
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	619a      	str	r2, [r3, #24]
 80040c0:	e002      	b.n	80040c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d123      	bne.n	8004118 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ea:	83fb      	strh	r3, [r7, #30]
 80040ec:	8bfb      	ldrh	r3, [r7, #30]
 80040ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040f2:	83fb      	strh	r3, [r7, #30]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	8bfb      	ldrh	r3, [r7, #30]
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800410c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11f      	bne.n	8004162 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413c:	83bb      	strh	r3, [r7, #28]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	8bbb      	ldrh	r3, [r7, #28]
 800414e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004162:	8b7b      	ldrh	r3, [r7, #26]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	895a      	ldrh	r2, [r3, #10]
 8004174:	8b7b      	ldrh	r3, [r7, #26]
 8004176:	f003 ff23 	bl	8007fc0 <USB_ReadPMA>
    }
  }

  return count;
 800417a:	8b7b      	ldrh	r3, [r7, #26]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0a4      	sub	sp, #144	@ 0x90
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 81dd 	beq.w	8004558 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	3302      	adds	r3, #2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d907      	bls.n	80041e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	619a      	str	r2, [r3, #24]
 80041e4:	e002      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 80b9 	bne.w	8004368 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d126      	bne.n	800424c <HAL_PCD_EP_DB_Transmit+0xc8>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420c:	b29b      	uxth	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	4413      	add	r3, r2
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	011a      	lsls	r2, r3, #4
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	4413      	add	r3, r2
 8004220:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004230:	b29a      	uxth	r2, r3
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004244:	b29a      	uxth	r2, r3
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e01a      	b.n	8004282 <HAL_PCD_EP_DB_Transmit+0xfe>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	785b      	ldrb	r3, [r3, #1]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d116      	bne.n	8004282 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	4413      	add	r3, r2
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	011a      	lsls	r2, r3, #4
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	4413      	add	r3, r2
 8004276:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800427a:	633b      	str	r3, [r7, #48]	@ 0x30
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d126      	bne.n	80042de <HAL_PCD_EP_DB_Transmit+0x15a>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e017      	b.n	800430e <HAL_PCD_EP_DB_Transmit+0x18a>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d113      	bne.n	800430e <HAL_PCD_EP_DB_Transmit+0x18a>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	4413      	add	r3, r2
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	011a      	lsls	r2, r3, #4
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	4413      	add	r3, r2
 8004302:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2200      	movs	r2, #0
 800430c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f005 fb68 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 82fc 	beq.w	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004340:	82fb      	strh	r3, [r7, #22]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	441a      	add	r2, r3
 8004350:	8afb      	ldrh	r3, [r7, #22]
 8004352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800435a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800435e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004362:	b29b      	uxth	r3, r3
 8004364:	8013      	strh	r3, [r2, #0]
 8004366:	e2da      	b.n	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	441a      	add	r2, r3
 800439e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80043a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 82ae 	bne.w	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043ca:	441a      	add	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043d8:	441a      	add	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d30b      	bcc.n	8004402 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043fa:	1ad2      	subs	r2, r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	621a      	str	r2, [r3, #32]
 8004400:	e017      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800440a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800440e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800441a:	e00a      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d165      	bne.n	8004506 <HAL_PCD_EP_DB_Transmit+0x382>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004448:	b29b      	uxth	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	4413      	add	r3, r2
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	011a      	lsls	r2, r3, #4
 8004458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445a:	4413      	add	r3, r2
 800445c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446c:	b29a      	uxth	r2, r3
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004476:	2b3e      	cmp	r3, #62	@ 0x3e
 8004478:	d91d      	bls.n	80044b6 <HAL_PCD_EP_DB_Transmit+0x332>
 800447a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <HAL_PCD_EP_DB_Transmit+0x310>
 800448e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004490:	3b01      	subs	r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29a      	uxth	r2, r3
 800449a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449c:	b29b      	uxth	r3, r3
 800449e:	029b      	lsls	r3, r3, #10
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	e044      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x350>
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e035      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_PCD_EP_DB_Transmit+0x36a>
 80044e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ea:	3301      	adds	r3, #1
 80044ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	801a      	strh	r2, [r3, #0]
 8004504:	e01c      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d118      	bne.n	8004540 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004522:	4413      	add	r3, r2
 8004524:	647b      	str	r3, [r7, #68]	@ 0x44
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	011a      	lsls	r2, r3, #4
 800452c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452e:	4413      	add	r3, r2
 8004530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004534:	643b      	str	r3, [r7, #64]	@ 0x40
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453a:	b29a      	uxth	r2, r3
 800453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6959      	ldr	r1, [r3, #20]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	891a      	ldrh	r2, [r3, #8]
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004550:	b29b      	uxth	r3, r3
 8004552:	f003 fcf0 	bl	8007f36 <USB_WritePMA>
 8004556:	e1e2      	b.n	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	3306      	adds	r3, #6
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004580:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800458c:	429a      	cmp	r2, r3
 800458e:	d307      	bcc.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004598:	1ad2      	subs	r2, r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	619a      	str	r2, [r3, #24]
 800459e:	e002      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 80c0 	bne.w	8004730 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d126      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x482>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045cc:	4413      	add	r3, r2
 80045ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d8:	4413      	add	r3, r2
 80045da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e01a      	b.n	800463c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d116      	bne.n	800463c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	667b      	str	r3, [r7, #100]	@ 0x64
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004622:	4413      	add	r3, r2
 8004624:	667b      	str	r3, [r7, #100]	@ 0x64
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	011a      	lsls	r2, r3, #4
 800462c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800462e:	4413      	add	r3, r2
 8004630:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004634:	663b      	str	r3, [r7, #96]	@ 0x60
 8004636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004638:	2200      	movs	r2, #0
 800463a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	677b      	str	r3, [r7, #116]	@ 0x74
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d12b      	bne.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465e:	4413      	add	r3, r2
 8004660:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	011a      	lsls	r2, r3, #4
 8004668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466a:	4413      	add	r3, r2
 800466c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004680:	b29a      	uxth	r2, r3
 8004682:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e017      	b.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d113      	bne.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b8:	4413      	add	r3, r2
 80046ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80046cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046ce:	2200      	movs	r2, #0
 80046d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f005 f986 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 811a 	bne.w	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004704:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e0f6      	b.n	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d121      	bne.n	800477e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004754:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004772:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 80ca 	bne.w	800491e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004792:	441a      	add	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047a0:	441a      	add	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d30b      	bcc.n	80047ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	621a      	str	r2, [r3, #32]
 80047c8:	e017      	b.n	80047fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80047d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047e2:	e00a      	b.n	80047fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d165      	bne.n	80048d4 <HAL_PCD_EP_DB_Transmit+0x750>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481c:	4413      	add	r3, r2
 800481e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004828:	4413      	add	r3, r2
 800482a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800482e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	b29a      	uxth	r2, r3
 800483c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004844:	2b3e      	cmp	r3, #62	@ 0x3e
 8004846:	d91d      	bls.n	8004884 <HAL_PCD_EP_DB_Transmit+0x700>
 8004848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004850:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <HAL_PCD_EP_DB_Transmit+0x6de>
 800485c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485e:	3b01      	subs	r3, #1
 8004860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004862:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487c:	b29a      	uxth	r2, r3
 800487e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e041      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x784>
 8004884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800488c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489a:	b29a      	uxth	r2, r3
 800489c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e032      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x784>
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_PCD_EP_DB_Transmit+0x738>
 80048b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b8:	3301      	adds	r3, #1
 80048ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e019      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x784>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d115      	bne.n	8004908 <HAL_PCD_EP_DB_Transmit+0x784>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ea:	4413      	add	r3, r2
 80048ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	011a      	lsls	r2, r3, #4
 80048f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f6:	4413      	add	r3, r2
 80048f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004902:	b29a      	uxth	r2, r3
 8004904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004906:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6959      	ldr	r1, [r3, #20]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	895a      	ldrh	r2, [r3, #10]
 8004914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004918:	b29b      	uxth	r3, r3
 800491a:	f003 fb0c 	bl	8007f36 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004938:	82bb      	strh	r3, [r7, #20]
 800493a:	8abb      	ldrh	r3, [r7, #20]
 800493c:	f083 0310 	eor.w	r3, r3, #16
 8004940:	82bb      	strh	r3, [r7, #20]
 8004942:	8abb      	ldrh	r3, [r7, #20]
 8004944:	f083 0320 	eor.w	r3, r3, #32
 8004948:	82bb      	strh	r3, [r7, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	8abb      	ldrh	r3, [r7, #20]
 800495a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3790      	adds	r7, #144	@ 0x90
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	4613      	mov	r3, r2
 8004988:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800498a:	897b      	ldrh	r3, [r7, #10]
 800498c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	3310      	adds	r3, #16
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e009      	b.n	80049c2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049ae:	897a      	ldrh	r2, [r7, #10]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049c2:	893b      	ldrh	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	80da      	strh	r2, [r3, #6]
 80049d6:	e00b      	b.n	80049f0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2201      	movs	r2, #1
 80049dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e272      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8087 	beq.w	8004b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a1c:	4b92      	ldr	r3, [pc, #584]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d00c      	beq.n	8004a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a28:	4b8f      	ldr	r3, [pc, #572]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d112      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
 8004a34:	4b8c      	ldr	r3, [pc, #560]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a42:	4b89      	ldr	r3, [pc, #548]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d06c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x12c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d168      	bne.n	8004b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e24c      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x76>
 8004a64:	4b80      	ldr	r3, [pc, #512]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a7f      	ldr	r2, [pc, #508]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e02e      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x98>
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7a      	ldr	r2, [pc, #488]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b78      	ldr	r3, [pc, #480]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a77      	ldr	r2, [pc, #476]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e01d      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xbc>
 8004a9e:	4b72      	ldr	r3, [pc, #456]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a71      	ldr	r2, [pc, #452]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6e      	ldr	r2, [pc, #440]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a6a      	ldr	r2, [pc, #424]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b68      	ldr	r3, [pc, #416]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a67      	ldr	r2, [pc, #412]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fc fabe 	bl	8001058 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fc faba 	bl	8001058 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e200      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe4>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fc faaa 	bl	8001058 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fc faa6 	bl	8001058 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1ec      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x10c>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d063      	beq.n	8004bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b36:	4b4c      	ldr	r3, [pc, #304]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b42:	4b49      	ldr	r3, [pc, #292]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x18c>
 8004b4e:	4b46      	ldr	r3, [pc, #280]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	4b43      	ldr	r3, [pc, #268]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCC_OscConfig+0x176>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e1c0      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b3d      	ldr	r3, [pc, #244]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4939      	ldr	r1, [pc, #228]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	e03a      	b.n	8004bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b90:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b96:	f7fc fa5f 	bl	8001058 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7fc fa5b 	bl	8001058 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1a1      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4927      	ldr	r1, [pc, #156]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd2:	4b26      	ldr	r3, [pc, #152]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fa3e 	bl	8001058 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be0:	f7fc fa3a 	bl	8001058 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e180      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03a      	beq.n	8004c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d019      	beq.n	8004c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c12:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <HAL_RCC_OscConfig+0x274>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fc fa1e 	bl	8001058 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fc fa1a 	bl	8001058 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e160      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f000 face 	bl	80051e0 <RCC_Delay>
 8004c44:	e01c      	b.n	8004c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c46:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <HAL_RCC_OscConfig+0x274>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4c:	f7fc fa04 	bl	8001058 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c52:	e00f      	b.n	8004c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fc fa00 	bl	8001058 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d908      	bls.n	8004c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e146      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	42420000 	.word	0x42420000
 8004c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	4b92      	ldr	r3, [pc, #584]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e9      	bne.n	8004c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80a6 	beq.w	8004dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	4a87      	ldr	r2, [pc, #540]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	61d3      	str	r3, [r2, #28]
 8004caa:	4b85      	ldr	r3, [pc, #532]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	4b82      	ldr	r3, [pc, #520]	@ (8004ec4 <HAL_RCC_OscConfig+0x4c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec4 <HAL_RCC_OscConfig+0x4c8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec4 <HAL_RCC_OscConfig+0x4c8>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fc f9c1 	bl	8001058 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fc f9bd 	bl	8001058 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b64      	cmp	r3, #100	@ 0x64
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e103      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	4b75      	ldr	r3, [pc, #468]	@ (8004ec4 <HAL_RCC_OscConfig+0x4c8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x312>
 8004d00:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6213      	str	r3, [r2, #32]
 8004d0c:	e02d      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x334>
 8004d16:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a69      	ldr	r2, [pc, #420]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	4b67      	ldr	r3, [pc, #412]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a66      	ldr	r2, [pc, #408]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6213      	str	r3, [r2, #32]
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x356>
 8004d38:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4a60      	ldr	r2, [pc, #384]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6213      	str	r3, [r2, #32]
 8004d44:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6213      	str	r3, [r2, #32]
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x36e>
 8004d52:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6213      	str	r3, [r2, #32]
 8004d5e:	4b58      	ldr	r3, [pc, #352]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4a57      	ldr	r2, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d72:	f7fc f971 	bl	8001058 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fc f96d 	bl	8001058 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0b1      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x37e>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fc f95b 	bl	8001058 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc f957 	bl	8001058 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e09b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b40      	ldr	r3, [pc, #256]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8087 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de4:	4b36      	ldr	r3, [pc, #216]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d061      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d146      	bne.n	8004e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b33      	ldr	r3, [pc, #204]	@ (8004ec8 <HAL_RCC_OscConfig+0x4cc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fc f92b 	bl	8001058 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fc f927 	bl	8001058 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e06d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2c:	d108      	bne.n	8004e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4921      	ldr	r1, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a19      	ldr	r1, [r3, #32]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	430b      	orrs	r3, r1
 8004e52:	491b      	ldr	r1, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x4cc>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fc f8fb 	bl	8001058 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fc f8f7 	bl	8001058 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x46a>
 8004e84:	e035      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <HAL_RCC_OscConfig+0x4cc>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc f8e4 	bl	8001058 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fc f8e0 	bl	8001058 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e026      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x498>
 8004eb2:	e01e      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e019      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_OscConfig+0x500>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000

08004f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0d0      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b6a      	ldr	r3, [pc, #424]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d910      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b67      	ldr	r3, [pc, #412]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 0207 	bic.w	r2, r3, #7
 8004f2a:	4965      	ldr	r1, [pc, #404]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0b8      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f5c:	4b59      	ldr	r3, [pc, #356]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a58      	ldr	r2, [pc, #352]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f74:	4b53      	ldr	r3, [pc, #332]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a52      	ldr	r2, [pc, #328]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b50      	ldr	r3, [pc, #320]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	494d      	ldr	r1, [pc, #308]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d040      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b41      	ldr	r3, [pc, #260]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e073      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3d      	ldr	r3, [pc, #244]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06b      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b39      	ldr	r3, [pc, #228]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4936      	ldr	r1, [pc, #216]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc f832 	bl	8001058 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc f82e 	bl	8001058 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e053      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2d      	ldr	r3, [pc, #180]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d210      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4922      	ldr	r1, [pc, #136]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e032      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4916      	ldr	r1, [pc, #88]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800507a:	4b12      	ldr	r3, [pc, #72]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	490e      	ldr	r1, [pc, #56]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508e:	f000 f821 	bl	80050d4 <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	490a      	ldr	r1, [pc, #40]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	4a09      	ldr	r2, [pc, #36]	@ (80050cc <HAL_RCC_ClockConfig+0x1cc>)
 80050a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_ClockConfig+0x1d0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb ff90 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40022000 	.word	0x40022000
 80050c4:	40021000 	.word	0x40021000
 80050c8:	08009f04 	.word	0x08009f04
 80050cc:	20000000 	.word	0x20000000
 80050d0:	20000004 	.word	0x20000004

080050d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x94>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x30>
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x36>
 8005102:	e027      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005104:	4b19      	ldr	r3, [pc, #100]	@ (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005106:	613b      	str	r3, [r7, #16]
      break;
 8005108:	e027      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	0c9b      	lsrs	r3, r3, #18
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005122:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x94>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	0c5b      	lsrs	r3, r3, #17
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	4a11      	ldr	r2, [pc, #68]	@ (8005174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a0d      	ldr	r2, [pc, #52]	@ (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005136:	fb03 f202 	mul.w	r2, r3, r2
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e004      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	613b      	str	r3, [r7, #16]
      break;
 8005152:	e002      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005154:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005156:	613b      	str	r3, [r7, #16]
      break;
 8005158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800515a:	693b      	ldr	r3, [r7, #16]
}
 800515c:	4618      	mov	r0, r3
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	007a1200 	.word	0x007a1200
 8005170:	08009f1c 	.word	0x08009f1c
 8005174:	08009f2c 	.word	0x08009f2c
 8005178:	003d0900 	.word	0x003d0900

0800517c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b02      	ldr	r3, [pc, #8]	@ (800518c <HAL_RCC_GetHCLKFreq+0x10>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	20000000 	.word	0x20000000

08005190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005194:	f7ff fff2 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	@ (80051b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000
 80051b4:	08009f14 	.word	0x08009f14

080051b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051bc:	f7ff ffde 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0adb      	lsrs	r3, r3, #11
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4903      	ldr	r1, [pc, #12]	@ (80051dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	08009f14 	.word	0x08009f14

080051e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <RCC_Delay+0x34>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <RCC_Delay+0x38>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051fc:	bf00      	nop
  }
  while (Delay --);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	60fa      	str	r2, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f9      	bne.n	80051fc <RCC_Delay+0x1c>
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	20000000 	.word	0x20000000
 8005218:	10624dd3 	.word	0x10624dd3

0800521c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d07d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005238:	2300      	movs	r3, #0
 800523a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523c:	4b4f      	ldr	r3, [pc, #316]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10d      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4a4b      	ldr	r2, [pc, #300]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005252:	61d3      	str	r3, [r2, #28]
 8005254:	4b49      	ldr	r3, [pc, #292]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005260:	2301      	movs	r3, #1
 8005262:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005264:	4b46      	ldr	r3, [pc, #280]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d118      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005270:	4b43      	ldr	r3, [pc, #268]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a42      	ldr	r2, [pc, #264]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800527a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527c:	f7fb feec 	bl	8001058 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005284:	f7fb fee8 	bl	8001058 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	@ 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e06d      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b3a      	ldr	r3, [pc, #232]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052a2:	4b36      	ldr	r3, [pc, #216]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02e      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d027      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c0:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052d6:	4a29      	ldr	r2, [pc, #164]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fb feb7 	bl	8001058 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fb feb3 	bl	8001058 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e036      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	4b1d      	ldr	r3, [pc, #116]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ee      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4917      	ldr	r1, [pc, #92]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	4313      	orrs	r3, r2
 8005320:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005328:	4b14      	ldr	r3, [pc, #80]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4a13      	ldr	r2, [pc, #76]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005340:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	490b      	ldr	r1, [pc, #44]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800535e:	4b07      	ldr	r3, [pc, #28]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4904      	ldr	r1, [pc, #16]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	40007000 	.word	0x40007000
 8005384:	42420440 	.word	0x42420440

08005388 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	f200 808a 	bhi.w	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d045      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d075      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053be:	e082      	b.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80053c0:	4b46      	ldr	r3, [pc, #280]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053c6:	4b45      	ldr	r3, [pc, #276]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d07b      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	0c9b      	lsrs	r3, r3, #18
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	4a41      	ldr	r2, [pc, #260]	@ (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d015      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053ea:	4b3c      	ldr	r3, [pc, #240]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	0c5b      	lsrs	r3, r3, #17
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	4a3b      	ldr	r2, [pc, #236]	@ (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80053f6:	5cd3      	ldrb	r3, [r2, r3]
 80053f8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005404:	4a38      	ldr	r2, [pc, #224]	@ (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fbb2 f2f3 	udiv	r2, r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4a34      	ldr	r2, [pc, #208]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005420:	4b2e      	ldr	r3, [pc, #184]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800542c:	d102      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	61bb      	str	r3, [r7, #24]
      break;
 8005432:	e04a      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
      break;
 8005442:	e042      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005444:	4b25      	ldr	r3, [pc, #148]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005454:	d108      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e01f      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d109      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005480:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e00f      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800548e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005492:	d11c      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005494:	4b11      	ldr	r3, [pc, #68]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80054a0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80054a4:	61bb      	str	r3, [r7, #24]
      break;
 80054a6:	e012      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054a8:	e011      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054aa:	f7ff fe85 	bl	80051b8 <HAL_RCC_GetPCLK2Freq>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0b9b      	lsrs	r3, r3, #14
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	3301      	adds	r3, #1
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	61bb      	str	r3, [r7, #24]
      break;
 80054c4:	e004      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80054ce:	bf00      	nop
    }
  }
  return (frequency);
 80054d0:	69bb      	ldr	r3, [r7, #24]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	08009f30 	.word	0x08009f30
 80054e4:	08009f40 	.word	0x08009f40
 80054e8:	007a1200 	.word	0x007a1200
 80054ec:	003d0900 	.word	0x003d0900
 80054f0:	aaaaaaab 	.word	0xaaaaaaab

080054f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e093      	b.n	8005630 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fb fbcb 	bl	8000cb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 f903 	bl	8005754 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	4313      	orrs	r3, r2
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005594:	f023 030c 	bic.w	r3, r3, #12
 8005598:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	4313      	orrs	r3, r2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	031b      	lsls	r3, r3, #12
 80055c4:	4313      	orrs	r3, r2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	4313      	orrs	r3, r2
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005648:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005650:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005658:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005660:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d110      	bne.n	800568a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d102      	bne.n	8005674 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d001      	beq.n	8005678 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e069      	b.n	800574c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005688:	e031      	b.n	80056ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d110      	bne.n	80056b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d102      	bne.n	800569c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005696:	7b3b      	ldrb	r3, [r7, #12]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e055      	b.n	800574c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056b0:	e01d      	b.n	80056ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d108      	bne.n	80056ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d105      	bne.n	80056ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056be:	7b7b      	ldrb	r3, [r7, #13]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d102      	bne.n	80056ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c4:	7b3b      	ldrb	r3, [r7, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e03e      	b.n	800574c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_TIM_Encoder_Start+0xc4>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d008      	beq.n	800570c <HAL_TIM_Encoder_Start+0xd4>
 80056fa:	e00f      	b.n	800571c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f893 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 800570a:	e016      	b.n	800573a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	2104      	movs	r1, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f88b 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 800571a:	e00e      	b.n	800573a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f883 	bl	8005830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2201      	movs	r2, #1
 8005730:	2104      	movs	r1, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f87c 	bl	8005830 <TIM_CCxChannelCmd>
      break;
 8005738:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2f      	ldr	r2, [pc, #188]	@ (8005824 <TIM_Base_SetConfig+0xd0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00b      	beq.n	8005784 <TIM_Base_SetConfig+0x30>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005772:	d007      	beq.n	8005784 <TIM_Base_SetConfig+0x30>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2c      	ldr	r2, [pc, #176]	@ (8005828 <TIM_Base_SetConfig+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0x30>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2b      	ldr	r2, [pc, #172]	@ (800582c <TIM_Base_SetConfig+0xd8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d108      	bne.n	8005796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a22      	ldr	r2, [pc, #136]	@ (8005824 <TIM_Base_SetConfig+0xd0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <TIM_Base_SetConfig+0xd4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	@ (800582c <TIM_Base_SetConfig+0xd8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005824 <TIM_Base_SetConfig+0xd0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d103      	bne.n	80057fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	611a      	str	r2, [r3, #16]
  }
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e046      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058dc:	d009      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a12      	ldr	r2, [pc, #72]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10c      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800

08005934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	4638      	mov	r0, r7
 800593e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800595e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005962:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005982:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005986:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	b29b      	uxth	r3, r3
 8005994:	43db      	mvns	r3, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	4013      	ands	r3, r2
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	4638      	mov	r0, r7
 80059d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b09d      	sub	sp, #116	@ 0x74
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	78db      	ldrb	r3, [r3, #3]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d81f      	bhi.n	8005a72 <USB_ActivateEndpoint+0x72>
 8005a32:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <USB_ActivateEndpoint+0x38>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a7b 	.word	0x08005a7b
 8005a44:	08005a57 	.word	0x08005a57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a54:	e012      	b.n	8005a7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a5a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005a5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a62:	e00b      	b.n	8005a7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a70:	e004      	b.n	8005a7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005a78:	e000      	b.n	8005a7c <USB_ActivateEndpoint+0x7c>
      break;
 8005a7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	7b1b      	ldrb	r3, [r3, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 8178 	bne.w	8005ddc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8084 	beq.w	8005bfe <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	4413      	add	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	011a      	lsls	r2, r3, #4
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	827b      	strh	r3, [r7, #18]
 8005b38:	8a7b      	ldrh	r3, [r7, #18]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01b      	beq.n	8005b7a <USB_ActivateEndpoint+0x17a>
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b58:	823b      	strh	r3, [r7, #16]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	8a3b      	ldrh	r3, [r7, #16]
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	78db      	ldrb	r3, [r3, #3]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d020      	beq.n	8005bc4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b98:	81bb      	strh	r3, [r7, #12]
 8005b9a:	89bb      	ldrh	r3, [r7, #12]
 8005b9c:	f083 0320 	eor.w	r3, r3, #32
 8005ba0:	81bb      	strh	r3, [r7, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	89bb      	ldrh	r3, [r7, #12]
 8005bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]
 8005bc2:	e2d5      	b.n	8006170 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bda:	81fb      	strh	r3, [r7, #14]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	89fb      	ldrh	r3, [r7, #14]
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
 8005bfc:	e2b8      	b.n	8006170 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	4413      	add	r3, r2
 8005c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c30:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	4413      	add	r3, r2
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	011a      	lsls	r2, r3, #4
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c6c:	d91d      	bls.n	8005caa <USB_ActivateEndpoint+0x2aa>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <USB_ActivateEndpoint+0x288>
 8005c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c84:	3b01      	subs	r3, #1
 8005c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4313      	orrs	r3, r2
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e026      	b.n	8005cf8 <USB_ActivateEndpoint+0x2f8>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <USB_ActivateEndpoint+0x2c8>
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	e017      	b.n	8005cf8 <USB_ActivateEndpoint+0x2f8>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <USB_ActivateEndpoint+0x2e2>
 8005cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cde:	3301      	adds	r3, #1
 8005ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <USB_ActivateEndpoint+0x348>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d26:	843b      	strh	r3, [r7, #32]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	8c3b      	ldrh	r3, [r7, #32]
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d124      	bne.n	8005d9a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d66:	83bb      	strh	r3, [r7, #28]
 8005d68:	8bbb      	ldrh	r3, [r7, #28]
 8005d6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d6e:	83bb      	strh	r3, [r7, #28]
 8005d70:	8bbb      	ldrh	r3, [r7, #28]
 8005d72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d76:	83bb      	strh	r3, [r7, #28]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	8bbb      	ldrh	r3, [r7, #28]
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
 8005d98:	e1ea      	b.n	8006170 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	83fb      	strh	r3, [r7, #30]
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005db8:	83fb      	strh	r3, [r7, #30]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8bfb      	ldrh	r3, [r7, #30]
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]
 8005dda:	e1c9      	b.n	8006170 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	78db      	ldrb	r3, [r3, #3]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d11e      	bne.n	8005e22 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e14:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
 8005e20:	e01d      	b.n	8005e5e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e6e:	4413      	add	r3, r2
 8005e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	891b      	ldrh	r3, [r3, #8]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea2:	4413      	add	r3, r2
 8005ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	011a      	lsls	r2, r3, #4
 8005eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005eb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	895b      	ldrh	r3, [r3, #10]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 8093 	bne.w	8005ff6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005ee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_ActivateEndpoint+0x524>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005f32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01b      	beq.n	8005f74 <USB_ActivateEndpoint+0x574>
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f52:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f92:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f9a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
 8005ff4:	e0bc      	b.n	8006170 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006006:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800600a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01d      	beq.n	800604e <USB_ActivateEndpoint+0x64e>
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006028:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800605e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01d      	beq.n	80060a6 <USB_ActivateEndpoint+0x6a6>
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006080:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	78db      	ldrb	r3, [r3, #3]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d024      	beq.n	80060f8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80060c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80060cc:	f083 0320 	eor.w	r3, r3, #32
 80060d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]
 80060f6:	e01d      	b.n	8006134 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006130:	b29b      	uxth	r3, r3
 8006132:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006170:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006174:	4618      	mov	r0, r3
 8006176:	3774      	adds	r7, #116	@ 0x74
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006180:	b480      	push	{r7}
 8006182:	b08d      	sub	sp, #52	@ 0x34
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	7b1b      	ldrb	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 808e 	bne.w	80062b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d044      	beq.n	8006226 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	81bb      	strh	r3, [r7, #12]
 80061aa:	89bb      	ldrh	r3, [r7, #12]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <USB_DeactivateEndpoint+0x6c>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ca:	817b      	strh	r3, [r7, #10]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006202:	813b      	strh	r3, [r7, #8]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	893b      	ldrh	r3, [r7, #8]
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]
 8006224:	e192      	b.n	800654c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	827b      	strh	r3, [r7, #18]
 8006234:	8a7b      	ldrh	r3, [r7, #18]
 8006236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01b      	beq.n	8006276 <USB_DeactivateEndpoint+0xf6>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006254:	823b      	strh	r3, [r7, #16]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8a3b      	ldrh	r3, [r7, #16]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628c:	81fb      	strh	r3, [r7, #14]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	89fb      	ldrh	r3, [r7, #14]
 800629a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	8013      	strh	r3, [r2, #0]
 80062ae:	e14d      	b.n	800654c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80a5 	bne.w	8006404 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	843b      	strh	r3, [r7, #32]
 80062c8:	8c3b      	ldrh	r3, [r7, #32]
 80062ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01b      	beq.n	800630a <USB_DeactivateEndpoint+0x18a>
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e8:	83fb      	strh	r3, [r7, #30]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	441a      	add	r2, r3
 80062f4:	8bfb      	ldrh	r3, [r7, #30]
 80062f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006306:	b29b      	uxth	r3, r3
 8006308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	83bb      	strh	r3, [r7, #28]
 8006318:	8bbb      	ldrh	r3, [r7, #28]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <USB_DeactivateEndpoint+0x1da>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006338:	837b      	strh	r3, [r7, #26]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	8b7b      	ldrh	r3, [r7, #26]
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800636c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006370:	833b      	strh	r3, [r7, #24]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8b3b      	ldrh	r3, [r7, #24]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a8:	82fb      	strh	r3, [r7, #22]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	8afb      	ldrh	r3, [r7, #22]
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e0:	82bb      	strh	r3, [r7, #20]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	8abb      	ldrh	r3, [r7, #20]
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]
 8006402:	e0a3      	b.n	800654c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006412:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <USB_DeactivateEndpoint+0x2d4>
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006432:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800644c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006450:	b29b      	uxth	r3, r3
 8006452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01b      	beq.n	80064a4 <USB_DeactivateEndpoint+0x324>
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006482:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800653c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006548:	b29b      	uxth	r3, r3
 800654a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3734      	adds	r7, #52	@ 0x34
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b0c2      	sub	sp, #264	@ 0x108
 800655c:	af00      	add	r7, sp, #0
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006566:	6018      	str	r0, [r3, #0]
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b01      	cmp	r3, #1
 8006580:	f040 86b7 	bne.w	80072f2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d908      	bls.n	80065b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80065b0:	e007      	b.n	80065c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	7b1b      	ldrb	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d13a      	bne.n	8006648 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	88da      	ldrh	r2, [r3, #6]
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065f8:	6800      	ldr	r0, [r0, #0]
 80065fa:	f001 fc9c 	bl	8007f36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	011a      	lsls	r2, r3, #4
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	f000 be1f 	b.w	8007286 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	2b02      	cmp	r3, #2
 8006656:	f040 8462 	bne.w	8006f1e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	f240 83df 	bls.w	8006e36 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80066cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 81c7 	beq.w	8006aa8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	633b      	str	r3, [r7, #48]	@ 0x30
 8006726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d177      	bne.n	8006826 <USB_EPStartXfer+0x2ce>
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	4413      	add	r3, r2
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	011a      	lsls	r2, r3, #4
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	4413      	add	r3, r2
 800676c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677c:	b29a      	uxth	r2, r3
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	2b3e      	cmp	r3, #62	@ 0x3e
 8006788:	d921      	bls.n	80067ce <USB_EPStartXfer+0x276>
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <USB_EPStartXfer+0x252>
 80067a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067a4:	3b01      	subs	r3, #1
 80067a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	e050      	b.n	8006870 <USB_EPStartXfer+0x318>
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <USB_EPStartXfer+0x294>
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e041      	b.n	8006870 <USB_EPStartXfer+0x318>
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USB_EPStartXfer+0x2b4>
 8006802:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006806:	3301      	adds	r3, #1
 8006808:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e024      	b.n	8006870 <USB_EPStartXfer+0x318>
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d11c      	bne.n	8006870 <USB_EPStartXfer+0x318>
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	4413      	add	r3, r2
 800684c:	633b      	str	r3, [r7, #48]	@ 0x30
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	011a      	lsls	r2, r3, #4
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	4413      	add	r3, r2
 8006860:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	b29a      	uxth	r2, r3
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	895b      	ldrh	r3, [r3, #10]
 800687c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6959      	ldr	r1, [r3, #20]
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	b29b      	uxth	r3, r3
 8006892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006896:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800689a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	f001 fb49 	bl	8007f36 <USB_WritePMA>
            ep->xfer_buff += len;
 80068a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	441a      	add	r2, r3
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d90f      	bls.n	80068fe <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1a      	ldr	r2, [r3, #32]
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	621a      	str	r2, [r3, #32]
 80068fc:	e00e      	b.n	800691c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80068fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800690e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2200      	movs	r2, #0
 800691a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d177      	bne.n	8006a1c <USB_EPStartXfer+0x4c4>
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	4413      	add	r3, r2
 8006962:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006972:	b29a      	uxth	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697c:	2b3e      	cmp	r3, #62	@ 0x3e
 800697e:	d921      	bls.n	80069c4 <USB_EPStartXfer+0x46c>
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <USB_EPStartXfer+0x448>
 8006996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800699a:	3b01      	subs	r3, #1
 800699c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	029b      	lsls	r3, r3, #10
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069bc:	b29a      	uxth	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e056      	b.n	8006a72 <USB_EPStartXfer+0x51a>
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <USB_EPStartXfer+0x48a>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069da:	b29a      	uxth	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e047      	b.n	8006a72 <USB_EPStartXfer+0x51a>
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <USB_EPStartXfer+0x4aa>
 80069f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069fc:	3301      	adds	r3, #1
 80069fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e02a      	b.n	8006a72 <USB_EPStartXfer+0x51a>
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d122      	bne.n	8006a72 <USB_EPStartXfer+0x51a>
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	891b      	ldrh	r3, [r3, #8]
 8006a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6959      	ldr	r1, [r3, #20]
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006aa0:	6800      	ldr	r0, [r0, #0]
 8006aa2:	f001 fa48 	bl	8007f36 <USB_WritePMA>
 8006aa6:	e3ee      	b.n	8007286 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d177      	bne.n	8006ba8 <USB_EPStartXfer+0x650>
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad8:	4413      	add	r3, r2
 8006ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	011a      	lsls	r2, r3, #4
 8006aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aec:	4413      	add	r3, r2
 8006aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b0a:	d921      	bls.n	8006b50 <USB_EPStartXfer+0x5f8>
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <USB_EPStartXfer+0x5d4>
 8006b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b26:	3b01      	subs	r3, #1
 8006b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e056      	b.n	8006bfe <USB_EPStartXfer+0x6a6>
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <USB_EPStartXfer+0x616>
 8006b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e047      	b.n	8006bfe <USB_EPStartXfer+0x6a6>
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <USB_EPStartXfer+0x636>
 8006b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	e02a      	b.n	8006bfe <USB_EPStartXfer+0x6a6>
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d122      	bne.n	8006bfe <USB_EPStartXfer+0x6a6>
 8006bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd8:	4413      	add	r3, r2
 8006bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	011a      	lsls	r2, r3, #4
 8006bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	891b      	ldrh	r3, [r3, #8]
 8006c0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f001 f982 	bl	8007f36 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	441a      	add	r2, r3
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d90f      	bls.n	8006c8c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	621a      	str	r2, [r3, #32]
 8006c8a:	e00e      	b.n	8006caa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d177      	bne.n	8006db6 <USB_EPStartXfer+0x85e>
 8006cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	4413      	add	r3, r2
 8006ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	011a      	lsls	r2, r3, #4
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d16:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d18:	d921      	bls.n	8006d5e <USB_EPStartXfer+0x806>
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <USB_EPStartXfer+0x7e2>
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d34:	3b01      	subs	r3, #1
 8006d36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5a:	801a      	strh	r2, [r3, #0]
 8006d5c:	e050      	b.n	8006e00 <USB_EPStartXfer+0x8a8>
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <USB_EPStartXfer+0x824>
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e041      	b.n	8006e00 <USB_EPStartXfer+0x8a8>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <USB_EPStartXfer+0x844>
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d96:	3301      	adds	r3, #1
 8006d98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	e024      	b.n	8006e00 <USB_EPStartXfer+0x8a8>
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d11c      	bne.n	8006e00 <USB_EPStartXfer+0x8a8>
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dda:	4413      	add	r3, r2
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	011a      	lsls	r2, r3, #4
 8006dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	895b      	ldrh	r3, [r3, #10]
 8006e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6959      	ldr	r1, [r3, #20]
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e2e:	6800      	ldr	r0, [r0, #0]
 8006e30:	f001 f881 	bl	8007f36 <USB_WritePMA>
 8006e34:	e227      	b.n	8007286 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec2:	4413      	add	r3, r2
 8006ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	011a      	lsls	r2, r3, #4
 8006ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ee6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	891b      	ldrh	r3, [r3, #8]
 8006ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6959      	ldr	r1, [r3, #20]
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	f001 f80d 	bl	8007f36 <USB_WritePMA>
 8006f1c:	e1b3      	b.n	8007286 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 80c6 	beq.w	80070f0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d177      	bne.n	8007070 <USB_EPStartXfer+0xb18>
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fa0:	4413      	add	r3, r2
 8006fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	011a      	lsls	r2, r3, #4
 8006fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fba:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd2:	d921      	bls.n	8007018 <USB_EPStartXfer+0xac0>
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <USB_EPStartXfer+0xa9c>
 8006fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	b29b      	uxth	r3, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007010:	b29a      	uxth	r2, r3
 8007012:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	e050      	b.n	80070ba <USB_EPStartXfer+0xb62>
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <USB_EPStartXfer+0xade>
 8007020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	e041      	b.n	80070ba <USB_EPStartXfer+0xb62>
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <USB_EPStartXfer+0xafe>
 800704c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007050:	3301      	adds	r3, #1
 8007052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	4313      	orrs	r3, r2
 8007068:	b29a      	uxth	r2, r3
 800706a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e024      	b.n	80070ba <USB_EPStartXfer+0xb62>
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d11c      	bne.n	80070ba <USB_EPStartXfer+0xb62>
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007094:	4413      	add	r3, r2
 8007096:	673b      	str	r3, [r7, #112]	@ 0x70
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	011a      	lsls	r2, r3, #4
 80070a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a8:	4413      	add	r3, r2
 80070aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	895b      	ldrh	r3, [r3, #10]
 80070c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6959      	ldr	r1, [r3, #20]
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070e8:	6800      	ldr	r0, [r0, #0]
 80070ea:	f000 ff24 	bl	8007f36 <USB_WritePMA>
 80070ee:	e0ca      	b.n	8007286 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d177      	bne.n	80071f0 <USB_EPStartXfer+0xc98>
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800711a:	b29b      	uxth	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007120:	4413      	add	r3, r2
 8007122:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	011a      	lsls	r2, r3, #4
 8007132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007134:	4413      	add	r3, r2
 8007136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800713a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800713c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007146:	b29a      	uxth	r2, r3
 8007148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	2b3e      	cmp	r3, #62	@ 0x3e
 8007152:	d921      	bls.n	8007198 <USB_EPStartXfer+0xc40>
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <USB_EPStartXfer+0xc1c>
 800716a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800716e:	3b01      	subs	r3, #1
 8007170:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29a      	uxth	r2, r3
 800717a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29b      	uxth	r3, r3
 8007184:	4313      	orrs	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	e05c      	b.n	8007252 <USB_EPStartXfer+0xcfa>
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <USB_EPStartXfer+0xc5e>
 80071a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e04d      	b.n	8007252 <USB_EPStartXfer+0xcfa>
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <USB_EPStartXfer+0xc7e>
 80071cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071d0:	3301      	adds	r3, #1
 80071d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e030      	b.n	8007252 <USB_EPStartXfer+0xcfa>
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d128      	bne.n	8007252 <USB_EPStartXfer+0xcfa>
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800721c:	b29b      	uxth	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007224:	4413      	add	r3, r2
 8007226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	011a      	lsls	r2, r3, #4
 8007238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800723c:	4413      	add	r3, r2
 800723e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007250:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	891b      	ldrh	r3, [r3, #8]
 800725e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	b29b      	uxth	r3, r3
 8007274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007278:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800727c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007280:	6800      	ldr	r0, [r0, #0]
 8007282:	f000 fe58 	bl	8007f36 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	897b      	ldrh	r3, [r7, #10]
 80072b0:	f083 0310 	eor.w	r3, r3, #16
 80072b4:	817b      	strh	r3, [r7, #10]
 80072b6:	897b      	ldrh	r3, [r7, #10]
 80072b8:	f083 0320 	eor.w	r3, r3, #32
 80072bc:	817b      	strh	r3, [r7, #10]
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	897b      	ldrh	r3, [r7, #10]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	f000 bcde 	b.w	8007cae <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	7b1b      	ldrb	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f040 80bb 	bne.w	800747a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d917      	bls.n	8007350 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699a      	ldr	r2, [r3, #24]
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	1ad2      	subs	r2, r2, r3
 8007342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	619a      	str	r2, [r3, #24]
 800734e:	e00e      	b.n	800736e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800738a:	b29b      	uxth	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007392:	4413      	add	r3, r2
 8007394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	011a      	lsls	r2, r3, #4
 80073a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073aa:	4413      	add	r3, r2
 80073ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ce:	d924      	bls.n	800741a <USB_EPStartXfer+0xec2>
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <USB_EPStartXfer+0xe98>
 80073e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073ea:	3b01      	subs	r3, #1
 80073ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	029b      	lsls	r3, r3, #10
 8007400:	b29b      	uxth	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	f000 bc10 	b.w	8007c3a <USB_EPStartXfer+0x16e2>
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <USB_EPStartXfer+0xee4>
 8007422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007432:	b29a      	uxth	r2, r3
 8007434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	e3fe      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <USB_EPStartXfer+0xf04>
 8007452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007456:	3301      	adds	r3, #1
 8007458:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800745c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007468:	b29b      	uxth	r3, r3
 800746a:	029b      	lsls	r3, r3, #10
 800746c:	b29b      	uxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e3df      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	78db      	ldrb	r3, [r3, #3]
 8007486:	2b02      	cmp	r3, #2
 8007488:	f040 8218 	bne.w	80078bc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 809d 	bne.w	80075d8 <USB_EPStartXfer+0x1080>
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c2:	4413      	add	r3, r2
 80074c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	011a      	lsls	r2, r3, #4
 80074d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074da:	4413      	add	r3, r2
 80074dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b3e      	cmp	r3, #62	@ 0x3e
 8007506:	d92b      	bls.n	8007560 <USB_EPStartXfer+0x1008>
 8007508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <USB_EPStartXfer+0xfe0>
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007532:	3b01      	subs	r3, #1
 8007534:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	b29b      	uxth	r3, r3
 8007546:	029b      	lsls	r3, r3, #10
 8007548:	b29b      	uxth	r3, r3
 800754a:	4313      	orrs	r3, r2
 800754c:	b29b      	uxth	r3, r3
 800754e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007556:	b29a      	uxth	r2, r3
 8007558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800755c:	801a      	strh	r2, [r3, #0]
 800755e:	e070      	b.n	8007642 <USB_EPStartXfer+0x10ea>
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10c      	bne.n	800758a <USB_EPStartXfer+0x1032>
 8007570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007580:	b29a      	uxth	r2, r3
 8007582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	e05b      	b.n	8007642 <USB_EPStartXfer+0x10ea>
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <USB_EPStartXfer+0x1062>
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b4:	3301      	adds	r3, #1
 80075b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	e034      	b.n	8007642 <USB_EPStartXfer+0x10ea>
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d12c      	bne.n	8007642 <USB_EPStartXfer+0x10ea>
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800760c:	4413      	add	r3, r2
 800760e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	011a      	lsls	r2, r3, #4
 8007620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007624:	4413      	add	r3, r2
 8007626:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800762a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	b29a      	uxth	r2, r3
 800763c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f040 809d 	bne.w	800779c <USB_EPStartXfer+0x1244>
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800767e:	b29b      	uxth	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007686:	4413      	add	r3, r2
 8007688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	011a      	lsls	r2, r3, #4
 800769a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800769e:	4413      	add	r3, r2
 80076a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ca:	d92b      	bls.n	8007724 <USB_EPStartXfer+0x11cc>
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <USB_EPStartXfer+0x11a4>
 80076f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f6:	3b01      	subs	r3, #1
 80076f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	e069      	b.n	80077f8 <USB_EPStartXfer+0x12a0>
 8007724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <USB_EPStartXfer+0x11f6>
 8007734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	e054      	b.n	80077f8 <USB_EPStartXfer+0x12a0>
 800774e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <USB_EPStartXfer+0x1226>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007778:	3301      	adds	r3, #1
 800777a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800777e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e02d      	b.n	80077f8 <USB_EPStartXfer+0x12a0>
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d125      	bne.n	80077f8 <USB_EPStartXfer+0x12a0>
 80077ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077c2:	4413      	add	r3, r2
 80077c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	011a      	lsls	r2, r3, #4
 80077d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077da:	4413      	add	r3, r2
 80077dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8218 	beq.w	8007c3a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800782a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800782e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <USB_EPStartXfer+0x12ea>
 8007836:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10d      	bne.n	800785e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007842:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 81f5 	bne.w	8007c3a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007850:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 81ee 	bne.w	8007c3a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007884:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	441a      	add	r2, r3
 80078a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	8013      	strh	r3, [r2, #0]
 80078ba:	e1be      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 81b4 	bne.w	8007c36 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d917      	bls.n	800791a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80078fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	619a      	str	r2, [r3, #24]
 8007918:	e00e      	b.n	8007938 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2200      	movs	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 8085 	bne.w	8007a54 <USB_EPStartXfer+0x14fc>
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800796e:	4413      	add	r3, r2
 8007970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	011a      	lsls	r2, r3, #4
 8007982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007986:	4413      	add	r3, r2
 8007988:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800798c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079aa:	d923      	bls.n	80079f4 <USB_EPStartXfer+0x149c>
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <USB_EPStartXfer+0x1474>
 80079c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c6:	3b01      	subs	r3, #1
 80079c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d8:	b29b      	uxth	r3, r3
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e060      	b.n	8007ab6 <USB_EPStartXfer+0x155e>
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10c      	bne.n	8007a16 <USB_EPStartXfer+0x14be>
 80079fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e04f      	b.n	8007ab6 <USB_EPStartXfer+0x155e>
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <USB_EPStartXfer+0x14de>
 8007a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a30:	3301      	adds	r3, #1
 8007a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	e030      	b.n	8007ab6 <USB_EPStartXfer+0x155e>
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d128      	bne.n	8007ab6 <USB_EPStartXfer+0x155e>
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a88:	4413      	add	r3, r2
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	011a      	lsls	r2, r3, #4
 8007a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 8085 	bne.w	8007be0 <USB_EPStartXfer+0x1688>
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007afa:	4413      	add	r3, r2
 8007afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	011a      	lsls	r2, r3, #4
 8007b0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b12:	4413      	add	r3, r2
 8007b14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b36:	d923      	bls.n	8007b80 <USB_EPStartXfer+0x1628>
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <USB_EPStartXfer+0x1600>
 8007b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b52:	3b01      	subs	r3, #1
 8007b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	029b      	lsls	r3, r3, #10
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	e05c      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10c      	bne.n	8007ba2 <USB_EPStartXfer+0x164a>
 8007b88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e04b      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <USB_EPStartXfer+0x166a>
 8007bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	029b      	lsls	r3, r3, #10
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	e02c      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
 8007be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d124      	bne.n	8007c3a <USB_EPStartXfer+0x16e2>
 8007bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c06:	4413      	add	r3, r2
 8007c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	011a      	lsls	r2, r3, #4
 8007c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c1e:	4413      	add	r3, r2
 8007c20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e001      	b.n	8007c3a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e03a      	b.n	8007cb0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	441a      	add	r2, r3
 8007c96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d020      	beq.n	8007d0e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce2:	81bb      	strh	r3, [r7, #12]
 8007ce4:	89bb      	ldrh	r3, [r7, #12]
 8007ce6:	f083 0310 	eor.w	r3, r3, #16
 8007cea:	81bb      	strh	r3, [r7, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	89bb      	ldrh	r3, [r7, #12]
 8007cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8013      	strh	r3, [r2, #0]
 8007d0c:	e01f      	b.n	8007d4e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d24:	81fb      	strh	r3, [r7, #14]
 8007d26:	89fb      	ldrh	r3, [r7, #14]
 8007d28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d2c:	81fb      	strh	r3, [r7, #14]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	441a      	add	r2, r3
 8007d38:	89fb      	ldrh	r3, [r7, #14]
 8007d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr

08007d5a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	7b1b      	ldrb	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 809d 	bne.w	8007ea8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d04c      	beq.n	8007e10 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	823b      	strh	r3, [r7, #16]
 8007d84:	8a3b      	ldrh	r3, [r7, #16]
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01b      	beq.n	8007dc6 <USB_EPClearStall+0x6c>
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da4:	81fb      	strh	r3, [r7, #14]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	89fb      	ldrh	r3, [r7, #14]
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d06c      	beq.n	8007ea8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de4:	81bb      	strh	r3, [r7, #12]
 8007de6:	89bb      	ldrh	r3, [r7, #12]
 8007de8:	f083 0320 	eor.w	r3, r3, #32
 8007dec:	81bb      	strh	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	89bb      	ldrh	r3, [r7, #12]
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]
 8007e0e:	e04b      	b.n	8007ea8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	82fb      	strh	r3, [r7, #22]
 8007e1e:	8afb      	ldrh	r3, [r7, #22]
 8007e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01b      	beq.n	8007e60 <USB_EPClearStall+0x106>
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3e:	82bb      	strh	r3, [r7, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	8abb      	ldrh	r3, [r7, #20]
 8007e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e76:	827b      	strh	r3, [r7, #18]
 8007e78:	8a7b      	ldrh	r3, [r7, #18]
 8007e7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e7e:	827b      	strh	r3, [r7, #18]
 8007e80:	8a7b      	ldrh	r3, [r7, #18]
 8007e82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e86:	827b      	strh	r3, [r7, #18]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	8a7b      	ldrh	r3, [r7, #18]
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr

08007eb4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr

08007eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr

08007f02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b08b      	sub	sp, #44	@ 0x2c
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	4611      	mov	r1, r2
 8007f42:	461a      	mov	r2, r3
 8007f44:	460b      	mov	r3, r1
 8007f46:	80fb      	strh	r3, [r7, #6]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f4c:	88bb      	ldrh	r3, [r7, #4]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	085b      	lsrs	r3, r3, #1
 8007f52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	005a      	lsls	r2, r3, #1
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f68:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f6e:	e01e      	b.n	8007fae <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	b21a      	sxth	r2, r3
 8007f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b21b      	sxth	r3, r3
 8007f88:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	8a7a      	ldrh	r2, [r7, #18]
 8007f8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	3302      	adds	r3, #2
 8007f94:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	3302      	adds	r3, #2
 8007f9a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	3b01      	subs	r3, #1
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1dd      	bne.n	8007f70 <USB_WritePMA+0x3a>
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	372c      	adds	r7, #44	@ 0x2c
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b08b      	sub	sp, #44	@ 0x2c
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	460b      	mov	r3, r1
 8007fd0:	80fb      	strh	r3, [r7, #6]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fd6:	88bb      	ldrh	r3, [r7, #4]
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	005a      	lsls	r2, r3, #1
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ff2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff8:	e01b      	b.n	8008032 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3302      	adds	r3, #2
 8008006:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3301      	adds	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	b2da      	uxtb	r2, r3
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	3302      	adds	r3, #2
 800802a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	3b01      	subs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e0      	bne.n	8007ffa <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008038:	88bb      	ldrh	r3, [r7, #4]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	701a      	strb	r2, [r3, #0]
  }
}
 8008054:	bf00      	nop
 8008056:	372c      	adds	r7, #44	@ 0x2c
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <MCP23017_Init>:
#include <MCP23017.h>

void MCP23017_Init(I2C_HandleTypeDef *hi2c)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b088      	sub	sp, #32
 8008062:	af04      	add	r7, sp, #16
 8008064:	6078      	str	r0, [r7, #4]
    uint8_t iodir = 0xFF; // Tất cả chân input
 8008066:	23ff      	movs	r3, #255	@ 0xff
 8008068:	73fb      	strb	r3, [r7, #15]

    // Cấu hình cả PORTA và PORTB là input
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRA_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	2301      	movs	r3, #1
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f107 030f 	add.w	r3, r7, #15
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2301      	movs	r3, #1
 800807c:	2200      	movs	r2, #0
 800807e:	2140      	movs	r1, #64	@ 0x40
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fa f851 	bl	8002128 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRB_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	2301      	movs	r3, #1
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	f107 030f 	add.w	r3, r7, #15
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2301      	movs	r3, #1
 8008098:	2201      	movs	r2, #1
 800809a:	2140      	movs	r1, #64	@ 0x40
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fa f843 	bl	8002128 <HAL_I2C_Mem_Write>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <MCP23017_Read_GPIOA>:

uint8_t MCP23017_Read_GPIOA(I2C_HandleTypeDef *hi2c)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b088      	sub	sp, #32
 80080ae:	af04      	add	r7, sp, #16
 80080b0:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOA_REG, 1, &value, 1, HAL_MAX_DELAY);
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	2301      	movs	r3, #1
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	f107 030f 	add.w	r3, r7, #15
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2301      	movs	r3, #1
 80080c4:	2212      	movs	r2, #18
 80080c6:	2140      	movs	r1, #64	@ 0x40
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fa f927 	bl	800231c <HAL_I2C_Mem_Read>
    return value;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <MCP23017_Read_GPIOB>:

uint8_t MCP23017_Read_GPIOB(I2C_HandleTypeDef *hi2c)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af04      	add	r7, sp, #16
 80080de:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	9302      	str	r3, [sp, #8]
 80080e6:	2301      	movs	r3, #1
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	f107 030f 	add.w	r3, r7, #15
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2301      	movs	r3, #1
 80080f2:	2213      	movs	r2, #19
 80080f4:	2140      	movs	r1, #64	@ 0x40
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fa f910 	bl	800231c <HAL_I2C_Mem_Read>
    return value;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <MCP23017_WriteRegister>:

void MCP23017_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af04      	add	r7, sp, #16
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
 8008112:	4613      	mov	r3, r2
 8008114:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	b29a      	uxth	r2, r3
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	9302      	str	r3, [sp, #8]
 8008120:	2301      	movs	r3, #1
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	1cbb      	adds	r3, r7, #2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2301      	movs	r3, #1
 800812a:	2140      	movs	r1, #64	@ 0x40
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7f9 fffb 	bl	8002128 <HAL_I2C_Mem_Write>
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <MCP23017_EnablePullUps>:

void MCP23017_EnablePullUps(I2C_HandleTypeDef *hi2c) {
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
    MCP23017_WriteRegister(hi2c, 0x0C, 0xFF);
 8008142:	22ff      	movs	r2, #255	@ 0xff
 8008144:	210c      	movs	r1, #12
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff ffdd 	bl	8008106 <MCP23017_WriteRegister>
    MCP23017_WriteRegister(hi2c, 0x0D, 0xFF);
 800814c:	22ff      	movs	r2, #255	@ 0xff
 800814e:	210d      	movs	r1, #13
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff ffd8 	bl	8008106 <MCP23017_WriteRegister>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <TLC59116_Init>:
#include "TLC59116.h"

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af04      	add	r7, sp, #16
 8008164:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 800816a:	2300      	movs	r3, #0
 800816c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	2301      	movs	r3, #1
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	f107 030f 	add.w	r3, r7, #15
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	2301      	movs	r3, #1
 8008180:	2200      	movs	r2, #0
 8008182:	21c0      	movs	r1, #192	@ 0xc0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7f9 ffcf 	bl	8002128 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 800818a:	f04f 33ff 	mov.w	r3, #4294967295
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	2301      	movs	r3, #1
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	f107 030e 	add.w	r3, r7, #14
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	2301      	movs	r3, #1
 800819c:	2201      	movs	r2, #1
 800819e:	21c0      	movs	r1, #192	@ 0xc0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7f9 ffc1 	bl	8002128 <HAL_I2C_Mem_Write>
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af04      	add	r7, sp, #16
 80081b4:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 80081b6:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80081ba:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80081bc:	f04f 33ff 	mov.w	r3, #4294967295
 80081c0:	9302      	str	r3, [sp, #8]
 80081c2:	2304      	movs	r3, #4
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	2301      	movs	r3, #1
 80081ce:	2214      	movs	r2, #20
 80081d0:	21c0      	movs	r1, #192	@ 0xc0
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7f9 ffa8 	bl	8002128 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80081d8:	f04f 33ff 	mov.w	r3, #4294967295
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	2304      	movs	r3, #4
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2301      	movs	r3, #1
 80081ea:	2215      	movs	r2, #21
 80081ec:	21c0      	movs	r1, #192	@ 0xc0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7f9 ff9a 	bl	8002128 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	2304      	movs	r3, #4
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	f107 030c 	add.w	r3, r7, #12
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2301      	movs	r3, #1
 8008206:	2216      	movs	r2, #22
 8008208:	21c0      	movs	r1, #192	@ 0xc0
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f9 ff8c 	bl	8002128 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008210:	f04f 33ff 	mov.w	r3, #4294967295
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	2304      	movs	r3, #4
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	2301      	movs	r3, #1
 8008222:	2217      	movs	r2, #23
 8008224:	21c0      	movs	r1, #192	@ 0xc0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f9 ff7e 	bl	8002128 <HAL_I2C_Mem_Write>
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <TLC59116_Set_PWM>:

void TLC59116_Set_PWM(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af04      	add	r7, sp, #16
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	4613      	mov	r3, r2
 8008242:	70bb      	strb	r3, [r7, #2]
    if (channel > 15) return;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d811      	bhi.n	800826e <TLC59116_Set_PWM+0x3a>
    uint8_t reg = 0x02 + channel;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	3302      	adds	r3, #2
 800824e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	b29a      	uxth	r2, r3
 8008254:	f04f 33ff 	mov.w	r3, #4294967295
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	2301      	movs	r3, #1
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	1cbb      	adds	r3, r7, #2
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	2301      	movs	r3, #1
 8008264:	21c0      	movs	r1, #192	@ 0xc0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7f9 ff5e 	bl	8002128 <HAL_I2C_Mem_Write>
 800826c:	e000      	b.n	8008270 <TLC59116_Set_PWM+0x3c>
    if (channel > 15) return;
 800826e:	bf00      	nop
}
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008282:	2304      	movs	r3, #4
 8008284:	2203      	movs	r2, #3
 8008286:	2181      	movs	r1, #129	@ 0x81
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fc80 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008294:	2010      	movs	r0, #16
 8008296:	f001 fd8d 	bl	8009db4 <USBD_static_malloc>
 800829a:	4602      	mov	r2, r0
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80082ac:	2302      	movs	r3, #2
 80082ae:	e005      	b.n	80082bc <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b6:	2200      	movs	r2, #0
 80082b8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80082d0:	2181      	movs	r1, #129	@ 0x81
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fc81 	bl	8009bda <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fd6c 	bl	8009dcc <USBD_static_free>
    pdev->pClassData = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008332:	2b00      	cmp	r3, #0
 8008334:	d045      	beq.n	80083c2 <USBD_HID_Setup+0xba>
 8008336:	2b20      	cmp	r3, #32
 8008338:	f040 80d3 	bne.w	80084e2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	3b02      	subs	r3, #2
 8008342:	2b09      	cmp	r3, #9
 8008344:	d835      	bhi.n	80083b2 <USBD_HID_Setup+0xaa>
 8008346:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <USBD_HID_Setup+0x44>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083a3 	.word	0x080083a3
 8008350:	08008383 	.word	0x08008383
 8008354:	080083b3 	.word	0x080083b3
 8008358:	080083b3 	.word	0x080083b3
 800835c:	080083b3 	.word	0x080083b3
 8008360:	080083b3 	.word	0x080083b3
 8008364:	080083b3 	.word	0x080083b3
 8008368:	080083b3 	.word	0x080083b3
 800836c:	08008391 	.word	0x08008391
 8008370:	08008375 	.word	0x08008375
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	601a      	str	r2, [r3, #0]
          break;
 8008380:	e01e      	b.n	80083c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2201      	movs	r2, #1
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 f941 	bl	8009610 <USBD_CtlSendData>
          break;
 800838e:	e017      	b.n	80083c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	0a1b      	lsrs	r3, r3, #8
 8008396:	b29b      	uxth	r3, r3
 8008398:	b2db      	uxtb	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	605a      	str	r2, [r3, #4]
          break;
 80083a0:	e00e      	b.n	80083c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3304      	adds	r3, #4
 80083a6:	2201      	movs	r2, #1
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 f930 	bl	8009610 <USBD_CtlSendData>
          break;
 80083b0:	e006      	b.n	80083c0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f8c1 	bl	800953c <USBD_CtlError>
          ret = USBD_FAIL;
 80083ba:	2302      	movs	r3, #2
 80083bc:	75fb      	strb	r3, [r7, #23]
          break;
 80083be:	bf00      	nop
      }
      break;
 80083c0:	e096      	b.n	80084f0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	2b0b      	cmp	r3, #11
 80083c8:	f200 8083 	bhi.w	80084d2 <USBD_HID_Setup+0x1ca>
 80083cc:	a201      	add	r2, pc, #4	@ (adr r2, 80083d4 <USBD_HID_Setup+0xcc>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008405 	.word	0x08008405
 80083d8:	080084d3 	.word	0x080084d3
 80083dc:	080084d3 	.word	0x080084d3
 80083e0:	080084d3 	.word	0x080084d3
 80083e4:	080084d3 	.word	0x080084d3
 80083e8:	080084d3 	.word	0x080084d3
 80083ec:	0800842d 	.word	0x0800842d
 80083f0:	080084d3 	.word	0x080084d3
 80083f4:	080084d3 	.word	0x080084d3
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	08008485 	.word	0x08008485
 8008400:	080084ad 	.word	0x080084ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840a:	2b03      	cmp	r3, #3
 800840c:	d107      	bne.n	800841e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800840e:	f107 030e 	add.w	r3, r7, #14
 8008412:	2202      	movs	r2, #2
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f8fa 	bl	8009610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800841c:	e060      	b.n	80084e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f88b 	bl	800953c <USBD_CtlError>
            ret = USBD_FAIL;
 8008426:	2302      	movs	r3, #2
 8008428:	75fb      	strb	r3, [r7, #23]
          break;
 800842a:	e059      	b.n	80084e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	885b      	ldrh	r3, [r3, #2]
 8008430:	0a1b      	lsrs	r3, r3, #8
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b22      	cmp	r3, #34	@ 0x22
 8008436:	d108      	bne.n	800844a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	88db      	ldrh	r3, [r3, #6]
 800843c:	2b19      	cmp	r3, #25
 800843e:	bf28      	it	cs
 8008440:	2319      	movcs	r3, #25
 8008442:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008444:	4b2d      	ldr	r3, [pc, #180]	@ (80084fc <USBD_HID_Setup+0x1f4>)
 8008446:	61bb      	str	r3, [r7, #24]
 8008448:	e015      	b.n	8008476 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b21      	cmp	r3, #33	@ 0x21
 8008454:	d108      	bne.n	8008468 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008456:	4b2a      	ldr	r3, [pc, #168]	@ (8008500 <USBD_HID_Setup+0x1f8>)
 8008458:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	88db      	ldrh	r3, [r3, #6]
 800845e:	2b09      	cmp	r3, #9
 8008460:	bf28      	it	cs
 8008462:	2309      	movcs	r3, #9
 8008464:	83fb      	strh	r3, [r7, #30]
 8008466:	e006      	b.n	8008476 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f866 	bl	800953c <USBD_CtlError>
            ret = USBD_FAIL;
 8008470:	2302      	movs	r3, #2
 8008472:	75fb      	strb	r3, [r7, #23]
            break;
 8008474:	e034      	b.n	80084e0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008476:	8bfb      	ldrh	r3, [r7, #30]
 8008478:	461a      	mov	r2, r3
 800847a:	69b9      	ldr	r1, [r7, #24]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 f8c7 	bl	8009610 <USBD_CtlSendData>
          break;
 8008482:	e02d      	b.n	80084e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800848a:	2b03      	cmp	r3, #3
 800848c:	d107      	bne.n	800849e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3308      	adds	r3, #8
 8008492:	2201      	movs	r2, #1
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f8ba 	bl	8009610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800849c:	e020      	b.n	80084e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 f84b 	bl	800953c <USBD_CtlError>
            ret = USBD_FAIL;
 80084a6:	2302      	movs	r3, #2
 80084a8:	75fb      	strb	r3, [r7, #23]
          break;
 80084aa:	e019      	b.n	80084e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d106      	bne.n	80084c4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084c2:	e00d      	b.n	80084e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f838 	bl	800953c <USBD_CtlError>
            ret = USBD_FAIL;
 80084cc:	2302      	movs	r3, #2
 80084ce:	75fb      	strb	r3, [r7, #23]
          break;
 80084d0:	e006      	b.n	80084e0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f831 	bl	800953c <USBD_CtlError>
          ret = USBD_FAIL;
 80084da:	2302      	movs	r3, #2
 80084dc:	75fb      	strb	r3, [r7, #23]
          break;
 80084de:	bf00      	nop
      }
      break;
 80084e0:	e006      	b.n	80084f0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f829 	bl	800953c <USBD_CtlError>
      ret = USBD_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	75fb      	strb	r3, [r7, #23]
      break;
 80084ee:	bf00      	nop
  }

  return ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200000c8 	.word	0x200000c8
 8008500:	200000b0 	.word	0x200000b0

08008504 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008518:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008520:	2b03      	cmp	r3, #3
 8008522:	d10c      	bne.n	800853e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	7b1b      	ldrb	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d108      	bne.n	800853e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2201      	movs	r2, #1
 8008530:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	2181      	movs	r1, #129	@ 0x81
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 fbf5 	bl	8009d28 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2222      	movs	r2, #34	@ 0x22
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008556:	4b03      	ldr	r3, [pc, #12]	@ (8008564 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000044 	.word	0x20000044

08008568 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2222      	movs	r2, #34	@ 0x22
 8008574:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008576:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000068 	.word	0x20000068

08008588 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2222      	movs	r2, #34	@ 0x22
 8008594:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	@ (80085a4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	2000008c 	.word	0x2000008c

080085a8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ba:	2200      	movs	r2, #0
 80085bc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr
	...

080085cc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220a      	movs	r2, #10
 80085d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80085da:	4b03      	ldr	r3, [pc, #12]	@ (80085e8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	200000bc 	.word	0x200000bc

080085ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008600:	2302      	movs	r3, #2
 8008602:	e01a      	b.n	800863a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	79fa      	ldrb	r2, [r7, #7]
 8008630:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f001 fa48 	bl	8009ac8 <USBD_LL_Init>

  return USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d006      	beq.n	8008664 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
 8008662:	e001      	b.n	8008668 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008664:	2302      	movs	r3, #2
 8008666:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fa6b 	bl	8009b58 <USBD_LL_Start>

  return USBD_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086ac:	2302      	movs	r3, #2
 80086ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fed7 	bl	80094ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2b02      	cmp	r3, #2
 800873e:	d016      	beq.n	800876e <USBD_LL_SetupStage+0x6a>
 8008740:	2b02      	cmp	r3, #2
 8008742:	d81c      	bhi.n	800877e <USBD_LL_SetupStage+0x7a>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <USBD_LL_SetupStage+0x4a>
 8008748:	2b01      	cmp	r3, #1
 800874a:	d008      	beq.n	800875e <USBD_LL_SetupStage+0x5a>
 800874c:	e017      	b.n	800877e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9ca 	bl	8008af0 <USBD_StdDevReq>
      break;
 800875c:	e01a      	b.n	8008794 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa2c 	bl	8008bc4 <USBD_StdItfReq>
      break;
 800876c:	e012      	b.n	8008794 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa6c 	bl	8008c54 <USBD_StdEPReq>
      break;
 800877c:	e00a      	b.n	8008794 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008784:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008788:	b2db      	uxtb	r3, r3
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fa43 	bl	8009c18 <USBD_LL_StallEP>
      break;
 8008792:	bf00      	nop
  }

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	460b      	mov	r3, r1
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d14b      	bne.n	800884a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d134      	bne.n	800882e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d919      	bls.n	8008804 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d203      	bcs.n	80087f2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	e002      	b.n	80087f8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 ff35 	bl	800966c <USBD_CtlContinueRx>
 8008802:	e038      	b.n	8008876 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008816:	2b03      	cmp	r3, #3
 8008818:	d105      	bne.n	8008826 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 ff32 	bl	8009690 <USBD_CtlSendStatus>
 800882c:	e023      	b.n	8008876 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008834:	2b05      	cmp	r3, #5
 8008836:	d11e      	bne.n	8008876 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f001 f9e8 	bl	8009c18 <USBD_LL_StallEP>
 8008848:	e015      	b.n	8008876 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00d      	beq.n	8008872 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800885c:	2b03      	cmp	r3, #3
 800885e:	d108      	bne.n	8008872 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	7afa      	ldrb	r2, [r7, #11]
 800886a:	4611      	mov	r1, r2
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	4798      	blx	r3
 8008870:	e001      	b.n	8008876 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008872:	2302      	movs	r3, #2
 8008874:	e000      	b.n	8008878 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d17f      	bne.n	8008994 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3314      	adds	r3, #20
 8008898:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d15c      	bne.n	800895e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d915      	bls.n	80088dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	1ad2      	subs	r2, r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 febd 	bl	8009648 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ce:	2300      	movs	r3, #0
 80088d0:	2200      	movs	r2, #0
 80088d2:	2100      	movs	r1, #0
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fa4a 	bl	8009d6e <USBD_LL_PrepareReceive>
 80088da:	e04e      	b.n	800897a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	6912      	ldr	r2, [r2, #16]
 80088e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088e8:	fb01 f202 	mul.w	r2, r1, r2
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11c      	bne.n	800892c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d316      	bcc.n	800892c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008908:	429a      	cmp	r2, r3
 800890a:	d20f      	bcs.n	800892c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fe99 	bl	8009648 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800891e:	2300      	movs	r3, #0
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f001 fa22 	bl	8009d6e <USBD_LL_PrepareReceive>
 800892a:	e026      	b.n	800897a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800893e:	2b03      	cmp	r3, #3
 8008940:	d105      	bne.n	800894e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800894e:	2180      	movs	r1, #128	@ 0x80
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f001 f961 	bl	8009c18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fead 	bl	80096b6 <USBD_CtlReceiveStatus>
 800895c:	e00d      	b.n	800897a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008964:	2b04      	cmp	r3, #4
 8008966:	d004      	beq.n	8008972 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008972:	2180      	movs	r1, #128	@ 0x80
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 f94f 	bl	8009c18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008980:	2b01      	cmp	r3, #1
 8008982:	d11d      	bne.n	80089c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff fe81 	bl	800868c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008992:	e015      	b.n	80089c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00d      	beq.n	80089bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d108      	bne.n	80089bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	7afa      	ldrb	r2, [r7, #11]
 80089b4:	4611      	mov	r1, r2
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4798      	blx	r3
 80089ba:	e001      	b.n	80089c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	e000      	b.n	80089c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089d2:	2340      	movs	r3, #64	@ 0x40
 80089d4:	2200      	movs	r2, #0
 80089d6:	2100      	movs	r1, #0
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f8d8 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2240      	movs	r2, #64	@ 0x40
 80089ea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ee:	2340      	movs	r3, #64	@ 0x40
 80089f0:	2200      	movs	r2, #0
 80089f2:	2180      	movs	r1, #128	@ 0x80
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 f8ca 	bl	8009b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2240      	movs	r2, #64	@ 0x40
 8008a04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6852      	ldr	r2, [r2, #4]
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
  }

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr

08008a6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2204      	movs	r2, #4
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr

08008a92 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d105      	bne.n	8008ab0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d10b      	bne.n	8008ae6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b06:	2b40      	cmp	r3, #64	@ 0x40
 8008b08:	d005      	beq.n	8008b16 <USBD_StdDevReq+0x26>
 8008b0a:	2b40      	cmp	r3, #64	@ 0x40
 8008b0c:	d84f      	bhi.n	8008bae <USBD_StdDevReq+0xbe>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <USBD_StdDevReq+0x36>
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d14b      	bne.n	8008bae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	4798      	blx	r3
      break;
 8008b24:	e048      	b.n	8008bb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d839      	bhi.n	8008ba2 <USBD_StdDevReq+0xb2>
 8008b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <USBD_StdDevReq+0x44>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b85 	.word	0x08008b85
 8008b38:	08008b99 	.word	0x08008b99
 8008b3c:	08008ba3 	.word	0x08008ba3
 8008b40:	08008b8f 	.word	0x08008b8f
 8008b44:	08008ba3 	.word	0x08008ba3
 8008b48:	08008b67 	.word	0x08008b67
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008ba3 	.word	0x08008ba3
 8008b54:	08008b7b 	.word	0x08008b7b
 8008b58:	08008b71 	.word	0x08008b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9dc 	bl	8008f1c <USBD_GetDescriptor>
          break;
 8008b64:	e022      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb3f 	bl	80091ec <USBD_SetAddress>
          break;
 8008b6e:	e01d      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb7e 	bl	8009274 <USBD_SetConfig>
          break;
 8008b78:	e018      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fc07 	bl	8009390 <USBD_GetConfig>
          break;
 8008b82:	e013      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fc37 	bl	80093fa <USBD_GetStatus>
          break;
 8008b8c:	e00e      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc65 	bl	8009460 <USBD_SetFeature>
          break;
 8008b96:	e009      	b.n	8008bac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fc74 	bl	8009488 <USBD_ClrFeature>
          break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fcc9 	bl	800953c <USBD_CtlError>
          break;
 8008baa:	bf00      	nop
      }
      break;
 8008bac:	e004      	b.n	8008bb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fcc3 	bl	800953c <USBD_CtlError>
      break;
 8008bb6:	bf00      	nop
  }

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop

08008bc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d005      	beq.n	8008bea <USBD_StdItfReq+0x26>
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d82e      	bhi.n	8008c40 <USBD_StdItfReq+0x7c>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <USBD_StdItfReq+0x26>
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d12a      	bne.n	8008c40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d81d      	bhi.n	8008c32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d813      	bhi.n	8008c28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	88db      	ldrh	r3, [r3, #6]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d110      	bne.n	8008c3c <USBD_StdItfReq+0x78>
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10d      	bne.n	8008c3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fd35 	bl	8009690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c26:	e009      	b.n	8008c3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc86 	bl	800953c <USBD_CtlError>
          break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fc81 	bl	800953c <USBD_CtlError>
          break;
 8008c3a:	e000      	b.n	8008c3e <USBD_StdItfReq+0x7a>
          break;
 8008c3c:	bf00      	nop
      }
      break;
 8008c3e:	e004      	b.n	8008c4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fc7a 	bl	800953c <USBD_CtlError>
      break;
 8008c48:	bf00      	nop
  }

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c70:	2b40      	cmp	r3, #64	@ 0x40
 8008c72:	d007      	beq.n	8008c84 <USBD_StdEPReq+0x30>
 8008c74:	2b40      	cmp	r3, #64	@ 0x40
 8008c76:	f200 8146 	bhi.w	8008f06 <USBD_StdEPReq+0x2b2>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <USBD_StdEPReq+0x40>
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	f040 8141 	bne.w	8008f06 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
      break;
 8008c92:	e13d      	b.n	8008f10 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d10a      	bne.n	8008cb6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	e12d      	b.n	8008f12 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d007      	beq.n	8008cce <USBD_StdEPReq+0x7a>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	f300 811b 	bgt.w	8008efa <USBD_StdEPReq+0x2a6>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d072      	beq.n	8008dae <USBD_StdEPReq+0x15a>
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d03a      	beq.n	8008d42 <USBD_StdEPReq+0xee>
 8008ccc:	e115      	b.n	8008efa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d002      	beq.n	8008cde <USBD_StdEPReq+0x8a>
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d015      	beq.n	8008d08 <USBD_StdEPReq+0xb4>
 8008cdc:	e02b      	b.n	8008d36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00c      	beq.n	8008cfe <USBD_StdEPReq+0xaa>
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b80      	cmp	r3, #128	@ 0x80
 8008ce8:	d009      	beq.n	8008cfe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 ff92 	bl	8009c18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cf4:	2180      	movs	r1, #128	@ 0x80
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 ff8e 	bl	8009c18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cfc:	e020      	b.n	8008d40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fc1b 	bl	800953c <USBD_CtlError>
              break;
 8008d06:	e01b      	b.n	8008d40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10e      	bne.n	8008d2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <USBD_StdEPReq+0xda>
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b80      	cmp	r3, #128	@ 0x80
 8008d1a:	d008      	beq.n	8008d2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	88db      	ldrh	r3, [r3, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 ff75 	bl	8009c18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fcae 	bl	8009690 <USBD_CtlSendStatus>

              break;
 8008d34:	e004      	b.n	8008d40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbff 	bl	800953c <USBD_CtlError>
              break;
 8008d3e:	bf00      	nop
          }
          break;
 8008d40:	e0e0      	b.n	8008f04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d002      	beq.n	8008d52 <USBD_StdEPReq+0xfe>
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d015      	beq.n	8008d7c <USBD_StdEPReq+0x128>
 8008d50:	e026      	b.n	8008da0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <USBD_StdEPReq+0x11e>
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b80      	cmp	r3, #128	@ 0x80
 8008d5c:	d009      	beq.n	8008d72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 ff58 	bl	8009c18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d68:	2180      	movs	r1, #128	@ 0x80
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ff54 	bl	8009c18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d70:	e01c      	b.n	8008dac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fbe1 	bl	800953c <USBD_CtlError>
              break;
 8008d7a:	e017      	b.n	8008dac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d112      	bne.n	8008daa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 ff5f 	bl	8009c56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc79 	bl	8009690 <USBD_CtlSendStatus>
              }
              break;
 8008d9e:	e004      	b.n	8008daa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fbca 	bl	800953c <USBD_CtlError>
              break;
 8008da8:	e000      	b.n	8008dac <USBD_StdEPReq+0x158>
              break;
 8008daa:	bf00      	nop
          }
          break;
 8008dac:	e0aa      	b.n	8008f04 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d002      	beq.n	8008dbe <USBD_StdEPReq+0x16a>
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d032      	beq.n	8008e22 <USBD_StdEPReq+0x1ce>
 8008dbc:	e097      	b.n	8008eee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d007      	beq.n	8008dd4 <USBD_StdEPReq+0x180>
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b80      	cmp	r3, #128	@ 0x80
 8008dc8:	d004      	beq.n	8008dd4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fbb5 	bl	800953c <USBD_CtlError>
                break;
 8008dd2:	e091      	b.n	8008ef8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da0b      	bge.n	8008df4 <USBD_StdEPReq+0x1a0>
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	3310      	adds	r3, #16
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	4413      	add	r3, r2
 8008df0:	3304      	adds	r3, #4
 8008df2:	e00b      	b.n	8008e0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	4413      	add	r3, r2
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2202      	movs	r2, #2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fbf8 	bl	8009610 <USBD_CtlSendData>
              break;
 8008e20:	e06a      	b.n	8008ef8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da11      	bge.n	8008e4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	f003 020f 	and.w	r2, r3, #15
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3318      	adds	r3, #24
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d117      	bne.n	8008e74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb78 	bl	800953c <USBD_CtlError>
                  break;
 8008e4c:	e054      	b.n	8008ef8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d104      	bne.n	8008e74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb65 	bl	800953c <USBD_CtlError>
                  break;
 8008e72:	e041      	b.n	8008ef8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	da0b      	bge.n	8008e94 <USBD_StdEPReq+0x240>
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	3310      	adds	r3, #16
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4413      	add	r3, r2
 8008e90:	3304      	adds	r3, #4
 8008e92:	e00b      	b.n	8008eac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3304      	adds	r3, #4
 8008eac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <USBD_StdEPReq+0x266>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	2b80      	cmp	r3, #128	@ 0x80
 8008eb8:	d103      	bne.n	8008ec2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	e00e      	b.n	8008ee0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fee4 	bl	8009c94 <USBD_LL_IsStallEP>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e002      	b.n	8008ee0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fb92 	bl	8009610 <USBD_CtlSendData>
              break;
 8008eec:	e004      	b.n	8008ef8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fb23 	bl	800953c <USBD_CtlError>
              break;
 8008ef6:	bf00      	nop
          }
          break;
 8008ef8:	e004      	b.n	8008f04 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fb1d 	bl	800953c <USBD_CtlError>
          break;
 8008f02:	bf00      	nop
      }
      break;
 8008f04:	e004      	b.n	8008f10 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fb17 	bl	800953c <USBD_CtlError>
      break;
 8008f0e:	bf00      	nop
  }

  return ret;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	2b06      	cmp	r3, #6
 8008f3e:	f200 8128 	bhi.w	8009192 <USBD_GetDescriptor+0x276>
 8008f42:	a201      	add	r2, pc, #4	@ (adr r2, 8008f48 <USBD_GetDescriptor+0x2c>)
 8008f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f48:	08008f65 	.word	0x08008f65
 8008f4c:	08008f7d 	.word	0x08008f7d
 8008f50:	08008fbd 	.word	0x08008fbd
 8008f54:	08009193 	.word	0x08009193
 8008f58:	08009193 	.word	0x08009193
 8008f5c:	08009133 	.word	0x08009133
 8008f60:	0800915f 	.word	0x0800915f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
      break;
 8008f7a:	e112      	b.n	80091a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7c1b      	ldrb	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10d      	bne.n	8008fa0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8c:	f107 0208 	add.w	r2, r7, #8
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f9e:	e100      	b.n	80091a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	f107 0208 	add.w	r2, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]
      break;
 8008fba:	e0f2      	b.n	80091a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b05      	cmp	r3, #5
 8008fc4:	f200 80ac 	bhi.w	8009120 <USBD_GetDescriptor+0x204>
 8008fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <USBD_GetDescriptor+0xb4>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	0800901d 	.word	0x0800901d
 8008fd8:	08009051 	.word	0x08009051
 8008fdc:	08009085 	.word	0x08009085
 8008fe0:	080090b9 	.word	0x080090b9
 8008fe4:	080090ed 	.word	0x080090ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900a:	e091      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa94 	bl	800953c <USBD_CtlError>
            err++;
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	3301      	adds	r3, #1
 8009018:	72fb      	strb	r3, [r7, #11]
          break;
 800901a:	e089      	b.n	8009130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7c12      	ldrb	r2, [r2, #16]
 8009034:	f107 0108 	add.w	r1, r7, #8
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903e:	e077      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa7a 	bl	800953c <USBD_CtlError>
            err++;
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	3301      	adds	r3, #1
 800904c:	72fb      	strb	r3, [r7, #11]
          break;
 800904e:	e06f      	b.n	8009130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009072:	e05d      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa60 	bl	800953c <USBD_CtlError>
            err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
          break;
 8009082:	e055      	b.n	8009130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a6:	e043      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa46 	bl	800953c <USBD_CtlError>
            err++;
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	3301      	adds	r3, #1
 80090b4:	72fb      	strb	r3, [r7, #11]
          break;
 80090b6:	e03b      	b.n	8009130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090da:	e029      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa2c 	bl	800953c <USBD_CtlError>
            err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ea:	e021      	b.n	8009130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e00f      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa12 	bl	800953c <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e007      	b.n	8009130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa0a 	bl	800953c <USBD_CtlError>
          err++;
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	3301      	adds	r3, #1
 800912c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800912e:	e038      	b.n	80091a2 <USBD_GetDescriptor+0x286>
 8009130:	e037      	b.n	80091a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7c1b      	ldrb	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009142:	f107 0208 	add.w	r2, r7, #8
 8009146:	4610      	mov	r0, r2
 8009148:	4798      	blx	r3
 800914a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800914c:	e029      	b.n	80091a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9f3 	bl	800953c <USBD_CtlError>
        err++;
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	3301      	adds	r3, #1
 800915a:	72fb      	strb	r3, [r7, #11]
      break;
 800915c:	e021      	b.n	80091a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7c1b      	ldrb	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10d      	bne.n	8009182 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	f107 0208 	add.w	r2, r7, #8
 8009172:	4610      	mov	r0, r2
 8009174:	4798      	blx	r3
 8009176:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	2207      	movs	r2, #7
 800917e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009180:	e00f      	b.n	80091a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9d9 	bl	800953c <USBD_CtlError>
        err++;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	3301      	adds	r3, #1
 800918e:	72fb      	strb	r3, [r7, #11]
      break;
 8009190:	e007      	b.n	80091a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f9d1 	bl	800953c <USBD_CtlError>
      err++;
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	3301      	adds	r3, #1
 800919e:	72fb      	strb	r3, [r7, #11]
      break;
 80091a0:	bf00      	nop
  }

  if (err != 0U)
 80091a2:	7afb      	ldrb	r3, [r7, #11]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d11c      	bne.n	80091e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091a8:	893b      	ldrh	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d011      	beq.n	80091d2 <USBD_GetDescriptor+0x2b6>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	88db      	ldrh	r3, [r3, #6]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	88da      	ldrh	r2, [r3, #6]
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bf28      	it	cs
 80091c0:	4613      	movcs	r3, r2
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091c6:	893b      	ldrh	r3, [r7, #8]
 80091c8:	461a      	mov	r2, r3
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa1f 	bl	8009610 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	88db      	ldrh	r3, [r3, #6]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa58 	bl	8009690 <USBD_CtlSendStatus>
 80091e0:	e000      	b.n	80091e4 <USBD_GetDescriptor+0x2c8>
    return;
 80091e2:	bf00      	nop
    }
  }
}
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop

080091ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	889b      	ldrh	r3, [r3, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d130      	bne.n	8009260 <USBD_SetAddress+0x74>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	88db      	ldrh	r3, [r3, #6]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d12c      	bne.n	8009260 <USBD_SetAddress+0x74>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	2b7f      	cmp	r3, #127	@ 0x7f
 800920c:	d828      	bhi.n	8009260 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	885b      	ldrh	r3, [r3, #2]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009218:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009220:	2b03      	cmp	r3, #3
 8009222:	d104      	bne.n	800922e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f988 	bl	800953c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922c:	e01d      	b.n	800926a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7bfa      	ldrb	r2, [r7, #15]
 8009232:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fd55 	bl	8009cea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fa25 	bl	8009690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	e009      	b.n	800926a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	e004      	b.n	800926a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f96a 	bl	800953c <USBD_CtlError>
  }
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	885b      	ldrh	r3, [r3, #2]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	4b41      	ldr	r3, [pc, #260]	@ (800938c <USBD_SetConfig+0x118>)
 8009286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009288:	4b40      	ldr	r3, [pc, #256]	@ (800938c <USBD_SetConfig+0x118>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d904      	bls.n	800929a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f952 	bl	800953c <USBD_CtlError>
 8009298:	e075      	b.n	8009386 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d002      	beq.n	80092aa <USBD_SetConfig+0x36>
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d023      	beq.n	80092f0 <USBD_SetConfig+0x7c>
 80092a8:	e062      	b.n	8009370 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092aa:	4b38      	ldr	r3, [pc, #224]	@ (800938c <USBD_SetConfig+0x118>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d01a      	beq.n	80092e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092b2:	4b36      	ldr	r3, [pc, #216]	@ (800938c <USBD_SetConfig+0x118>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2203      	movs	r2, #3
 80092c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092c4:	4b31      	ldr	r3, [pc, #196]	@ (800938c <USBD_SetConfig+0x118>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff f9e8 	bl	80086a0 <USBD_SetClassConfig>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d104      	bne.n	80092e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f92f 	bl	800953c <USBD_CtlError>
            return;
 80092de:	e052      	b.n	8009386 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9d5 	bl	8009690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092e6:	e04e      	b.n	8009386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f9d1 	bl	8009690 <USBD_CtlSendStatus>
        break;
 80092ee:	e04a      	b.n	8009386 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80092f0:	4b26      	ldr	r3, [pc, #152]	@ (800938c <USBD_SetConfig+0x118>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d112      	bne.n	800931e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009300:	4b22      	ldr	r3, [pc, #136]	@ (800938c <USBD_SetConfig+0x118>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800930a:	4b20      	ldr	r3, [pc, #128]	@ (800938c <USBD_SetConfig+0x118>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff f9e4 	bl	80086de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9ba 	bl	8009690 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800931c:	e033      	b.n	8009386 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800931e:	4b1b      	ldr	r3, [pc, #108]	@ (800938c <USBD_SetConfig+0x118>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d01d      	beq.n	8009368 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff f9d2 	bl	80086de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800933a:	4b14      	ldr	r3, [pc, #80]	@ (800938c <USBD_SetConfig+0x118>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009344:	4b11      	ldr	r3, [pc, #68]	@ (800938c <USBD_SetConfig+0x118>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff f9a8 	bl	80086a0 <USBD_SetClassConfig>
 8009350:	4603      	mov	r3, r0
 8009352:	2b02      	cmp	r3, #2
 8009354:	d104      	bne.n	8009360 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f8ef 	bl	800953c <USBD_CtlError>
            return;
 800935e:	e012      	b.n	8009386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f995 	bl	8009690 <USBD_CtlSendStatus>
        break;
 8009366:	e00e      	b.n	8009386 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f991 	bl	8009690 <USBD_CtlSendStatus>
        break;
 800936e:	e00a      	b.n	8009386 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8e2 	bl	800953c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009378:	4b04      	ldr	r3, [pc, #16]	@ (800938c <USBD_SetConfig+0x118>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff f9ad 	bl	80086de <USBD_ClrClassConfig>
        break;
 8009384:	bf00      	nop
    }
  }
}
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000350 	.word	0x20000350

08009390 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	88db      	ldrh	r3, [r3, #6]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d004      	beq.n	80093ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8c9 	bl	800953c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093aa:	e022      	b.n	80093f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	dc02      	bgt.n	80093bc <USBD_GetConfig+0x2c>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dc03      	bgt.n	80093c2 <USBD_GetConfig+0x32>
 80093ba:	e015      	b.n	80093e8 <USBD_GetConfig+0x58>
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d00b      	beq.n	80093d8 <USBD_GetConfig+0x48>
 80093c0:	e012      	b.n	80093e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3308      	adds	r3, #8
 80093cc:	2201      	movs	r2, #1
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f91d 	bl	8009610 <USBD_CtlSendData>
        break;
 80093d6:	e00c      	b.n	80093f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3304      	adds	r3, #4
 80093dc:	2201      	movs	r2, #1
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f915 	bl	8009610 <USBD_CtlSendData>
        break;
 80093e6:	e004      	b.n	80093f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f8a6 	bl	800953c <USBD_CtlError>
        break;
 80093f0:	bf00      	nop
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800940a:	3b01      	subs	r3, #1
 800940c:	2b02      	cmp	r3, #2
 800940e:	d81e      	bhi.n	800944e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	88db      	ldrh	r3, [r3, #6]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d004      	beq.n	8009422 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f88e 	bl	800953c <USBD_CtlError>
        break;
 8009420:	e01a      	b.n	8009458 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f043 0202 	orr.w	r2, r3, #2
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	330c      	adds	r3, #12
 8009442:	2202      	movs	r2, #2
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8e2 	bl	8009610 <USBD_CtlSendData>
      break;
 800944c:	e004      	b.n	8009458 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f873 	bl	800953c <USBD_CtlError>
      break;
 8009456:	bf00      	nop
  }
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d106      	bne.n	8009480 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f908 	bl	8009690 <USBD_CtlSendStatus>
  }
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	3b01      	subs	r3, #1
 800949a:	2b02      	cmp	r3, #2
 800949c:	d80b      	bhi.n	80094b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d10c      	bne.n	80094c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8ee 	bl	8009690 <USBD_CtlSendStatus>
      }
      break;
 80094b4:	e004      	b.n	80094c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f83f 	bl	800953c <USBD_CtlError>
      break;
 80094be:	e000      	b.n	80094c2 <USBD_ClrFeature+0x3a>
      break;
 80094c0:	bf00      	nop
  }
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	785a      	ldrb	r2, [r3, #1]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	3302      	adds	r3, #2
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	3303      	adds	r3, #3
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4413      	add	r3, r2
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	3304      	adds	r3, #4
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3305      	adds	r3, #5
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	b29b      	uxth	r3, r3
 8009510:	4413      	add	r3, r2
 8009512:	b29a      	uxth	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	3306      	adds	r3, #6
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	3307      	adds	r3, #7
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	b29b      	uxth	r3, r3
 800952a:	4413      	add	r3, r2
 800952c:	b29a      	uxth	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	80da      	strh	r2, [r3, #6]

}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009546:	2180      	movs	r1, #128	@ 0x80
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fb65 	bl	8009c18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800954e:	2100      	movs	r1, #0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fb61 	bl	8009c18 <USBD_LL_StallEP>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d032      	beq.n	80095da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f834 	bl	80095e2 <USBD_GetLen>
 800957a:	4603      	mov	r3, r0
 800957c:	3301      	adds	r3, #1
 800957e:	b29b      	uxth	r3, r3
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	75fa      	strb	r2, [r7, #23]
 800958e:	461a      	mov	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4413      	add	r3, r2
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	75fa      	strb	r2, [r7, #23]
 80095a0:	461a      	mov	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4413      	add	r3, r2
 80095a6:	2203      	movs	r2, #3
 80095a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095aa:	e012      	b.n	80095d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	60fa      	str	r2, [r7, #12]
 80095b2:	7dfa      	ldrb	r2, [r7, #23]
 80095b4:	1c51      	adds	r1, r2, #1
 80095b6:	75f9      	strb	r1, [r7, #23]
 80095b8:	4611      	mov	r1, r2
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	440a      	add	r2, r1
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	75fa      	strb	r2, [r7, #23]
 80095c8:	461a      	mov	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e8      	bne.n	80095ac <USBD_GetString+0x4e>
    }
  }
}
 80095da:	bf00      	nop
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80095ee:	e005      	b.n	80095fc <USBD_GetLen+0x1a>
  {
    len++;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	3301      	adds	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3301      	adds	r3, #1
 80095fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f5      	bne.n	80095f0 <USBD_GetLen+0xe>
  }

  return len;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2202      	movs	r2, #2
 8009622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009626:	88fa      	ldrh	r2, [r7, #6]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800962c:	88fa      	ldrh	r2, [r7, #6]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	2100      	movs	r1, #0
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fb75 	bl	8009d28 <USBD_LL_Transmit>

  return USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	2100      	movs	r1, #0
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 fb63 	bl	8009d28 <USBD_LL_Transmit>

  return USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	2100      	movs	r1, #0
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fb74 	bl	8009d6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2204      	movs	r2, #4
 800969c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb3e 	bl	8009d28 <USBD_LL_Transmit>

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2205      	movs	r2, #5
 80096c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096c6:	2300      	movs	r3, #0
 80096c8:	2200      	movs	r2, #0
 80096ca:	2100      	movs	r1, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb4e 	bl	8009d6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096e0:	2200      	movs	r2, #0
 80096e2:	490e      	ldr	r1, [pc, #56]	@ (800971c <MX_USB_DEVICE_Init+0x40>)
 80096e4:	480e      	ldr	r0, [pc, #56]	@ (8009720 <MX_USB_DEVICE_Init+0x44>)
 80096e6:	f7fe ff81 	bl	80085ec <USBD_Init>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096f0:	f7f7 fa04 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80096f4:	490b      	ldr	r1, [pc, #44]	@ (8009724 <MX_USB_DEVICE_Init+0x48>)
 80096f6:	480a      	ldr	r0, [pc, #40]	@ (8009720 <MX_USB_DEVICE_Init+0x44>)
 80096f8:	f7fe ffa3 	bl	8008642 <USBD_RegisterClass>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009702:	f7f7 f9fb 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009706:	4806      	ldr	r0, [pc, #24]	@ (8009720 <MX_USB_DEVICE_Init+0x44>)
 8009708:	f7fe ffb4 	bl	8008674 <USBD_Start>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009712:	f7f7 f9f3 	bl	8000afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009716:	bf00      	nop
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200000e4 	.word	0x200000e4
 8009720:	20000354 	.word	0x20000354
 8009724:	2000000c 	.word	0x2000000c

08009728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2212      	movs	r2, #18
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000100 	.word	0x20000100

0800974c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2204      	movs	r2, #4
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800975e:	4b03      	ldr	r3, [pc, #12]	@ (800976c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000114 	.word	0x20000114

08009770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009788:	f7ff fee9 	bl	800955e <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009794:	f7ff fee3 	bl	800955e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000618 	.word	0x20000618
 80097a8:	08009ebc 	.word	0x08009ebc

080097ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4904      	ldr	r1, [pc, #16]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097bc:	4804      	ldr	r0, [pc, #16]	@ (80097d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097be:	f7ff fece 	bl	800955e <USBD_GetString>
  return USBD_StrDesc;
 80097c2:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000618 	.word	0x20000618
 80097d0:	08009ed4 	.word	0x08009ed4

080097d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	221a      	movs	r2, #26
 80097e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097e6:	f000 f843 	bl	8009870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ea:	4b02      	ldr	r3, [pc, #8]	@ (80097f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000118 	.word	0x20000118

080097f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009810:	f7ff fea5 	bl	800955e <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800981c:	f7ff fe9f 	bl	800955e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000618 	.word	0x20000618
 8009830:	08009ee8 	.word	0x08009ee8

08009834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800984c:	f7ff fe87 	bl	800955e <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009858:	f7ff fe81 	bl	800955e <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000618 	.word	0x20000618
 800986c:	08009ef4 	.word	0x08009ef4

08009870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009876:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <Get_SerialNum+0x44>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <Get_SerialNum+0x48>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009882:	4b0e      	ldr	r3, [pc, #56]	@ (80098bc <Get_SerialNum+0x4c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009896:	2208      	movs	r2, #8
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <Get_SerialNum+0x50>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f814 	bl	80098c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a0:	2204      	movs	r2, #4
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <Get_SerialNum+0x54>)
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 f80f 	bl	80098c8 <IntToUnicode>
  }
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	1ffff7e8 	.word	0x1ffff7e8
 80098b8:	1ffff7ec 	.word	0x1ffff7ec
 80098bc:	1ffff7f0 	.word	0x1ffff7f0
 80098c0:	2000011a 	.word	0x2000011a
 80098c4:	2000012a 	.word	0x2000012a

080098c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e027      	b.n	8009930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80b      	bhi.n	8009900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4619      	mov	r1, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	440b      	add	r3, r1
 80098f8:	3230      	adds	r2, #48	@ 0x30
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e00a      	b.n	8009916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3237      	adds	r2, #55	@ 0x37
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	3301      	adds	r3, #1
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	3301      	adds	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d3      	bcc.n	80098e0 <IntToUnicode+0x18>
  }
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0d      	ldr	r2, [pc, #52]	@ (8009988 <HAL_PCD_MspInit+0x44>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d113      	bne.n	800997e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009956:	4b0d      	ldr	r3, [pc, #52]	@ (800998c <HAL_PCD_MspInit+0x48>)
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	4a0c      	ldr	r2, [pc, #48]	@ (800998c <HAL_PCD_MspInit+0x48>)
 800995c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009960:	61d3      	str	r3, [r2, #28]
 8009962:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <HAL_PCD_MspInit+0x48>)
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	2014      	movs	r0, #20
 8009974:	f7f8 f8a9 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009978:	2014      	movs	r0, #20
 800997a:	f7f8 f8c2 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40005c00 	.word	0x40005c00
 800998c:	40021000 	.word	0x40021000

08009990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7fe feac 	bl	8008704 <USBD_LL_SetupStage>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	440b      	add	r3, r1
 80099d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	4619      	mov	r1, r3
 80099de:	f7fe fede 	bl	800879e <USBD_LL_DataOutStage>
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	3324      	adds	r3, #36	@ 0x24
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	4619      	mov	r1, r3
 8009a12:	f7fe ff35 	bl	8008880 <USBD_LL_DataInStage>
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff f845 	bl	8008abc <USBD_LL_SOF>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	799b      	ldrb	r3, [r3, #6]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d001      	beq.n	8009a52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a4e:	f7f7 f855 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe fff5 	bl	8008a4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe ffae 	bl	80089ca <USBD_LL_Reset>
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe ffef 	bl	8008a6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7a9b      	ldrb	r3, [r3, #10]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a94:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <HAL_PCD_SuspendCallback+0x30>)
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	4a03      	ldr	r2, [pc, #12]	@ (8009aa8 <HAL_PCD_SuspendCallback+0x30>)
 8009a9a:	f043 0306 	orr.w	r3, r3, #6
 8009a9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	e000ed00 	.word	0xe000ed00

08009aac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe ffe9 	bl	8008a92 <USBD_LL_Resume>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a1d      	ldr	r2, [pc, #116]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009adc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b54 <USBD_LL_Init+0x8c>)
 8009ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009ae8:	2208      	movs	r2, #8
 8009aea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009aec:	4b18      	ldr	r3, [pc, #96]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009aee:	2202      	movs	r2, #2
 8009af0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009af2:	4b17      	ldr	r3, [pc, #92]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009af8:	4b15      	ldr	r3, [pc, #84]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009afe:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b04:	4812      	ldr	r0, [pc, #72]	@ (8009b50 <USBD_LL_Init+0x88>)
 8009b06:	f7f9 fa30 	bl	8002f6a <HAL_PCD_Init>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b10:	f7f6 fff4 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b1a:	2318      	movs	r3, #24
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f7fa ff2a 	bl	8004978 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b2a:	2358      	movs	r3, #88	@ 0x58
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2180      	movs	r1, #128	@ 0x80
 8009b30:	f7fa ff22 	bl	8004978 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2181      	movs	r1, #129	@ 0x81
 8009b42:	f7fa ff19 	bl	8004978 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000818 	.word	0x20000818
 8009b54:	40005c00 	.word	0x40005c00

08009b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f9 faf1 	bl	8003156 <HAL_PCD_Start>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f93a 	bl	8009df4 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	70fb      	strb	r3, [r7, #3]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70bb      	strb	r3, [r7, #2]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bb6:	78bb      	ldrb	r3, [r7, #2]
 8009bb8:	883a      	ldrh	r2, [r7, #0]
 8009bba:	78f9      	ldrb	r1, [r7, #3]
 8009bbc:	f7f9 fc45 	bl	800344a <HAL_PCD_EP_Open>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f914 	bl	8009df4 <USBD_Get_USB_Status>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7f9 fc83 	bl	8003504 <HAL_PCD_EP_Close>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f8f5 	bl	8009df4 <USBD_Get_USB_Status>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f9 fd14 	bl	8003664 <HAL_PCD_EP_SetStall>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f8d6 	bl	8009df4 <USBD_Get_USB_Status>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7f9 fd55 	bl	8003724 <HAL_PCD_EP_ClrStall>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f8b7 	bl	8009df4 <USBD_Get_USB_Status>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da0b      	bge.n	8009cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	3312      	adds	r3, #18
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	e00b      	b.n	8009ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr

08009cea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7f9 fb7a 	bl	8003402 <HAL_PCD_SetAddress>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f86d 	bl	8009df4 <USBD_Get_USB_Status>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	461a      	mov	r2, r3
 8009d34:	460b      	mov	r3, r1
 8009d36:	72fb      	strb	r3, [r7, #11]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d4a:	893b      	ldrh	r3, [r7, #8]
 8009d4c:	7af9      	ldrb	r1, [r7, #11]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	f7f9 fc51 	bl	80035f6 <HAL_PCD_EP_Transmit>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f84a 	bl	8009df4 <USBD_Get_USB_Status>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	72fb      	strb	r3, [r7, #11]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d90:	893b      	ldrh	r3, [r7, #8]
 8009d92:	7af9      	ldrb	r1, [r7, #11]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f7f9 fbfd 	bl	8003594 <HAL_PCD_EP_Receive>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f827 	bl	8009df4 <USBD_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009daa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	@ (8009dc8 <USBD_static_malloc+0x14>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr
 8009dc8:	20000af0 	.word	0x20000af0

08009dcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr

08009dde <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bc80      	pop	{r7}
 8009df2:	4770      	bx	lr

08009df4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d817      	bhi.n	8009e38 <USBD_Get_USB_Status+0x44>
 8009e08:	a201      	add	r2, pc, #4	@ (adr r2, 8009e10 <USBD_Get_USB_Status+0x1c>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e21 	.word	0x08009e21
 8009e14:	08009e27 	.word	0x08009e27
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e33 	.word	0x08009e33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
    break;
 8009e24:	e00b      	b.n	8009e3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e26:	2302      	movs	r3, #2
 8009e28:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2a:	e008      	b.n	8009e3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e30:	e005      	b.n	8009e3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e32:	2302      	movs	r3, #2
 8009e34:	73fb      	strb	r3, [r7, #15]
    break;
 8009e36:	e002      	b.n	8009e3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3c:	bf00      	nop
  }
  return usb_status;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop

08009e4c <memset>:
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4402      	add	r2, r0
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memset+0xa>
 8009e54:	4770      	bx	lr
 8009e56:	f803 1b01 	strb.w	r1, [r3], #1
 8009e5a:	e7f9      	b.n	8009e50 <memset+0x4>

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	2600      	movs	r6, #0
 8009e60:	4d0c      	ldr	r5, [pc, #48]	@ (8009e94 <__libc_init_array+0x38>)
 8009e62:	4c0d      	ldr	r4, [pc, #52]	@ (8009e98 <__libc_init_array+0x3c>)
 8009e64:	1b64      	subs	r4, r4, r5
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	42a6      	cmp	r6, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	f000 f81a 	bl	8009ea4 <_init>
 8009e70:	2600      	movs	r6, #0
 8009e72:	4d0a      	ldr	r5, [pc, #40]	@ (8009e9c <__libc_init_array+0x40>)
 8009e74:	4c0a      	ldr	r4, [pc, #40]	@ (8009ea0 <__libc_init_array+0x44>)
 8009e76:	1b64      	subs	r4, r4, r5
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e84:	4798      	blx	r3
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8e:	4798      	blx	r3
 8009e90:	3601      	adds	r6, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	08009f44 	.word	0x08009f44
 8009e98:	08009f44 	.word	0x08009f44
 8009e9c:	08009f44 	.word	0x08009f44
 8009ea0:	08009f48 	.word	0x08009f48

08009ea4 <_init>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr

08009eb0 <_fini>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr
