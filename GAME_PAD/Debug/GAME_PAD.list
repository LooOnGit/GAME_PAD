
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001810  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800191c  0800191c  0000291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001948  08001948  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001948  08001948  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001948  08001948  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001948  08001948  00002948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800194c  0800194c  0000294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001950  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  0800195c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  0800195c  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a1e  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011e6  00000000  00000000  00008a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00009c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000508  00000000  00000000  0000a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001669a  00000000  00000000  0000a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000885e  00000000  00000000  00020e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081634  00000000  00000000  000296d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aad04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a18  00000000  00000000  000aad48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ac760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001904 	.word	0x08001904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001904 	.word	0x08001904

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9bd 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f89f 	bl	800029c <MX_GPIO_Init>
  MX_I2C2_Init();
 800015e:	f000 f86f 	bl	8000240 <MX_I2C2_Init>
//	  HAL_Delay(1000);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
//	  HAL_Delay(1000);
//      I2C_Scan_LED();
//      HAL_Delay(800);
      int found = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
            for(uint16_t i2c=1; i2c<128; i2c++)
 8000166:	2301      	movs	r3, #1
 8000168:	807b      	strh	r3, [r7, #2]
 800016a:	e016      	b.n	800019a <main+0x4e>
            {
                if (HAL_I2C_IsDeviceReady(&hi2c2, i2c<<1, 5, 100) == HAL_OK)
 800016c:	887b      	ldrh	r3, [r7, #2]
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	b299      	uxth	r1, r3
 8000172:	2364      	movs	r3, #100	@ 0x64
 8000174:	2205      	movs	r2, #5
 8000176:	480e      	ldr	r0, [pc, #56]	@ (80001b0 <main+0x64>)
 8000178:	f000 fdf4 	bl	8000d64 <HAL_I2C_IsDeviceReady>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d105      	bne.n	800018e <main+0x42>
                {
                	found = 1;
 8000182:	2301      	movs	r3, #1
 8000184:	607b      	str	r3, [r7, #4]
                    HAL_Delay(500);
 8000186:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800018a:	f000 fa03 	bl	8000594 <HAL_Delay>
                 }
                 HAL_Delay(5);
 800018e:	2005      	movs	r0, #5
 8000190:	f000 fa00 	bl	8000594 <HAL_Delay>
            for(uint16_t i2c=1; i2c<128; i2c++)
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	3301      	adds	r3, #1
 8000198:	807b      	strh	r3, [r7, #2]
 800019a:	887b      	ldrh	r3, [r7, #2]
 800019c:	2b7f      	cmp	r3, #127	@ 0x7f
 800019e:	d9e5      	bls.n	800016c <main+0x20>
             }
             if (!found)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d1dd      	bne.n	8000162 <main+0x16>
             {
                  HAL_Delay(500);
 80001a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001aa:	f000 f9f3 	bl	8000594 <HAL_Delay>
  {
 80001ae:	e7d8      	b.n	8000162 <main+0x16>
 80001b0:	20000028 	.word	0x20000028

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	@ 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fb72 	bl	80018ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 ff59 	bl	80010b4 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f892 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f9c6 	bl	80015b8 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f87d 	bl	8000330 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	@ 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000246:	4a13      	ldr	r2, [pc, #76]	@ (8000294 <MX_I2C2_Init+0x54>)
 8000248:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800024a:	4b11      	ldr	r3, [pc, #68]	@ (8000290 <MX_I2C2_Init+0x50>)
 800024c:	4a12      	ldr	r2, [pc, #72]	@ (8000298 <MX_I2C2_Init+0x58>)
 800024e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000250:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000256:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <MX_I2C2_Init+0x50>)
 800025e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000262:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000264:	4b0a      	ldr	r3, [pc, #40]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800026a:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <MX_I2C2_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000276:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <MX_I2C2_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800027c:	4804      	ldr	r0, [pc, #16]	@ (8000290 <MX_I2C2_Init+0x50>)
 800027e:	f000 fc2d 	bl	8000adc <HAL_I2C_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000288:	f000 f852 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000028 	.word	0x20000028
 8000294:	40005800 	.word	0x40005800
 8000298:	000186a0 	.word	0x000186a0

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2102      	movs	r1, #2
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_GPIO_Init+0x90>)
 80002fe:	f000 fbd5 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000302:	2302      	movs	r3, #2
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	4619      	mov	r1, r3
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_GPIO_Init+0x90>)
 800031a:	f000 fa43 	bl	80007a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40010c00 	.word	0x40010c00

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	@ (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a16      	ldr	r2, [pc, #88]	@ (8000414 <HAL_I2C_MspInit+0x74>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d124      	bne.n	800040a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80003d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80003dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003de:	2312      	movs	r3, #18
 80003e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	480b      	ldr	r0, [pc, #44]	@ (800041c <HAL_I2C_MspInit+0x7c>)
 80003ee:	f000 f9d9 	bl	80007a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 80003f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_I2C_MspInit+0x78>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40005800 	.word	0x40005800
 8000418:	40021000 	.word	0x40021000
 800041c:	40010c00 	.word	0x40010c00

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <NMI_Handler+0x4>

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <HardFault_Handler+0x4>

08000430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <MemManage_Handler+0x4>

08000438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <UsageFault_Handler+0x4>

08000448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000470:	f000 f874 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000484:	f7ff fff8 	bl	8000478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800048a:	490c      	ldr	r1, [pc, #48]	@ (80004bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800048c:	4a0c      	ldr	r2, [pc, #48]	@ (80004c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004a0:	4c09      	ldr	r4, [pc, #36]	@ (80004c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ae:	f001 fa05 	bl	80018bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff fe4b 	bl	800014c <main>
  bx lr
 80004b6:	4770      	bx	lr
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	08001950 	.word	0x08001950
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	20000080 	.word	0x20000080

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <HAL_Init+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <HAL_Init+0x28>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 f92b 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f808 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ec:	f7ff ff26 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <HAL_InitTick+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <HAL_InitTick+0x58>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f935 	bl	800078a <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e00e      	b.n	8000548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d80a      	bhi.n	8000546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f90b 	bl	8000752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <HAL_InitTick+0x5c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000008 	.word	0x20000008
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_IncTick+0x1c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b05      	ldr	r3, [pc, #20]	@ (800057c <HAL_IncTick+0x20>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a03      	ldr	r2, [pc, #12]	@ (800057c <HAL_IncTick+0x20>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000008 	.word	0x20000008
 800057c:	2000007c 	.word	0x2000007c

08000580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b02      	ldr	r3, [pc, #8]	@ (8000590 <HAL_GetTick+0x10>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	2000007c 	.word	0x2000007c

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff fff0 	bl	8000580 <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d005      	beq.n	80005ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <HAL_Delay+0x44>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4413      	add	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ba:	bf00      	nop
 80005bc:	f7ff ffe0 	bl	8000580 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8f7      	bhi.n	80005bc <HAL_Delay+0x28>
  {
  }
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db0a      	blt.n	800066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	490c      	ldr	r1, [pc, #48]	@ (800068c <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	440b      	add	r3, r1
 8000664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000668:	e00a      	b.n	8000680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4908      	ldr	r1, [pc, #32]	@ (8000690 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	0112      	lsls	r2, r2, #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	440b      	add	r3, r1
 800067e:	761a      	strb	r2, [r3, #24]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	@ 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	401a      	ands	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43d9      	mvns	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f7ff ff90 	bl	8000640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff49 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff5e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff90 	bl	8000694 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5f 	bl	8000640 <__NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffb0 	bl	80006f8 <SysTick_Config>
 8000798:	4603      	mov	r3, r0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b08b      	sub	sp, #44	@ 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b6:	e169      	b.n	8000a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007b8:	2201      	movs	r2, #1
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	4013      	ands	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f040 8158 	bne.w	8000a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a9a      	ldr	r2, [pc, #616]	@ (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d05e      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007e0:	4a98      	ldr	r2, [pc, #608]	@ (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d875      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007e6:	4a98      	ldr	r2, [pc, #608]	@ (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d058      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007ec:	4a96      	ldr	r2, [pc, #600]	@ (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d86f      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007f2:	4a96      	ldr	r2, [pc, #600]	@ (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d052      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007f8:	4a94      	ldr	r2, [pc, #592]	@ (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d869      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007fe:	4a94      	ldr	r2, [pc, #592]	@ (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d04c      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000804:	4a92      	ldr	r2, [pc, #584]	@ (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d863      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800080a:	4a92      	ldr	r2, [pc, #584]	@ (8000a54 <HAL_GPIO_Init+0x2b0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d046      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000810:	4a90      	ldr	r2, [pc, #576]	@ (8000a54 <HAL_GPIO_Init+0x2b0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d85d      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 8000816:	2b12      	cmp	r3, #18
 8000818:	d82a      	bhi.n	8000870 <HAL_GPIO_Init+0xcc>
 800081a:	2b12      	cmp	r3, #18
 800081c:	d859      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800081e:	a201      	add	r2, pc, #4	@ (adr r2, 8000824 <HAL_GPIO_Init+0x80>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	0800089f 	.word	0x0800089f
 8000828:	08000879 	.word	0x08000879
 800082c:	0800088b 	.word	0x0800088b
 8000830:	080008cd 	.word	0x080008cd
 8000834:	080008d3 	.word	0x080008d3
 8000838:	080008d3 	.word	0x080008d3
 800083c:	080008d3 	.word	0x080008d3
 8000840:	080008d3 	.word	0x080008d3
 8000844:	080008d3 	.word	0x080008d3
 8000848:	080008d3 	.word	0x080008d3
 800084c:	080008d3 	.word	0x080008d3
 8000850:	080008d3 	.word	0x080008d3
 8000854:	080008d3 	.word	0x080008d3
 8000858:	080008d3 	.word	0x080008d3
 800085c:	080008d3 	.word	0x080008d3
 8000860:	080008d3 	.word	0x080008d3
 8000864:	080008d3 	.word	0x080008d3
 8000868:	08000881 	.word	0x08000881
 800086c:	08000895 	.word	0x08000895
 8000870:	4a79      	ldr	r2, [pc, #484]	@ (8000a58 <HAL_GPIO_Init+0x2b4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d013      	beq.n	800089e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000876:	e02c      	b.n	80008d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e029      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	3304      	adds	r3, #4
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e024      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	3308      	adds	r3, #8
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e01f      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	330c      	adds	r3, #12
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e01a      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008a6:	2304      	movs	r3, #4
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e013      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d105      	bne.n	80008c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	611a      	str	r2, [r3, #16]
          break;
 80008be:	e009      	b.n	80008d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c0:	2308      	movs	r3, #8
 80008c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	615a      	str	r2, [r3, #20]
          break;
 80008ca:	e003      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e000      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          break;
 80008d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	@ 0xff
 80008d8:	d801      	bhi.n	80008de <HAL_GPIO_Init+0x13a>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	e001      	b.n	80008e2 <HAL_GPIO_Init+0x13e>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3304      	adds	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2bff      	cmp	r3, #255	@ 0xff
 80008e8:	d802      	bhi.n	80008f0 <HAL_GPIO_Init+0x14c>
 80008ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	e002      	b.n	80008f6 <HAL_GPIO_Init+0x152>
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	3b08      	subs	r3, #8
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	210f      	movs	r1, #15
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	401a      	ands	r2, r3
 8000908:	6a39      	ldr	r1, [r7, #32]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	431a      	orrs	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80b1 	beq.w	8000a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000924:	4b4d      	ldr	r3, [pc, #308]	@ (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a4c      	ldr	r2, [pc, #304]	@ (8000a5c <HAL_GPIO_Init+0x2b8>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800093c:	4a48      	ldr	r2, [pc, #288]	@ (8000a60 <HAL_GPIO_Init+0x2bc>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a40      	ldr	r2, [pc, #256]	@ (8000a64 <HAL_GPIO_Init+0x2c0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d013      	beq.n	8000990 <HAL_GPIO_Init+0x1ec>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a68 <HAL_GPIO_Init+0x2c4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d00d      	beq.n	800098c <HAL_GPIO_Init+0x1e8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a3e      	ldr	r2, [pc, #248]	@ (8000a6c <HAL_GPIO_Init+0x2c8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d007      	beq.n	8000988 <HAL_GPIO_Init+0x1e4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a70 <HAL_GPIO_Init+0x2cc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d101      	bne.n	8000984 <HAL_GPIO_Init+0x1e0>
 8000980:	2303      	movs	r3, #3
 8000982:	e006      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000984:	2304      	movs	r3, #4
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000988:	2302      	movs	r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000990:	2300      	movs	r3, #0
 8000992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009a2:	492f      	ldr	r1, [pc, #188]	@ (8000a60 <HAL_GPIO_Init+0x2bc>)
 80009a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	492c      	ldr	r1, [pc, #176]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4928      	ldr	r1, [pc, #160]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009e4:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	4922      	ldr	r1, [pc, #136]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	491e      	ldr	r1, [pc, #120]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4918      	ldr	r1, [pc, #96]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4914      	ldr	r1, [pc, #80]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d021      	beq.n	8000a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	490e      	ldr	r1, [pc, #56]	@ (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	600b      	str	r3, [r1, #0]
 8000a40:	e021      	b.n	8000a86 <HAL_GPIO_Init+0x2e2>
 8000a42:	bf00      	nop
 8000a44:	10320000 	.word	0x10320000
 8000a48:	10310000 	.word	0x10310000
 8000a4c:	10220000 	.word	0x10220000
 8000a50:	10210000 	.word	0x10210000
 8000a54:	10120000 	.word	0x10120000
 8000a58:	10110000 	.word	0x10110000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40011400 	.word	0x40011400
 8000a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4909      	ldr	r1, [pc, #36]	@ (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	3301      	adds	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	fa22 f303 	lsr.w	r3, r2, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f47f ae8e 	bne.w	80007b8 <HAL_GPIO_Init+0x14>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	372c      	adds	r7, #44	@ 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	611a      	str	r2, [r3, #16]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e12b      	b.n	8000d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d106      	bne.n	8000b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fc4c 	bl	80003a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2224      	movs	r2, #36	@ 0x24
 8000b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0201 	bic.w	r2, r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b40:	f000 fe82 	bl	8001848 <HAL_RCC_GetPCLK1Freq>
 8000b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a81      	ldr	r2, [pc, #516]	@ (8000d50 <HAL_I2C_Init+0x274>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d807      	bhi.n	8000b60 <HAL_I2C_Init+0x84>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4a80      	ldr	r2, [pc, #512]	@ (8000d54 <HAL_I2C_Init+0x278>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	bf94      	ite	ls
 8000b58:	2301      	movls	r3, #1
 8000b5a:	2300      	movhi	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	e006      	b.n	8000b6e <HAL_I2C_Init+0x92>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4a7d      	ldr	r2, [pc, #500]	@ (8000d58 <HAL_I2C_Init+0x27c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	bf94      	ite	ls
 8000b68:	2301      	movls	r3, #1
 8000b6a:	2300      	movhi	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e0e7      	b.n	8000d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4a78      	ldr	r2, [pc, #480]	@ (8000d5c <HAL_I2C_Init+0x280>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8000d50 <HAL_I2C_Init+0x274>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d802      	bhi.n	8000bb0 <HAL_I2C_Init+0xd4>
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	e009      	b.n	8000bc4 <HAL_I2C_Init+0xe8>
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	4a69      	ldr	r2, [pc, #420]	@ (8000d60 <HAL_I2C_Init+0x284>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	099b      	lsrs	r3, r3, #6
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000bd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	495c      	ldr	r1, [pc, #368]	@ (8000d50 <HAL_I2C_Init+0x274>)
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d819      	bhi.n	8000c18 <HAL_I2C_Init+0x13c>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1e59      	subs	r1, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf2:	1c59      	adds	r1, r3, #1
 8000bf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000bf8:	400b      	ands	r3, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00a      	beq.n	8000c14 <HAL_I2C_Init+0x138>
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1e59      	subs	r1, r3, #1
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c12:	e051      	b.n	8000cb8 <HAL_I2C_Init+0x1dc>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e04f      	b.n	8000cb8 <HAL_I2C_Init+0x1dc>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <HAL_I2C_Init+0x168>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	1e58      	subs	r0, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6859      	ldr	r1, [r3, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	e012      	b.n	8000c6a <HAL_I2C_Init+0x18e>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1e58      	subs	r0, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	0099      	lsls	r1, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_I2C_Init+0x196>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e022      	b.n	8000cb8 <HAL_I2C_Init+0x1dc>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10e      	bne.n	8000c98 <HAL_I2C_Init+0x1bc>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1e58      	subs	r0, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6859      	ldr	r1, [r3, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c96:	e00f      	b.n	8000cb8 <HAL_I2C_Init+0x1dc>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6859      	ldr	r1, [r3, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	0099      	lsls	r1, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	6809      	ldr	r1, [r1, #0]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69da      	ldr	r2, [r3, #28]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000ce6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6911      	ldr	r1, [r2, #16]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68d2      	ldr	r2, [r2, #12]
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2220      	movs	r2, #32
 8000d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	000186a0 	.word	0x000186a0
 8000d54:	001e847f 	.word	0x001e847f
 8000d58:	003d08ff 	.word	0x003d08ff
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	10624dd3 	.word	0x10624dd3

08000d64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	460b      	mov	r3, r1
 8000d72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff fc04 	bl	8000580 <HAL_GetTick>
 8000d78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	f040 8111 	bne.w	8000fae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2319      	movs	r3, #25
 8000d92:	2201      	movs	r2, #1
 8000d94:	4988      	ldr	r1, [pc, #544]	@ (8000fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f912 	bl	8000fc0 <I2C_WaitOnFlagUntilTimeout>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000da2:	2302      	movs	r3, #2
 8000da4:	e104      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_I2C_IsDeviceReady+0x50>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e0fd      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d007      	beq.n	8000dda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0201 	orr.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2224      	movs	r2, #36	@ 0x24
 8000dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4a70      	ldr	r2, [pc, #448]	@ (8000fbc <HAL_I2C_IsDeviceReady+0x258>)
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 f8d0 	bl	8000fc0 <I2C_WaitOnFlagUntilTimeout>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00d      	beq.n	8000e42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e34:	d103      	bne.n	8000e3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e0b6      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e42:	897b      	ldrh	r3, [r7, #10]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8000e50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000e52:	f7ff fb95 	bl	8000580 <HAL_GetTick>
 8000e56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000e86:	e025      	b.n	8000ed4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000e88:	f7ff fb7a 	bl	8000580 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d302      	bcc.n	8000e9e <HAL_I2C_IsDeviceReady+0x13a>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	22a0      	movs	r2, #160	@ 0xa0
 8000ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	bf0c      	ite	eq
 8000eb4:	2301      	moveq	r3, #1
 8000eb6:	2300      	movne	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ede:	d005      	beq.n	8000eec <HAL_I2C_IsDeviceReady+0x188>
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_I2C_IsDeviceReady+0x188>
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0cd      	beq.n	8000e88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d129      	bne.n	8000f56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2319      	movs	r3, #25
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4921      	ldr	r1, [pc, #132]	@ (8000fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f844 	bl	8000fc0 <I2C_WaitOnFlagUntilTimeout>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e036      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2220      	movs	r2, #32
 8000f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e02c      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000f6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2319      	movs	r3, #25
 8000f76:	2201      	movs	r2, #1
 8000f78:	490f      	ldr	r1, [pc, #60]	@ (8000fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 f820 	bl	8000fc0 <I2C_WaitOnFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e012      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f4ff af32 	bcc.w	8000dfe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8000fae:	2302      	movs	r3, #2
  }
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	00100002 	.word	0x00100002
 8000fbc:	ffff0000 	.word	0xffff0000

08000fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fd0:	e048      	b.n	8001064 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d044      	beq.n	8001064 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fda:	f7ff fad1 	bl	8000580 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d302      	bcc.n	8000ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d139      	bne.n	8001064 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	0c1b      	lsrs	r3, r3, #16
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10d      	bne.n	8001016 <I2C_WaitOnFlagUntilTimeout+0x56>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	43da      	mvns	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4013      	ands	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	e00c      	b.n	8001030 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	43da      	mvns	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4013      	ands	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	429a      	cmp	r2, r3
 8001034:	d116      	bne.n	8001064 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2220      	movs	r2, #32
 8001040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f043 0220 	orr.w	r2, r3, #32
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e023      	b.n	80010ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	0c1b      	lsrs	r3, r3, #16
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10d      	bne.n	800108a <I2C_WaitOnFlagUntilTimeout+0xca>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	43da      	mvns	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4013      	ands	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	e00c      	b.n	80010a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	43da      	mvns	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4013      	ands	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf0c      	ite	eq
 800109c:	2301      	moveq	r3, #1
 800109e:	2300      	movne	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d093      	beq.n	8000fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e272      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8087 	beq.w	80011e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d4:	4b92      	ldr	r3, [pc, #584]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d00c      	beq.n	80010fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d112      	bne.n	8001112 <HAL_RCC_OscConfig+0x5e>
 80010ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f8:	d10b      	bne.n	8001112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fa:	4b89      	ldr	r3, [pc, #548]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d06c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x12c>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d168      	bne.n	80011e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e24c      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800111a:	d106      	bne.n	800112a <HAL_RCC_OscConfig+0x76>
 800111c:	4b80      	ldr	r3, [pc, #512]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a7f      	ldr	r2, [pc, #508]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	e02e      	b.n	8001188 <HAL_RCC_OscConfig+0xd4>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b7b      	ldr	r3, [pc, #492]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a7a      	ldr	r2, [pc, #488]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a77      	ldr	r2, [pc, #476]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001144:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xd4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0xbc>
 8001156:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a71      	ldr	r2, [pc, #452]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b6f      	ldr	r3, [pc, #444]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6e      	ldr	r2, [pc, #440]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xd4>
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a6a      	ldr	r2, [pc, #424]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b68      	ldr	r3, [pc, #416]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a67      	ldr	r2, [pc, #412]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff f9f6 	bl	8000580 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff f9f2 	bl	8000580 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e200      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xe4>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff f9e2 	bl	8000580 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff f9de 	bl	8000580 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1ec      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x10c>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011fa:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b08      	cmp	r3, #8
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x18c>
 8001206:	4b46      	ldr	r3, [pc, #280]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x176>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e1c0      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4939      	ldr	r1, [pc, #228]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e03a      	b.n	80012b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <HAL_RCC_OscConfig+0x270>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff f997 	bl	8000580 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff f993 	bl	8000580 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1a1      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4927      	ldr	r1, [pc, #156]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_RCC_OscConfig+0x270>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff f976 	bl	8000580 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff f972 	bl	8000580 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e180      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d03a      	beq.n	8001338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d019      	beq.n	80012fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_RCC_OscConfig+0x274>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d0:	f7ff f956 	bl	8000580 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff f952 	bl	8000580 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e160      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 faba 	bl	8001870 <RCC_Delay>
 80012fc:	e01c      	b.n	8001338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_RCC_OscConfig+0x274>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7ff f93c 	bl	8000580 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130a:	e00f      	b.n	800132c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff f938 	bl	8000580 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d908      	bls.n	800132c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e146      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	42420000 	.word	0x42420000
 8001328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	4b92      	ldr	r3, [pc, #584]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e9      	bne.n	800130c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a6 	beq.w	8001492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134a:	4b8b      	ldr	r3, [pc, #556]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10d      	bne.n	8001372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a87      	ldr	r2, [pc, #540]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b85      	ldr	r3, [pc, #532]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b82      	ldr	r3, [pc, #520]	@ (800157c <HAL_RCC_OscConfig+0x4c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d118      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b7f      	ldr	r3, [pc, #508]	@ (800157c <HAL_RCC_OscConfig+0x4c8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7e      	ldr	r2, [pc, #504]	@ (800157c <HAL_RCC_OscConfig+0x4c8>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff f8f9 	bl	8000580 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001392:	f7ff f8f5 	bl	8000580 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	@ 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e103      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b75      	ldr	r3, [pc, #468]	@ (800157c <HAL_RCC_OscConfig+0x4c8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x312>
 80013b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	e02d      	b.n	8001422 <HAL_RCC_OscConfig+0x36e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x334>
 80013ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a69      	ldr	r2, [pc, #420]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	4b67      	ldr	r3, [pc, #412]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a66      	ldr	r2, [pc, #408]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	e01c      	b.n	8001422 <HAL_RCC_OscConfig+0x36e>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d10c      	bne.n	800140a <HAL_RCC_OscConfig+0x356>
 80013f0:	4b61      	ldr	r3, [pc, #388]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a60      	ldr	r2, [pc, #384]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4a5d      	ldr	r2, [pc, #372]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6213      	str	r3, [r2, #32]
 8001408:	e00b      	b.n	8001422 <HAL_RCC_OscConfig+0x36e>
 800140a:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a5a      	ldr	r2, [pc, #360]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	6213      	str	r3, [r2, #32]
 8001416:	4b58      	ldr	r3, [pc, #352]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4a57      	ldr	r2, [pc, #348]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f023 0304 	bic.w	r3, r3, #4
 8001420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d015      	beq.n	8001456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff f8a9 	bl	8000580 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff f8a5 	bl	8000580 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001440:	4293      	cmp	r3, r2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e0b1      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0ee      	beq.n	8001432 <HAL_RCC_OscConfig+0x37e>
 8001454:	e014      	b.n	8001480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff f893 	bl	8000580 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff f88f 	bl	8000580 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e09b      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ee      	bne.n	800145e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d105      	bne.n	8001492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001486:	4b3c      	ldr	r3, [pc, #240]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a3b      	ldr	r2, [pc, #236]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8087 	beq.w	80015aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d061      	beq.n	800156c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d146      	bne.n	800153e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_RCC_OscConfig+0x4cc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff f863 	bl	8000580 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff f85f 	bl	8000580 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e06d      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e4:	d108      	bne.n	80014f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4921      	ldr	r1, [pc, #132]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a19      	ldr	r1, [r3, #32]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	430b      	orrs	r3, r1
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_OscConfig+0x4cc>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff f833 	bl	8000580 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f82f 	bl	8000580 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e03d      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x46a>
 800153c:	e035      	b.n	80015aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_RCC_OscConfig+0x4cc>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f81c 	bl	8000580 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff f818 	bl	8000580 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e026      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x498>
 800156a:	e01e      	b.n	80015aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e019      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
 8001578:	40021000 	.word	0x40021000
 800157c:	40007000 	.word	0x40007000
 8001580:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_RCC_OscConfig+0x500>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	429a      	cmp	r2, r3
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0d0      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b67      	ldr	r3, [pc, #412]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 0207 	bic.w	r2, r3, #7
 80015e2:	4965      	ldr	r1, [pc, #404]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a58      	ldr	r2, [pc, #352]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800161e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a52      	ldr	r2, [pc, #328]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d040      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e073      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b39      	ldr	r3, [pc, #228]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4936      	ldr	r1, [pc, #216]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7fe ff6a 	bl	8000580 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7fe ff66 	bl	8000580 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e053      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d210      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4922      	ldr	r1, [pc, #136]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	@ (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	@ (8001784 <HAL_RCC_ClockConfig+0x1cc>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_RCC_ClockConfig+0x1d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fec8 	bl	80004fc <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000
 800177c:	40021000 	.word	0x40021000
 8001780:	0800191c 	.word	0x0800191c
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x94>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x30>
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x36>
 80017ba:	e027      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x98>)
 80017be:	613b      	str	r3, [r7, #16]
      break;
 80017c0:	e027      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d010      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x94>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0c5b      	lsrs	r3, r3, #17
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_RCC_GetSysClockFreq+0xa0>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ee:	fb03 f202 	mul.w	r2, r3, r2
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e004      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	613b      	str	r3, [r7, #16]
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x98>)
 800180e:	613b      	str	r3, [r7, #16]
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	693b      	ldr	r3, [r7, #16]
}
 8001814:	4618      	mov	r0, r3
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	007a1200 	.word	0x007a1200
 8001828:	08001934 	.word	0x08001934
 800182c:	08001944 	.word	0x08001944
 8001830:	003d0900 	.word	0x003d0900

08001834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001838:	4b02      	ldr	r3, [pc, #8]	@ (8001844 <HAL_RCC_GetHCLKFreq+0x10>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000000 	.word	0x20000000

08001848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800184c:	f7ff fff2 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4903      	ldr	r1, [pc, #12]	@ (800186c <HAL_RCC_GetPCLK1Freq+0x24>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	0800192c 	.word	0x0800192c

08001870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <RCC_Delay+0x34>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <RCC_Delay+0x38>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800188c:	bf00      	nop
  }
  while (Delay --);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <RCC_Delay+0x1c>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000000 	.word	0x20000000
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <memset>:
 80018ac:	4603      	mov	r3, r0
 80018ae:	4402      	add	r2, r0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d100      	bne.n	80018b6 <memset+0xa>
 80018b4:	4770      	bx	lr
 80018b6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ba:	e7f9      	b.n	80018b0 <memset+0x4>

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	2600      	movs	r6, #0
 80018c0:	4d0c      	ldr	r5, [pc, #48]	@ (80018f4 <__libc_init_array+0x38>)
 80018c2:	4c0d      	ldr	r4, [pc, #52]	@ (80018f8 <__libc_init_array+0x3c>)
 80018c4:	1b64      	subs	r4, r4, r5
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	42a6      	cmp	r6, r4
 80018ca:	d109      	bne.n	80018e0 <__libc_init_array+0x24>
 80018cc:	f000 f81a 	bl	8001904 <_init>
 80018d0:	2600      	movs	r6, #0
 80018d2:	4d0a      	ldr	r5, [pc, #40]	@ (80018fc <__libc_init_array+0x40>)
 80018d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001900 <__libc_init_array+0x44>)
 80018d6:	1b64      	subs	r4, r4, r5
 80018d8:	10a4      	asrs	r4, r4, #2
 80018da:	42a6      	cmp	r6, r4
 80018dc:	d105      	bne.n	80018ea <__libc_init_array+0x2e>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e4:	4798      	blx	r3
 80018e6:	3601      	adds	r6, #1
 80018e8:	e7ee      	b.n	80018c8 <__libc_init_array+0xc>
 80018ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ee:	4798      	blx	r3
 80018f0:	3601      	adds	r6, #1
 80018f2:	e7f2      	b.n	80018da <__libc_init_array+0x1e>
 80018f4:	08001948 	.word	0x08001948
 80018f8:	08001948 	.word	0x08001948
 80018fc:	08001948 	.word	0x08001948
 8001900:	0800194c 	.word	0x0800194c

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr
