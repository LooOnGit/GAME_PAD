
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009110  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800921c  0800921c  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  0000b164  2**0
                  CONTENTS
  4 .ARM          00000000  08009280  08009280  0000b164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009280  08009280  0000b164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009280  08009280  0000a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08009288  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  20000164  080093ec  0000b164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  080093ec  0000ba34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aa4  00000000  00000000  0000b18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a7  00000000  00000000  0001ec31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00021ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f12  00000000  00000000  00023268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa00  00000000  00000000  0002417a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001813c  00000000  00000000  0003eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fd5  00000000  00000000  00056cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eac8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  000eacd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000efee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08009204 	.word	0x08009204

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08009204 	.word	0x08009204

0800014c <TLC59116_Init>:
void MCP23017_EnablePullUps() {
    MCP23017_WriteRegister(0x0C, 0xFF); // GPPUA - bật pull-up cho tất cả chân A
    MCP23017_WriteRegister(0x0D, 0xFF); // GPPUB - bật pull-up cho tất cả chân B
}

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af04      	add	r7, sp, #16
 8000152:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 8000158:	2300      	movs	r3, #0
 800015a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	9302      	str	r3, [sp, #8]
 8000162:	2301      	movs	r3, #1
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	f107 030f 	add.w	r3, r7, #15
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	2301      	movs	r3, #1
 800016e:	2200      	movs	r2, #0
 8000170:	21c0      	movs	r1, #192	@ 0xc0
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f001 fa62 	bl	800163c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	9302      	str	r3, [sp, #8]
 800017e:	2301      	movs	r3, #1
 8000180:	9301      	str	r3, [sp, #4]
 8000182:	f107 030e 	add.w	r3, r7, #14
 8000186:	9300      	str	r3, [sp, #0]
 8000188:	2301      	movs	r3, #1
 800018a:	2201      	movs	r2, #1
 800018c:	21c0      	movs	r1, #192	@ 0xc0
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 fa54 	bl	800163c <HAL_I2C_Mem_Write>
}
 8000194:	bf00      	nop
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}

0800019c <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af04      	add	r7, sp, #16
 80001a2:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 80001a4:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80001a8:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001aa:	f04f 33ff 	mov.w	r3, #4294967295
 80001ae:	9302      	str	r3, [sp, #8]
 80001b0:	2304      	movs	r3, #4
 80001b2:	9301      	str	r3, [sp, #4]
 80001b4:	f107 030c 	add.w	r3, r7, #12
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2301      	movs	r3, #1
 80001bc:	2214      	movs	r2, #20
 80001be:	21c0      	movs	r1, #192	@ 0xc0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 fa3b 	bl	800163c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	9302      	str	r3, [sp, #8]
 80001cc:	2304      	movs	r3, #4
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	2215      	movs	r2, #21
 80001da:	21c0      	movs	r1, #192	@ 0xc0
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f001 fa2d 	bl	800163c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	9302      	str	r3, [sp, #8]
 80001e8:	2304      	movs	r3, #4
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	f107 030c 	add.w	r3, r7, #12
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2301      	movs	r3, #1
 80001f4:	2216      	movs	r2, #22
 80001f6:	21c0      	movs	r1, #192	@ 0xc0
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f001 fa1f 	bl	800163c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	9302      	str	r3, [sp, #8]
 8000204:	2304      	movs	r3, #4
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	2217      	movs	r2, #23
 8000212:	21c0      	movs	r1, #192	@ 0xc0
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f001 fa11 	bl	800163c <HAL_I2C_Mem_Write>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fba6 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f820 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f9c8 	bl	80005c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000234:	f000 f8f6 	bl	8000424 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000238:	f000 f878 	bl	800032c <MX_ADC1_Init>
  MX_ADC2_Init();
 800023c:	f000 f8b4 	bl	80003a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000240:	f000 f91e 	bl	8000480 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000244:	f008 fbfa 	bl	8008a3c <MX_USB_DEVICE_Init>

  //mode digital
//  TLC59116_Init(&hi2c1);

  //mode pwm
  TLC59116_Init(&hi2c1);
 8000248:	4807      	ldr	r0, [pc, #28]	@ (8000268 <main+0x44>)
 800024a:	f7ff ff7f 	bl	800014c <TLC59116_Init>
  TLC59116_Set_All_PWM_Mode(&hi2c1);
 800024e:	4806      	ldr	r0, [pc, #24]	@ (8000268 <main+0x44>)
 8000250:	f7ff ffa4 	bl	800019c <TLC59116_Set_All_PWM_Mode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000254:	2104      	movs	r1, #4
 8000256:	4805      	ldr	r0, [pc, #20]	@ (800026c <main+0x48>)
 8000258:	f003 fffc 	bl	8004254 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);     // Nếu bạn dùng CH2 chính
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // CH2N → xuất ra PB14
 800025c:	2104      	movs	r1, #4
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <main+0x48>)
 8000260:	f004 fcd4 	bl	8004c0c <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <main+0x40>
 8000268:	200001e0 	.word	0x200001e0
 800026c:	20000234 	.word	0x20000234

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	@ 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800027a:	2228      	movs	r2, #40	@ 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f008 ff94 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fa6a 	bl	80037a0 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002d2:	f000 f9c1 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fcd6 	bl	8003ca4 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fe:	f000 f9ab 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000302:	2312      	movs	r3, #18
 8000304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000306:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800030a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800030c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000310:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f003 fe3f 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000320:	f000 f99a 	bl	8000658 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3750      	adds	r7, #80	@ 0x50
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800033c:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <MX_ADC1_Init+0x74>)
 800033e:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <MX_ADC1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b17      	ldr	r3, [pc, #92]	@ (80003a0 <MX_ADC1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <MX_ADC1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_ADC1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <MX_ADC1_Init+0x74>)
 8000356:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800035a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035c:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <MX_ADC1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000362:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_ADC1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <MX_ADC1_Init+0x74>)
 800036a:	f000 fb67 	bl	8000a3c <HAL_ADC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000374:	f000 f970 	bl	8000658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037c:	2301      	movs	r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000380:	2307      	movs	r3, #7
 8000382:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_ADC1_Init+0x74>)
 800038a:	f000 fc2f 	bl	8000bec <HAL_ADC_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000394:	f000 f960 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000180 	.word	0x20000180
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_ADC2_Init+0x74>)
 80003ba:	4a19      	ldr	r2, [pc, #100]	@ (8000420 <MX_ADC2_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_ADC2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_ADC2_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_ADC2_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_ADC2_Init+0x74>)
 80003d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d8:	4b10      	ldr	r3, [pc, #64]	@ (800041c <MX_ADC2_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_ADC2_Init+0x74>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003e4:	480d      	ldr	r0, [pc, #52]	@ (800041c <MX_ADC2_Init+0x74>)
 80003e6:	f000 fb29 	bl	8000a3c <HAL_ADC_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003f0:	f000 f932 	bl	8000658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f8:	2301      	movs	r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003fc:	2307      	movs	r3, #7
 80003fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_ADC2_Init+0x74>)
 8000406:	f000 fbf1 	bl	8000bec <HAL_ADC_ConfigChannel>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000410:	f000 f922 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200001b0 	.word	0x200001b0
 8000420:	40012800 	.word	0x40012800

08000424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_I2C1_Init+0x50>)
 800042a:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <MX_I2C1_Init+0x54>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000430:	4a12      	ldr	r2, [pc, #72]	@ (800047c <MX_I2C1_Init+0x58>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_I2C1_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000440:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <MX_I2C1_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <MX_I2C1_Init+0x50>)
 8000462:	f000 ffa7 	bl	80013b4 <HAL_I2C_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800046c:	f000 f8f4 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200001e0 	.word	0x200001e0
 8000478:	40005400 	.word	0x40005400
 800047c:	000186a0 	.word	0x000186a0

08000480 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b096      	sub	sp, #88	@ 0x58
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000486:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000494:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2220      	movs	r2, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	4618      	mov	r0, r3
 80004ba:	f008 fe77 	bl	80091ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004be:	4b3f      	ldr	r3, [pc, #252]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004c0:	4a3f      	ldr	r2, [pc, #252]	@ (80005c0 <MX_TIM1_Init+0x140>)
 80004c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 599;
 80004c4:	4b3d      	ldr	r3, [pc, #244]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004c6:	f240 2257 	movw	r2, #599	@ 0x257
 80004ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004cc:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80004d2:	4b3a      	ldr	r3, [pc, #232]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80004d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e0:	4b36      	ldr	r3, [pc, #216]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e6:	4b35      	ldr	r3, [pc, #212]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004ec:	4833      	ldr	r0, [pc, #204]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80004ee:	f003 fe09 	bl	8004104 <HAL_TIM_Base_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004f8:	f000 f8ae 	bl	8000658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000500:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000502:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000506:	4619      	mov	r1, r3
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <MX_TIM1_Init+0x13c>)
 800050a:	f004 f807 	bl	800451c <HAL_TIM_ConfigClockSource>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000514:	f000 f8a0 	bl	8000658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000518:	4828      	ldr	r0, [pc, #160]	@ (80005bc <MX_TIM1_Init+0x13c>)
 800051a:	f003 fe42 	bl	80041a2 <HAL_TIM_PWM_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000524:	f000 f898 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000534:	4619      	mov	r1, r3
 8000536:	4821      	ldr	r0, [pc, #132]	@ (80005bc <MX_TIM1_Init+0x13c>)
 8000538:	f004 fc06 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000542:	f000 f889 	bl	8000658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000546:	2360      	movs	r3, #96	@ 0x60
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25;
 800054a:	2319      	movs	r3, #25
 800054c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000552:	2300      	movs	r3, #0
 8000554:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000566:	2204      	movs	r2, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4814      	ldr	r0, [pc, #80]	@ (80005bc <MX_TIM1_Init+0x13c>)
 800056c:	f003 ff14 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000576:	f000 f86f 	bl	8000658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800058e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000592:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <MX_TIM1_Init+0x13c>)
 800059e:	f004 fc31 	bl	8004e04 <HAL_TIMEx_ConfigBreakDeadTime>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80005a8:	f000 f856 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <MX_TIM1_Init+0x13c>)
 80005ae:	f000 f94d 	bl	800084c <HAL_TIM_MspPostInit>

}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	@ 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000234 	.word	0x20000234
 80005c0:	40012c00 	.word	0x40012c00

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0320 	and.w	r3, r3, #32
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a16      	ldr	r2, [pc, #88]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_GPIO_Init+0x8c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_GPIO_Init+0x8c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a10      	ldr	r2, [pc, #64]	@ (8000650 <MX_GPIO_Init+0x8c>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_GPIO_Init+0x8c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <MX_GPIO_Init+0x90>)
 8000626:	f000 fead 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_GPIO_Init+0x90>)
 8000642:	f000 fd1b 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40010c00 	.word	0x40010c00

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <Error_Handler+0x8>

08000664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a14      	ldr	r2, [pc, #80]	@ (80006c0 <HAL_MspInit+0x5c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_MspInit+0x5c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <HAL_MspInit+0x5c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <HAL_MspInit+0x5c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_MspInit+0x60>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_MspInit+0x60>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a28      	ldr	r2, [pc, #160]	@ (8000784 <HAL_ADC_MspInit+0xbc>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d122      	bne.n	800072e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a26      	ldr	r2, [pc, #152]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 80006ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a20      	ldr	r2, [pc, #128]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071c:	2303      	movs	r3, #3
 800071e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	4619      	mov	r1, r3
 8000726:	4819      	ldr	r0, [pc, #100]	@ (800078c <HAL_ADC_MspInit+0xc4>)
 8000728:	f000 fca8 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800072c:	e026      	b.n	800077c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <HAL_ADC_MspInit+0xc8>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d121      	bne.n	800077c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <HAL_ADC_MspInit+0xc0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <HAL_ADC_MspInit+0xc4>)
 8000778:	f000 fc80 	bl	800107c <HAL_GPIO_Init>
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	@ 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40012400 	.word	0x40012400
 8000788:	40021000 	.word	0x40021000
 800078c:	40010800 	.word	0x40010800
 8000790:	40012800 	.word	0x40012800

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <HAL_I2C_MspInit+0x70>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d123      	bne.n	80007fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007cc:	23c0      	movs	r3, #192	@ 0xc0
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	2312      	movs	r3, #18
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_I2C_MspInit+0x78>)
 80007e0:	f000 fc4c 	bl	800107c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ee:	61d3      	str	r3, [r2, #28]
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40005400 	.word	0x40005400
 8000808:	40021000 	.word	0x40021000
 800080c:	40010c00 	.word	0x40010c00

08000810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a09      	ldr	r2, [pc, #36]	@ (8000844 <HAL_TIM_Base_MspInit+0x34>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000828:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_TIM_MspPostInit+0x5c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d118      	bne.n	800089e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_TIM_MspPostInit+0x60>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_TIM_MspPostInit+0x60>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_TIM_MspPostInit+0x60>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000884:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <HAL_TIM_MspPostInit+0x64>)
 800089a:	f000 fbef 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f87e 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000912:	f001 fb17 	bl	8001f44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000748 	.word	0x20000748

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff fff8 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000932:	490c      	ldr	r1, [pc, #48]	@ (8000964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000934:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a09      	ldr	r2, [pc, #36]	@ (800096c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000948:	4c09      	ldr	r4, [pc, #36]	@ (8000970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f008 fc31 	bl	80091bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fc63 	bl	8000224 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000968:	08009288 	.word	0x08009288
  ldr r2, =_sbss
 800096c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000970:	20000a34 	.word	0x20000a34

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fb35 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe66 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fb4d 	bl	8001062 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 fb15 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000027c 	.word	0x2000027c

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	2000027c 	.word	0x2000027c

08000a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e0be      	b.n	8000bdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fe24 	bl	80006c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f9ab 	bl	8000ddc <ADC_ConversionStop_Disable>
 8000a86:	4603      	mov	r3, r0
 8000a88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 8099 	bne.w	8000bca <HAL_ADC_Init+0x18e>
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 8095 	bne.w	8000bca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000aa8:	f023 0302 	bic.w	r3, r3, #2
 8000aac:	f043 0202 	orr.w	r2, r3, #2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000abc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7b1b      	ldrb	r3, [r3, #12]
 8000ac2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ac4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ad4:	d003      	beq.n	8000ade <HAL_ADC_Init+0xa2>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d102      	bne.n	8000ae4 <HAL_ADC_Init+0xa8>
 8000ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae2:	e000      	b.n	8000ae6 <HAL_ADC_Init+0xaa>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7d1b      	ldrb	r3, [r3, #20]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d119      	bne.n	8000b28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b1b      	ldrb	r3, [r3, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	035a      	lsls	r2, r3, #13
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	e00b      	b.n	8000b28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b14:	f043 0220 	orr.w	r2, r3, #32
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b20:	f043 0201 	orr.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_ADC_Init+0x1a8>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b58:	d003      	beq.n	8000b62 <HAL_ADC_Init+0x126>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d104      	bne.n	8000b6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	051b      	lsls	r3, r3, #20
 8000b6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_ADC_Init+0x1ac>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9a:	f023 0303 	bic.w	r3, r3, #3
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba6:	e018      	b.n	8000bda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bac:	f023 0312 	bic.w	r3, r3, #18
 8000bb0:	f043 0210 	orr.w	r2, r3, #16
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbc:	f043 0201 	orr.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc8:	e007      	b.n	8000bda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bce:	f043 0210 	orr.w	r2, r3, #16
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	ffe1f7fd 	.word	0xffe1f7fd
 8000be8:	ff1f0efe 	.word	0xff1f0efe

08000bec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <HAL_ADC_ConfigChannel+0x20>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e0dc      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x1da>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d81c      	bhi.n	8000c56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3b05      	subs	r3, #5
 8000c2e:	221f      	movs	r2, #31
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4019      	ands	r1, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	3b05      	subs	r3, #5
 8000c48:	fa00 f203 	lsl.w	r2, r0, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c54:	e03c      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b0c      	cmp	r3, #12
 8000c5c:	d81c      	bhi.n	8000c98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3b23      	subs	r3, #35	@ 0x23
 8000c70:	221f      	movs	r2, #31
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4019      	ands	r1, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3b23      	subs	r3, #35	@ 0x23
 8000c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c96:	e01b      	b.n	8000cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3b41      	subs	r3, #65	@ 0x41
 8000caa:	221f      	movs	r2, #31
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4019      	ands	r1, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3b41      	subs	r3, #65	@ 0x41
 8000cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	d91c      	bls.n	8000d12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68d9      	ldr	r1, [r3, #12]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3b1e      	subs	r3, #30
 8000cea:	2207      	movs	r2, #7
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6898      	ldr	r0, [r3, #8]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	3b1e      	subs	r3, #30
 8000d04:	fa00 f203 	lsl.w	r2, r0, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	e019      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6919      	ldr	r1, [r3, #16]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	2207      	movs	r2, #7
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6898      	ldr	r0, [r3, #8]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b10      	cmp	r3, #16
 8000d4c:	d003      	beq.n	8000d56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d52:	2b11      	cmp	r3, #17
 8000d54:	d132      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d125      	bne.n	8000dac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d126      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b10      	cmp	r3, #16
 8000d84:	d11a      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	0c9a      	lsrs	r2, r3, #18
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d9c:	e002      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f9      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x1b2>
 8000daa:	e007      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db0:	f043 0220 	orr.w	r2, r3, #32
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40012400 	.word	0x40012400
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d12e      	bne.n	8000e54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0201 	bic.w	r2, r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e06:	f7ff fe0f 	bl	8000a28 <HAL_GetTick>
 8000e0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e0c:	e01b      	b.n	8000e46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e0e:	f7ff fe0b 	bl	8000a28 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d914      	bls.n	8000e46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d10d      	bne.n	8000e46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2e:	f043 0210 	orr.w	r2, r3, #16
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	f043 0201 	orr.w	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e007      	b.n	8000e56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d0dc      	beq.n	8000e0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4906      	ldr	r1, [pc, #24]	@ (8000ef8 <__NVIC_EnableIRQ+0x34>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff90 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff2d 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff42 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff90 	bl	8000f50 <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5f 	bl	8000efc <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff35 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b08b      	sub	sp, #44	@ 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e169      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8158 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a9a      	ldr	r2, [pc, #616]	@ (800131c <HAL_GPIO_Init+0x2a0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05e      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010b8:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_GPIO_Init+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d875      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010be:	4a98      	ldr	r2, [pc, #608]	@ (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d058      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010c4:	4a96      	ldr	r2, [pc, #600]	@ (8001320 <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d86f      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ca:	4a96      	ldr	r2, [pc, #600]	@ (8001324 <HAL_GPIO_Init+0x2a8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d052      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010d0:	4a94      	ldr	r2, [pc, #592]	@ (8001324 <HAL_GPIO_Init+0x2a8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d869      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010d6:	4a94      	ldr	r2, [pc, #592]	@ (8001328 <HAL_GPIO_Init+0x2ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d04c      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010dc:	4a92      	ldr	r2, [pc, #584]	@ (8001328 <HAL_GPIO_Init+0x2ac>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d863      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010e2:	4a92      	ldr	r2, [pc, #584]	@ (800132c <HAL_GPIO_Init+0x2b0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010e8:	4a90      	ldr	r2, [pc, #576]	@ (800132c <HAL_GPIO_Init+0x2b0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d85d      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d82a      	bhi.n	8001148 <HAL_GPIO_Init+0xcc>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d859      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <HAL_GPIO_Init+0x80>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001151 	.word	0x08001151
 8001104:	08001163 	.word	0x08001163
 8001108:	080011a5 	.word	0x080011a5
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	08001159 	.word	0x08001159
 8001144:	0800116d 	.word	0x0800116d
 8001148:	4a79      	ldr	r2, [pc, #484]	@ (8001330 <HAL_GPIO_Init+0x2b4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e029      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e024      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01f      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e01a      	b.n	80011ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e013      	b.n	80011ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e009      	b.n	80011ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x130>
          break;
 80011aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	@ 0xff
 80011b0:	d801      	bhi.n	80011b6 <HAL_GPIO_Init+0x13a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_Init+0x13e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	@ 0xff
 80011c0:	d802      	bhi.n	80011c8 <HAL_GPIO_Init+0x14c>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x152>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	3b08      	subs	r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	210f      	movs	r1, #15
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b1 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a4c      	ldr	r2, [pc, #304]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_GPIO_Init+0x2b8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001214:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <HAL_GPIO_Init+0x2bc>)
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a40      	ldr	r2, [pc, #256]	@ (800133c <HAL_GPIO_Init+0x2c0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <HAL_GPIO_Init+0x2c4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3e      	ldr	r2, [pc, #248]	@ (8001344 <HAL_GPIO_Init+0x2c8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3d      	ldr	r2, [pc, #244]	@ (8001348 <HAL_GPIO_Init+0x2cc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e0>
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 800125c:	2304      	movs	r3, #4
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1ee>
 8001268:	2300      	movs	r3, #0
 800126a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127a:	492f      	ldr	r1, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x2bc>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	492c      	ldr	r1, [pc, #176]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a2:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4928      	ldr	r1, [pc, #160]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	4922      	ldr	r1, [pc, #136]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	491e      	ldr	r1, [pc, #120]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4918      	ldr	r1, [pc, #96]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4914      	ldr	r1, [pc, #80]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	490e      	ldr	r1, [pc, #56]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e021      	b.n	800135e <HAL_GPIO_Init+0x2e2>
 800131a:	bf00      	nop
 800131c:	10320000 	.word	0x10320000
 8001320:	10310000 	.word	0x10310000
 8001324:	10220000 	.word	0x10220000
 8001328:	10210000 	.word	0x10210000
 800132c:	10120000 	.word	0x10120000
 8001330:	10110000 	.word	0x10110000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40011400 	.word	0x40011400
 800134c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_GPIO_Init+0x304>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4909      	ldr	r1, [pc, #36]	@ (8001380 <HAL_GPIO_Init+0x304>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f ae8e 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	372c      	adds	r7, #44	@ 0x2c
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e12b      	b.n	800161e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f9da 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	@ 0x24
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001418:	f002 fd8c 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a81      	ldr	r2, [pc, #516]	@ (8001628 <HAL_I2C_Init+0x274>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d807      	bhi.n	8001438 <HAL_I2C_Init+0x84>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a80      	ldr	r2, [pc, #512]	@ (800162c <HAL_I2C_Init+0x278>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e006      	b.n	8001446 <HAL_I2C_Init+0x92>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a7d      	ldr	r2, [pc, #500]	@ (8001630 <HAL_I2C_Init+0x27c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	bf94      	ite	ls
 8001440:	2301      	movls	r3, #1
 8001442:	2300      	movhi	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e7      	b.n	800161e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a78      	ldr	r2, [pc, #480]	@ (8001634 <HAL_I2C_Init+0x280>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a6a      	ldr	r2, [pc, #424]	@ (8001628 <HAL_I2C_Init+0x274>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d802      	bhi.n	8001488 <HAL_I2C_Init+0xd4>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	e009      	b.n	800149c <HAL_I2C_Init+0xe8>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a69      	ldr	r2, [pc, #420]	@ (8001638 <HAL_I2C_Init+0x284>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	3301      	adds	r3, #1
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	495c      	ldr	r1, [pc, #368]	@ (8001628 <HAL_I2C_Init+0x274>)
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d819      	bhi.n	80014f0 <HAL_I2C_Init+0x13c>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e59      	subs	r1, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ca:	1c59      	adds	r1, r3, #1
 80014cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014d0:	400b      	ands	r3, r1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <HAL_I2C_Init+0x138>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e59      	subs	r1, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ea:	e051      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e04f      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d111      	bne.n	800151c <HAL_I2C_Init+0x168>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	440b      	add	r3, r1
 8001506:	fbb0 f3f3 	udiv	r3, r0, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e012      	b.n	8001542 <HAL_I2C_Init+0x18e>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Init+0x196>
 8001546:	2301      	movs	r3, #1
 8001548:	e022      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10e      	bne.n	8001570 <HAL_I2C_Init+0x1bc>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1e58      	subs	r0, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	440b      	add	r3, r1
 8001560:	fbb0 f3f3 	udiv	r3, r0, r3
 8001564:	3301      	adds	r3, #1
 8001566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800156e:	e00f      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	0099      	lsls	r1, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	fbb0 f3f3 	udiv	r3, r0, r3
 8001586:	3301      	adds	r3, #1
 8001588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	6809      	ldr	r1, [r1, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6911      	ldr	r1, [r2, #16]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68d2      	ldr	r2, [r2, #12]
 80015ca:	4311      	orrs	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2220      	movs	r2, #32
 800160a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	000186a0 	.word	0x000186a0
 800162c:	001e847f 	.word	0x001e847f
 8001630:	003d08ff 	.word	0x003d08ff
 8001634:	431bde83 	.word	0x431bde83
 8001638:	10624dd3 	.word	0x10624dd3

0800163c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	817b      	strh	r3, [r7, #10]
 800164e:	460b      	mov	r3, r1
 8001650:	813b      	strh	r3, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001656:	f7ff f9e7 	bl	8000a28 <HAL_GetTick>
 800165a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b20      	cmp	r3, #32
 8001666:	f040 80d9 	bne.w	800181c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2319      	movs	r3, #25
 8001670:	2201      	movs	r2, #1
 8001672:	496d      	ldr	r1, [pc, #436]	@ (8001828 <HAL_I2C_Mem_Write+0x1ec>)
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f971 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
 8001682:	e0cc      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Mem_Write+0x56>
 800168e:	2302      	movs	r3, #2
 8001690:	e0c5      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d007      	beq.n	80016b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2221      	movs	r2, #33	@ 0x21
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2240      	movs	r2, #64	@ 0x40
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_I2C_Mem_Write+0x1f0>)
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016fa:	88f8      	ldrh	r0, [r7, #6]
 80016fc:	893a      	ldrh	r2, [r7, #8]
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4603      	mov	r3, r0
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f890 	bl	8001830 <I2C_RequestMemoryWrite>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d052      	beq.n	80017bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e081      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa36 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	2b04      	cmp	r3, #4
 8001730:	d107      	bne.n	8001742 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b04      	cmp	r3, #4
 8001782:	d11b      	bne.n	80017bc <HAL_I2C_Mem_Write+0x180>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d017      	beq.n	80017bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1aa      	bne.n	800171a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fa29 	bl	8001c20 <I2C_WaitOnBTFFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d107      	bne.n	80017ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e016      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	00100002 	.word	0x00100002
 800182c:	ffff0000 	.word	0xffff0000

08001830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	817b      	strh	r3, [r7, #10]
 8001842:	460b      	mov	r3, r1
 8001844:	813b      	strh	r3, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2200      	movs	r2, #0
 8001862:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f878 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001880:	d103      	bne.n	800188a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001888:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e05f      	b.n	800194e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800189c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	6a3a      	ldr	r2, [r7, #32]
 80018a2:	492d      	ldr	r1, [pc, #180]	@ (8001958 <I2C_RequestMemoryWrite+0x128>)
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f8d3 	bl	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e04c      	b.n	800194e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f95e 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d107      	bne.n	80018f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e02b      	b.n	800194e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018fc:	893b      	ldrh	r3, [r7, #8]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	e021      	b.n	800194c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	b2da      	uxtb	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f938 	bl	8001b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	2b04      	cmp	r3, #4
 800192c:	d107      	bne.n	800193e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e005      	b.n	800194e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	00010002 	.word	0x00010002

0800195c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196c:	e048      	b.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d044      	beq.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001976:	f7ff f857 	bl	8000a28 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d302      	bcc.n	800198c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d139      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	43da      	mvns	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	e00c      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d116      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e023      	b.n	8001a48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10d      	bne.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	43da      	mvns	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4013      	ands	r3, r2
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	e00c      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4013      	ands	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d093      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a5e:	e071      	b.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d123      	bne.n	8001ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e067      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d041      	beq.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac0:	f7fe ffb2 	bl	8000a28 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d302      	bcc.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d136      	bne.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10c      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	e00b      	b.n	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4013      	ands	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e021      	b.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10c      	bne.n	8001b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	43da      	mvns	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e00b      	b.n	8001b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f af6d 	bne.w	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b9c:	e034      	b.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f886 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e034      	b.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d028      	beq.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7fe ff37 	bl	8000a28 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11d      	bne.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	2b80      	cmp	r3, #128	@ 0x80
 8001bd8:	d016      	beq.n	8001c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e007      	b.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c12:	2b80      	cmp	r3, #128	@ 0x80
 8001c14:	d1c3      	bne.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c2c:	e034      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f83e 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e034      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d028      	beq.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7fe feef 	bl	8000a28 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11d      	bne.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d016      	beq.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d1c3      	bne.n	8001c2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc6:	d11b      	bne.n	8001d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0e8      	b.n	8001ef0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f006 ffb6 	bl	8008ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 f8f2 	bl	8004f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5a:	f003 f8c8 	bl	8004eee <USB_CoreInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0bf      	b.n	8001ef0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f8f6 	bl	8004f68 <USB_SetCurrentMode>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0b0      	b.n	8001ef0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e03e      	b.n	8001e12 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3311      	adds	r3, #17
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	3310      	adds	r3, #16
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3313      	adds	r3, #19
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3320      	adds	r3, #32
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3324      	adds	r3, #36	@ 0x24
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3bb      	bcc.n	8001d94 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e044      	b.n	8001eac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3b5      	bcc.n	8001e22 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	f003 f85e 	bl	8004f80 <USB_DevInit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00c      	b.n	8001ef0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 fade 	bl	80074aa <USB_DevDisconnect>

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_Start+0x16>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e016      	b.n	8001f3c <HAL_PCD_Start+0x44>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fff4 	bl	8004f08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f20:	2101      	movs	r1, #1
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f007 f90b 	bl	800913e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f005 fab2 	bl	8007496 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fab4 	bl	80074be <USB_ReadInterrupts>
 8001f56:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fb03 	bl	800256e <PCD_EP_ISR_Handler>

    return;
 8001f68:	e119      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f86:	b292      	uxth	r2, r2
 8001f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f006 ff04 	bl	8008d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f92:	2100      	movs	r1, #0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f905 	bl	80021a4 <HAL_PCD_SetAddress>

    return;
 8001f9a:	e100      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fbe:	e0ee      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fe2:	e0dc      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d027      	beq.n	800203e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0204 	bic.w	r2, r2, #4
 8002000:	b292      	uxth	r2, r2
 8002002:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0208 	bic.w	r2, r2, #8
 8002018:	b292      	uxth	r2, r2
 800201a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f006 fef4 	bl	8008e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002036:	b292      	uxth	r2, r2
 8002038:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800203c:	e0af      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8083 	beq.w	8002150 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	77fb      	strb	r3, [r7, #31]
 800204e:	e010      	b.n	8002072 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	7ffb      	ldrb	r3, [r7, #31]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	7ffb      	ldrb	r3, [r7, #31]
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	b292      	uxth	r2, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	3320      	adds	r3, #32
 8002066:	443b      	add	r3, r7
 8002068:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	3301      	adds	r3, #1
 8002070:	77fb      	strb	r3, [r7, #31]
 8002072:	7ffb      	ldrb	r3, [r7, #31]
 8002074:	2b07      	cmp	r3, #7
 8002076:	d9eb      	bls.n	8002050 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020a8:	bf00      	nop
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f6      	beq.n	80020aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ce:	b292      	uxth	r2, r2
 80020d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
 80020d8:	e00f      	b.n	80020fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020da:	7ffb      	ldrb	r3, [r7, #31]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4611      	mov	r1, r2
 80020e2:	7ffa      	ldrb	r2, [r7, #31]
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	440a      	add	r2, r1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	3320      	adds	r3, #32
 80020ec:	443b      	add	r3, r7
 80020ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80020f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	3301      	adds	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d9ec      	bls.n	80020da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002108:	b29a      	uxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0208 	orr.w	r2, r2, #8
 8002112:	b292      	uxth	r2, r2
 8002114:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800212a:	b292      	uxth	r2, r2
 800212c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0204 	orr.w	r2, r2, #4
 8002142:	b292      	uxth	r2, r2
 8002144:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f006 fe45 	bl	8008dd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800214e:	e026      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00f      	beq.n	800217a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800216c:	b292      	uxth	r2, r2
 800216e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f006 fe03 	bl	8008d7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002178:	e011      	b.n	800219e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00c      	beq.n	800219e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800219c:	bf00      	nop
  }
}
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_PCD_SetAddress+0x1a>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e012      	b.n	80021e4 <HAL_PCD_SetAddress+0x40>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 f94b 	bl	8007470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	70fb      	strb	r3, [r7, #3]
 80021fe:	460b      	mov	r3, r1
 8002200:	803b      	strh	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800220a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da0e      	bge.n	8002230 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 0207 	and.w	r2, r3, #7
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	3310      	adds	r3, #16
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	705a      	strb	r2, [r3, #1]
 800222e:	e00e      	b.n	800224e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 0207 	and.w	r2, r3, #7
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800225a:	883a      	ldrh	r2, [r7, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	78ba      	ldrb	r2, [r7, #2]
 8002264:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002266:	78bb      	ldrb	r3, [r7, #2]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_PCD_EP_Open+0x94>
 800227c:	2302      	movs	r3, #2
 800227e:	e00e      	b.n	800229e <HAL_PCD_EP_Open+0xb2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fe94 	bl	8004fbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800229c:	7afb      	ldrb	r3, [r7, #11]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0e      	bge.n	80022d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 0207 	and.w	r2, r3, #7
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	3310      	adds	r3, #16
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	705a      	strb	r2, [r3, #1]
 80022d6:	e00e      	b.n	80022f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0207 	and.w	r2, r3, #7
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_PCD_EP_Close+0x6a>
 800230c:	2302      	movs	r3, #2
 800230e:	e00e      	b.n	800232e <HAL_PCD_EP_Close+0x88>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fa0c 	bl	800573c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	460b      	mov	r3, r1
 8002344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	f003 0207 	and.w	r2, r3, #7
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	b2da      	uxtb	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 fbc3 	bl	8005b14 <USB_EPStartXfer>

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	460b      	mov	r3, r1
 80023a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	3310      	adds	r3, #16
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2201      	movs	r2, #1
 80023e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fb8c 	bl	8005b14 <USB_EPStartXfer>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	7912      	ldrb	r2, [r2, #4]
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04c      	b.n	80024be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002428:	2b00      	cmp	r3, #0
 800242a:	da0e      	bge.n	800244a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 0207 	and.w	r2, r3, #7
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	3310      	adds	r3, #16
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	705a      	strb	r2, [r3, #1]
 8002448:	e00c      	b.n	8002464 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_PCD_EP_SetStall+0x7e>
 8002480:	2302      	movs	r3, #2
 8002482:	e01c      	b.n	80024be <HAL_PCD_EP_SetStall+0xb8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 feef 	bl	8007276 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f005 f814 	bl	80074dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	7912      	ldrb	r2, [r2, #4]
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e040      	b.n	8002566 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da0e      	bge.n	800250a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	3310      	adds	r3, #16
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
 8002508:	e00e      	b.n	8002528 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 0207 	and.w	r2, r3, #7
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_PCD_EP_ClrStall+0x82>
 8002544:	2302      	movs	r3, #2
 8002546:	e00e      	b.n	8002566 <HAL_PCD_EP_ClrStall+0xa0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 fedd 	bl	8007316 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b096      	sub	sp, #88	@ 0x58
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002576:	e3bb      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002580:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002592:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 8175 	bne.w	8002886 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800259c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d14e      	bne.n	8002646 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025b8:	81fb      	strh	r3, [r7, #14]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	89fb      	ldrh	r3, [r7, #14]
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3310      	adds	r3, #16
 80025d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	3302      	adds	r3, #2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	441a      	add	r2, r3
 8002608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f006 fb9b 	bl	8008d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7b5b      	ldrb	r3, [r3, #13]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8368 	beq.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
 8002620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 8363 	bne.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7b5b      	ldrb	r3, [r3, #13]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	735a      	strb	r2, [r3, #13]
 8002644:	e354      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800264c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800265c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002660:	2b00      	cmp	r3, #0
 8002662:	d034      	beq.n	80026ce <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800269a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f004 ff6a 	bl	800757c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026b4:	4013      	ands	r3, r2
 80026b6:	823b      	strh	r3, [r7, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	8a3a      	ldrh	r2, [r7, #16]
 80026be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026c2:	b292      	uxth	r2, r2
 80026c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f006 fb12 	bl	8008cf0 <HAL_PCD_SetupStageCallback>
 80026cc:	e310      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f280 830c 	bge.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026e4:	4013      	ands	r3, r2
 80026e6:	83fb      	strh	r3, [r7, #30]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	8bfa      	ldrh	r2, [r7, #30]
 80026ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026f2:	b292      	uxth	r2, r2
 80026f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	3306      	adds	r3, #6
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002720:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d019      	beq.n	800275e <PCD_EP_ISR_Handler+0x1f0>
 800272a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002738:	6959      	ldr	r1, [r3, #20]
 800273a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800273e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002740:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002742:	b29b      	uxth	r3, r3
 8002744:	f004 ff1a 	bl	800757c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	441a      	add	r2, r3
 8002752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002754:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002756:	2100      	movs	r1, #0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f006 fadb 	bl	8008d14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800276c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 82bd 	bne.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
 8002776:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800277a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800277e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002782:	f000 82b5 	beq.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80027bc:	d91d      	bls.n	80027fa <PCD_EP_ISR_Handler+0x28c>
 80027be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x26a>
 80027d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d4:	3b01      	subs	r3, #1
 80027d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	e026      	b.n	8002848 <PCD_EP_ISR_Handler+0x2da>
 80027fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <PCD_EP_ISR_Handler+0x2aa>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002810:	b29a      	uxth	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	e017      	b.n	8002848 <PCD_EP_ISR_Handler+0x2da>
 8002818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <PCD_EP_ISR_Handler+0x2c4>
 800282c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282e:	3301      	adds	r3, #1
 8002830:	647b      	str	r3, [r7, #68]	@ 0x44
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29a      	uxth	r2, r3
 8002838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283a:	b29b      	uxth	r3, r3
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	b29b      	uxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002858:	827b      	strh	r3, [r7, #18]
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002860:	827b      	strh	r3, [r7, #18]
 8002862:	8a7b      	ldrh	r3, [r7, #18]
 8002864:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002868:	827b      	strh	r3, [r7, #18]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	8a7b      	ldrh	r3, [r7, #18]
 8002870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800287c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002880:	b29b      	uxth	r3, r3
 8002882:	8013      	strh	r3, [r2, #0]
 8002884:	e234      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800289a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f280 80fc 	bge.w	8002a9c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80028ba:	4013      	ands	r3, r2
 80028bc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80028d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028d6:	b292      	uxth	r2, r2
 80028d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f2:	7b1b      	ldrb	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d125      	bne.n	8002944 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	3306      	adds	r3, #6
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8092 	beq.w	8002a52 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002934:	6959      	ldr	r1, [r3, #20]
 8002936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002938:	88da      	ldrh	r2, [r3, #6]
 800293a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800293e:	f004 fe1d 	bl	800757c <USB_ReadPMA>
 8002942:	e086      	b.n	8002a52 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002946:	78db      	ldrb	r3, [r3, #3]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d10a      	bne.n	8002962 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800294c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002950:	461a      	mov	r2, r3
 8002952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f9d9 	bl	8002d0c <HAL_PCD_EP_DB_Receive>
 800295a:	4603      	mov	r3, r0
 800295c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002960:	e077      	b.n	8002a52 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800299a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800299e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d024      	beq.n	8002a0a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	3302      	adds	r3, #2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80029ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02e      	beq.n	8002a52 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fa:	6959      	ldr	r1, [r3, #20]
 80029fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fe:	891a      	ldrh	r2, [r3, #8]
 8002a00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a04:	f004 fdba 	bl	800757c <USB_ReadPMA>
 8002a08:	e023      	b.n	8002a52 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3306      	adds	r3, #6
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a44:	6959      	ldr	r1, [r3, #20]
 8002a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a48:	895a      	ldrh	r2, [r3, #10]
 8002a4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a4e:	f004 fd95 	bl	800757c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a68:	441a      	add	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <PCD_EP_ISR_Handler+0x514>
 8002a76:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d206      	bcs.n	8002a90 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f006 f943 	bl	8008d14 <HAL_PCD_DataOutStageCallback>
 8002a8e:	e005      	b.n	8002a9c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 f83c 	bl	8005b14 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8123 	beq.w	8002cf0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002aaa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afc:	78db      	ldrb	r3, [r3, #3]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80a2 	bne.w	8002c48 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	7b1b      	ldrb	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8093 	beq.w	8002c3a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d046      	beq.n	8002bae <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d126      	bne.n	8002b76 <PCD_EP_ISR_Handler+0x608>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	4413      	add	r3, r2
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	011a      	lsls	r2, r3, #4
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	4413      	add	r3, r2
 8002b4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	801a      	strh	r2, [r3, #0]
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	e061      	b.n	8002c3a <PCD_EP_ISR_Handler+0x6cc>
 8002b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d15d      	bne.n	8002c3a <PCD_EP_ISR_Handler+0x6cc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	4413      	add	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	011a      	lsls	r2, r3, #4
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e045      	b.n	8002c3a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d126      	bne.n	8002c0a <PCD_EP_ISR_Handler+0x69c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd0:	4413      	add	r3, r2
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	011a      	lsls	r2, r3, #4
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	4413      	add	r3, r2
 8002bde:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	e017      	b.n	8002c3a <PCD_EP_ISR_Handler+0x6cc>
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d113      	bne.n	8002c3a <PCD_EP_ISR_Handler+0x6cc>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c20:	4413      	add	r3, r2
 8002c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	011a      	lsls	r2, r3, #4
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	2200      	movs	r2, #0
 8002c38:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f006 f882 	bl	8008d4a <HAL_PCD_DataInStageCallback>
 8002c46:	e053      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d146      	bne.n	8002ce2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d907      	bls.n	8002c9c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	619a      	str	r2, [r3, #24]
 8002c9a:	e002      	b.n	8002ca2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f006 f84a 	bl	8008d4a <HAL_PCD_DataInStageCallback>
 8002cb6:	e01b      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cc0:	441a      	add	r2, r3
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cce:	441a      	add	r2, r3
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 ff1a 	bl	8005b14 <USB_EPStartXfer>
 8002ce0:	e006      	b.n	8002cf0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ce2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f91b 	bl	8002f26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b21b      	sxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f6ff ac3b 	blt.w	8002578 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3758      	adds	r7, #88	@ 0x58
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d07e      	beq.n	8002e22 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	8b7b      	ldrh	r3, [r7, #26]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d306      	bcc.n	8002d66 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	8b7b      	ldrh	r3, [r7, #26]
 8002d5e:	1ad2      	subs	r2, r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	619a      	str	r2, [r3, #24]
 8002d64:	e002      	b.n	8002d6c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d123      	bne.n	8002dbc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8e:	833b      	strh	r3, [r7, #24]
 8002d90:	8b3b      	ldrh	r3, [r7, #24]
 8002d92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d96:	833b      	strh	r3, [r7, #24]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	8b3b      	ldrh	r3, [r7, #24]
 8002da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01f      	beq.n	8002e06 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de0:	82fb      	strh	r3, [r7, #22]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	8afb      	ldrh	r3, [r7, #22]
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e06:	8b7b      	ldrh	r3, [r7, #26]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8087 	beq.w	8002f1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6959      	ldr	r1, [r3, #20]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	891a      	ldrh	r2, [r3, #8]
 8002e1a:	8b7b      	ldrh	r3, [r7, #26]
 8002e1c:	f004 fbae 	bl	800757c <USB_ReadPMA>
 8002e20:	e07c      	b.n	8002f1c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	3306      	adds	r3, #6
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	8b7b      	ldrh	r3, [r7, #26]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d306      	bcc.n	8002e64 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	8b7b      	ldrh	r3, [r7, #26]
 8002e5c:	1ad2      	subs	r2, r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	619a      	str	r2, [r3, #24]
 8002e62:	e002      	b.n	8002e6a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d123      	bne.n	8002eba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8c:	83fb      	strh	r3, [r7, #30]
 8002e8e:	8bfb      	ldrh	r3, [r7, #30]
 8002e90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e94:	83fb      	strh	r3, [r7, #30]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	8bfb      	ldrh	r3, [r7, #30]
 8002ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11f      	bne.n	8002f04 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ede:	83bb      	strh	r3, [r7, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	8bbb      	ldrh	r3, [r7, #28]
 8002ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f04:	8b7b      	ldrh	r3, [r7, #26]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	6959      	ldr	r1, [r3, #20]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	895a      	ldrh	r2, [r3, #10]
 8002f16:	8b7b      	ldrh	r3, [r7, #26]
 8002f18:	f004 fb30 	bl	800757c <USB_ReadPMA>
    }
  }

  return count;
 8002f1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b0a4      	sub	sp, #144	@ 0x90
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 81dd 	beq.w	80032fa <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	3302      	adds	r3, #2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f68:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d907      	bls.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	619a      	str	r2, [r3, #24]
 8002f86:	e002      	b.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 80b9 	bne.w	800310a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d126      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	4413      	add	r3, r2
 8002fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	011a      	lsls	r2, r3, #4
 8002fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	e01a      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d116      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	4413      	add	r3, r2
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	011a      	lsls	r2, r3, #4
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	4413      	add	r3, r2
 8003018:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800301c:	633b      	str	r3, [r7, #48]	@ 0x30
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d126      	bne.n	8003080 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	b29a      	uxth	r2, r3
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29a      	uxth	r2, r3
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e017      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d113      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	4413      	add	r3, r2
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	011a      	lsls	r2, r3, #4
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	4413      	add	r3, r2
 80030a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2200      	movs	r2, #0
 80030ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f005 fe47 	bl	8008d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 82fc 	beq.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	82fb      	strh	r3, [r7, #22]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	8afb      	ldrh	r3, [r7, #22]
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
 8003108:	e2da      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d021      	beq.n	8003158 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800314c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003154:	b29b      	uxth	r3, r3
 8003156:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 82ae 	bne.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800316c:	441a      	add	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800317a:	441a      	add	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d30b      	bcc.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	621a      	str	r2, [r3, #32]
 80031a2:	e017      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031bc:	e00a      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d165      	bne.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x382>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f0:	4413      	add	r3, r2
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	011a      	lsls	r2, r3, #4
 80031fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	b29a      	uxth	r2, r3
 8003210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003218:	2b3e      	cmp	r3, #62	@ 0x3e
 800321a:	d91d      	bls.n	8003258 <HAL_PCD_EP_DB_Transmit+0x332>
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_PCD_EP_DB_Transmit+0x310>
 8003230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003232:	3b01      	subs	r3, #1
 8003234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
 800323c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800323e:	b29b      	uxth	r3, r3
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	b29b      	uxth	r3, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003250:	b29a      	uxth	r2, r3
 8003252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	e044      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_PCD_EP_DB_Transmit+0x350>
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326e:	b29a      	uxth	r2, r3
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	e035      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_PCD_EP_DB_Transmit+0x36a>
 800328a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328c:	3301      	adds	r3, #1
 800328e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29a      	uxth	r2, r3
 8003296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003298:	b29b      	uxth	r3, r3
 800329a:	029b      	lsls	r3, r3, #10
 800329c:	b29b      	uxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	e01c      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d118      	bne.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c4:	4413      	add	r3, r2
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	011a      	lsls	r2, r3, #4
 80032ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d0:	4413      	add	r3, r2
 80032d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	b29a      	uxth	r2, r3
 80032de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	6959      	ldr	r1, [r3, #20]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	891a      	ldrh	r2, [r3, #8]
 80032ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f004 f8fd 	bl	80074f2 <USB_WritePMA>
 80032f8:	e1e2      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	3306      	adds	r3, #6
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003322:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800332e:	429a      	cmp	r2, r3
 8003330:	d307      	bcc.n	8003342 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	619a      	str	r2, [r3, #24]
 8003340:	e002      	b.n	8003348 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 80c0 	bne.w	80034d2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d126      	bne.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x482>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003368:	b29b      	uxth	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800336e:	4413      	add	r3, r2
 8003370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	011a      	lsls	r2, r3, #4
 8003378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800337a:	4413      	add	r3, r2
 800337c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003380:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338c:	b29a      	uxth	r2, r3
 800338e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800339c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	e01a      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d116      	bne.n	80033de <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033c4:	4413      	add	r3, r2
 80033c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	011a      	lsls	r2, r3, #4
 80033ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033d0:	4413      	add	r3, r2
 80033d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033da:	2200      	movs	r2, #0
 80033dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d12b      	bne.n	8003444 <HAL_PCD_EP_DB_Transmit+0x51e>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003400:	4413      	add	r3, r2
 8003402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	011a      	lsls	r2, r3, #4
 800340a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340c:	4413      	add	r3, r2
 800340e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003416:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003422:	b29a      	uxth	r2, r3
 8003424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29a      	uxth	r2, r3
 800343c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	e017      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d113      	bne.n	8003474 <HAL_PCD_EP_DB_Transmit+0x54e>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003454:	b29b      	uxth	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800345a:	4413      	add	r3, r2
 800345c:	677b      	str	r3, [r7, #116]	@ 0x74
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	011a      	lsls	r2, r3, #4
 8003464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003466:	4413      	add	r3, r2
 8003468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800346c:	673b      	str	r3, [r7, #112]	@ 0x70
 800346e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003470:	2200      	movs	r2, #0
 8003472:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f005 fc65 	bl	8008d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 811a 	bne.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80034bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	8013      	strh	r3, [r2, #0]
 80034d0:	e0f6      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d121      	bne.n	8003520 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800350c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003526:	2b01      	cmp	r3, #1
 8003528:	f040 80ca 	bne.w	80036c0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003534:	441a      	add	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003542:	441a      	add	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d30b      	bcc.n	800356c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003564:	1ad2      	subs	r2, r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	621a      	str	r2, [r3, #32]
 800356a:	e017      	b.n	800359c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003574:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003584:	e00a      	b.n	800359c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d165      	bne.n	8003676 <HAL_PCD_EP_DB_Transmit+0x750>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035be:	4413      	add	r3, r2
 80035c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	011a      	lsls	r2, r3, #4
 80035c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ca:	4413      	add	r3, r2
 80035cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035dc:	b29a      	uxth	r2, r3
 80035de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80035e8:	d91d      	bls.n	8003626 <HAL_PCD_EP_DB_Transmit+0x700>
 80035ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x6de>
 80035fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003600:	3b01      	subs	r3, #1
 8003602:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29a      	uxth	r2, r3
 800360a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800360c:	b29b      	uxth	r3, r3
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	b29b      	uxth	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800361e:	b29a      	uxth	r2, r3
 8003620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e041      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x784>
 8003626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <HAL_PCD_EP_DB_Transmit+0x71e>
 800362e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363c:	b29a      	uxth	r2, r3
 800363e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	e032      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x784>
 8003644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800364c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_PCD_EP_DB_Transmit+0x738>
 8003658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800365a:	3301      	adds	r3, #1
 800365c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800365e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29a      	uxth	r2, r3
 8003664:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003666:	b29b      	uxth	r3, r3
 8003668:	029b      	lsls	r3, r3, #10
 800366a:	b29b      	uxth	r3, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	b29a      	uxth	r2, r3
 8003670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e019      	b.n	80036aa <HAL_PCD_EP_DB_Transmit+0x784>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d115      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x784>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	4413      	add	r3, r2
 800368e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	011a      	lsls	r2, r3, #4
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	4413      	add	r3, r2
 800369a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800369e:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6959      	ldr	r1, [r3, #20]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	895a      	ldrh	r2, [r3, #10]
 80036b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f003 ff19 	bl	80074f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036da:	82bb      	strh	r3, [r7, #20]
 80036dc:	8abb      	ldrh	r3, [r7, #20]
 80036de:	f083 0310 	eor.w	r3, r3, #16
 80036e2:	82bb      	strh	r3, [r7, #20]
 80036e4:	8abb      	ldrh	r3, [r7, #20]
 80036e6:	f083 0320 	eor.w	r3, r3, #32
 80036ea:	82bb      	strh	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	8abb      	ldrh	r3, [r7, #20]
 80036fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370c:	b29b      	uxth	r3, r3
 800370e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3790      	adds	r7, #144	@ 0x90
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	817b      	strh	r3, [r7, #10]
 8003728:	4613      	mov	r3, r2
 800372a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003738:	897b      	ldrh	r3, [r7, #10]
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	3310      	adds	r3, #16
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e009      	b.n	8003764 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003750:	897a      	ldrh	r2, [r7, #10]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	b29a      	uxth	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	80da      	strh	r2, [r3, #6]
 8003778:	e00b      	b.n	8003792 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2201      	movs	r2, #1
 800377e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	b29a      	uxth	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b29a      	uxth	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e272      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c0:	4b92      	ldr	r3, [pc, #584]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d00c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037cc:	4b8f      	ldr	r3, [pc, #572]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d112      	bne.n	80037fe <HAL_RCC_OscConfig+0x5e>
 80037d8:	4b8c      	ldr	r3, [pc, #560]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d10b      	bne.n	80037fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e6:	4b89      	ldr	r3, [pc, #548]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d06c      	beq.n	80038cc <HAL_RCC_OscConfig+0x12c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d168      	bne.n	80038cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e24c      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x76>
 8003808:	4b80      	ldr	r3, [pc, #512]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e02e      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x98>
 800381e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7a      	ldr	r2, [pc, #488]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b78      	ldr	r3, [pc, #480]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a77      	ldr	r2, [pc, #476]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xbc>
 8003842:	4b72      	ldr	r3, [pc, #456]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a71      	ldr	r2, [pc, #452]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xd4>
 800385c:	4b6b      	ldr	r3, [pc, #428]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6a      	ldr	r2, [pc, #424]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b68      	ldr	r3, [pc, #416]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a67      	ldr	r2, [pc, #412]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fd f8d4 	bl	8000a28 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd f8d0 	bl	8000a28 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e200      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b5d      	ldr	r3, [pc, #372]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xe4>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd f8c0 	bl	8000a28 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd f8bc 	bl	8000a28 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1ec      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x10c>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d063      	beq.n	80039a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038da:	4b4c      	ldr	r3, [pc, #304]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038e6:	4b49      	ldr	r3, [pc, #292]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x18c>
 80038f2:	4b46      	ldr	r3, [pc, #280]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x176>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1c0      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b3d      	ldr	r3, [pc, #244]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4939      	ldr	r1, [pc, #228]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_RCC_OscConfig+0x270>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fd f875 	bl	8000a28 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fd f871 	bl	8000a28 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1a1      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4927      	ldr	r1, [pc, #156]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b26      	ldr	r3, [pc, #152]	@ (8003a10 <HAL_RCC_OscConfig+0x270>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fd f854 	bl	8000a28 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7fd f850 	bl	8000a28 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e180      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03a      	beq.n	8003a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fd f834 	bl	8000a28 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fd f830 	bl	8000a28 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e160      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f000 faba 	bl	8003f5c <RCC_Delay>
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f0:	f7fd f81a 	bl	8000a28 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f6:	e00f      	b.n	8003a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fd f816 	bl	8000a28 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d908      	bls.n	8003a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e146      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	42420000 	.word	0x42420000
 8003a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	4b92      	ldr	r3, [pc, #584]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e9      	bne.n	80039f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a6 	beq.w	8003b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b8b      	ldr	r3, [pc, #556]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b88      	ldr	r3, [pc, #544]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a87      	ldr	r2, [pc, #540]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]
 8003a4e:	4b85      	ldr	r3, [pc, #532]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b82      	ldr	r3, [pc, #520]	@ (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7fc ffd7 	bl	8000a28 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fc ffd3 	bl	8000a28 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	@ 0x64
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e103      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b75      	ldr	r3, [pc, #468]	@ (8003c68 <HAL_RCC_OscConfig+0x4c8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x312>
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	e02d      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x334>
 8003aba:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a69      	ldr	r2, [pc, #420]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4b67      	ldr	r3, [pc, #412]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a66      	ldr	r2, [pc, #408]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	e01c      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x356>
 8003adc:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4a60      	ldr	r2, [pc, #384]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	6213      	str	r3, [r2, #32]
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a5d      	ldr	r2, [pc, #372]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	e00b      	b.n	8003b0e <HAL_RCC_OscConfig+0x36e>
 8003af6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6213      	str	r3, [r2, #32]
 8003b02:	4b58      	ldr	r3, [pc, #352]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a57      	ldr	r2, [pc, #348]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d015      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fc ff87 	bl	8000a28 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fc ff83 	bl	8000a28 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0b1      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b4b      	ldr	r3, [pc, #300]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCC_OscConfig+0x37e>
 8003b40:	e014      	b.n	8003b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fc ff71 	bl	8000a28 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fc ff6d 	bl	8000a28 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e09b      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	4b40      	ldr	r3, [pc, #256]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ee      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b72:	4b3c      	ldr	r3, [pc, #240]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8087 	beq.w	8003c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b88:	4b36      	ldr	r3, [pc, #216]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d061      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d146      	bne.n	8003c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9c:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fc ff41 	bl	8000a28 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fc ff3d 	bl	8000a28 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e06d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bbc:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d108      	bne.n	8003be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bd2:	4b24      	ldr	r3, [pc, #144]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4921      	ldr	r1, [pc, #132]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a19      	ldr	r1, [r3, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	491b      	ldr	r1, [pc, #108]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fc ff11 	bl	8000a28 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fc ff0d 	bl	8000a28 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x46a>
 8003c28:	e035      	b.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_RCC_OscConfig+0x4cc>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fc fefa 	bl	8000a28 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fc fef6 	bl	8000a28 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e026      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x498>
 8003c56:	e01e      	b.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e019      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_RCC_OscConfig+0x500>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d0      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b67      	ldr	r3, [pc, #412]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4965      	ldr	r1, [pc, #404]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0b8      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d00:	4b59      	ldr	r3, [pc, #356]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a58      	ldr	r2, [pc, #352]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d18:	4b53      	ldr	r3, [pc, #332]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4b50      	ldr	r3, [pc, #320]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	494d      	ldr	r1, [pc, #308]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d040      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	4b47      	ldr	r3, [pc, #284]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d115      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e07f      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3d      	ldr	r3, [pc, #244]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06b      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4936      	ldr	r1, [pc, #216]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fc fe48 	bl	8000a28 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fc fe44 	bl	8000a28 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e053      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b27      	ldr	r3, [pc, #156]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d210      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b24      	ldr	r3, [pc, #144]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	4922      	ldr	r1, [pc, #136]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b20      	ldr	r3, [pc, #128]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e032      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4916      	ldr	r1, [pc, #88]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	490e      	ldr	r1, [pc, #56]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e32:	f000 f821 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490a      	ldr	r1, [pc, #40]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <HAL_RCC_ClockConfig+0x1cc>)
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <HAL_RCC_ClockConfig+0x1d0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fda6 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08009254 	.word	0x08009254
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x36>
 8003ea6:	e027      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	613b      	str	r3, [r7, #16]
      break;
 8003eac:	e027      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0c9b      	lsrs	r3, r3, #18
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0c5b      	lsrs	r3, r3, #17
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
      break;
 8003ef6:	e002      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efa:	613b      	str	r3, [r7, #16]
      break;
 8003efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efe:	693b      	ldr	r3, [r7, #16]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	0800926c 	.word	0x0800926c
 8003f18:	0800927c 	.word	0x0800927c
 8003f1c:	003d0900 	.word	0x003d0900

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff2 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08009264 	.word	0x08009264

08003f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f64:	4b0a      	ldr	r3, [pc, #40]	@ (8003f90 <RCC_Delay+0x34>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <RCC_Delay+0x38>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0a5b      	lsrs	r3, r3, #9
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f78:	bf00      	nop
  }
  while (Delay --);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1e5a      	subs	r2, r3, #1
 8003f7e:	60fa      	str	r2, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f9      	bne.n	8003f78 <RCC_Delay+0x1c>
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	20000000 	.word	0x20000000
 8003f94:	10624dd3 	.word	0x10624dd3

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d07d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	61d3      	str	r3, [r2, #28]
 8003fd0:	4b49      	ldr	r3, [pc, #292]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b46      	ldr	r3, [pc, #280]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d118      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fec:	4b43      	ldr	r3, [pc, #268]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a42      	ldr	r2, [pc, #264]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff8:	f7fc fd16 	bl	8000a28 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	e008      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fc fd12 	bl	8000a28 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	@ 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e06d      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b3a      	ldr	r3, [pc, #232]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401e:	4b36      	ldr	r3, [pc, #216]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02e      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	429a      	cmp	r2, r3
 800403a:	d027      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800403c:	4b2e      	ldr	r3, [pc, #184]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004044:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004046:	4b2e      	ldr	r3, [pc, #184]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404c:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004052:	4a29      	ldr	r2, [pc, #164]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d014      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fc fce1 	bl	8000a28 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fc fcdd 	bl	8000a28 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e036      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004080:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ee      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408c:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4917      	ldr	r1, [pc, #92]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	4313      	orrs	r3, r2
 800409c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a4:	4b14      	ldr	r3, [pc, #80]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4a13      	ldr	r2, [pc, #76]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040bc:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	490b      	ldr	r1, [pc, #44]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	42420440 	.word	0x42420440

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e041      	b.n	800419a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fb70 	bl	8000810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fab2 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e041      	b.n	8004238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f839 	bl	8004240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 fa63 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_TIM_PWM_Start+0x24>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e022      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d109      	bne.n	8004292 <HAL_TIM_PWM_Start+0x3e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e015      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d109      	bne.n	80042ac <HAL_TIM_PWM_Start+0x58>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e008      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e05e      	b.n	8004384 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start+0x82>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d4:	e013      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Start+0x92>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f4:	e003      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fc5c 	bl	8004bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_TIM_PWM_Start+0x138>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d107      	bne.n	8004326 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a18      	ldr	r2, [pc, #96]	@ (800438c <HAL_TIM_PWM_Start+0x138>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIM_PWM_Start+0xfa>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004338:	d009      	beq.n	800434e <HAL_TIM_PWM_Start+0xfa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <HAL_TIM_PWM_Start+0x13c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIM_PWM_Start+0xfa>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <HAL_TIM_PWM_Start+0x140>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d111      	bne.n	8004372 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b06      	cmp	r3, #6
 800435e:	d010      	beq.n	8004382 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	e007      	b.n	8004382 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800

08004398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0ae      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	f200 809f 	bhi.w	8004504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043c6:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004505 	.word	0x08004505
 80043d4:	08004505 	.word	0x08004505
 80043d8:	08004505 	.word	0x08004505
 80043dc:	08004441 	.word	0x08004441
 80043e0:	08004505 	.word	0x08004505
 80043e4:	08004505 	.word	0x08004505
 80043e8:	08004505 	.word	0x08004505
 80043ec:	08004483 	.word	0x08004483
 80043f0:	08004505 	.word	0x08004505
 80043f4:	08004505 	.word	0x08004505
 80043f8:	08004505 	.word	0x08004505
 80043fc:	080044c3 	.word	0x080044c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f9be 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      break;
 800443e:	e064      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa04 	bl	8004854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	021a      	lsls	r2, r3, #8
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
      break;
 8004480:	e043      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fa4d 	bl	8004928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0208 	orr.w	r2, r2, #8
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0204 	bic.w	r2, r2, #4
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
      break;
 80044c0:	e023      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa97 	bl	80049fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	021a      	lsls	r2, r3, #8
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	61da      	str	r2, [r3, #28]
      break;
 8004502:	e002      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e0b4      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x186>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004570:	d03e      	beq.n	80045f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004576:	f200 8087 	bhi.w	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457e:	f000 8086 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x172>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004586:	d87f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b70      	cmp	r3, #112	@ 0x70
 800458a:	d01a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0xa6>
 800458c:	2b70      	cmp	r3, #112	@ 0x70
 800458e:	d87b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b60      	cmp	r3, #96	@ 0x60
 8004592:	d050      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x11a>
 8004594:	2b60      	cmp	r3, #96	@ 0x60
 8004596:	d877      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b50      	cmp	r3, #80	@ 0x50
 800459a:	d03c      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xfa>
 800459c:	2b50      	cmp	r3, #80	@ 0x50
 800459e:	d873      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d058      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x13a>
 80045a4:	2b40      	cmp	r3, #64	@ 0x40
 80045a6:	d86f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b30      	cmp	r3, #48	@ 0x30
 80045aa:	d064      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b30      	cmp	r3, #48	@ 0x30
 80045ae:	d86b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d060      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d867      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d05a      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	e062      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d2:	f000 fad8 	bl	8004b86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	609a      	str	r2, [r3, #8]
      break;
 80045ee:	e04f      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004600:	f000 fac1 	bl	8004b86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004612:	609a      	str	r2, [r3, #8]
      break;
 8004614:	e03c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 fa38 	bl	8004a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2150      	movs	r1, #80	@ 0x50
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa8f 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 8004634:	e02c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fa56 	bl	8004af4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2160      	movs	r1, #96	@ 0x60
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa7f 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 8004654:	e01c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fa18 	bl	8004a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2140      	movs	r1, #64	@ 0x40
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa6f 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 8004674:	e00c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f000 fa66 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 8004686:	e003      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e000      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2f      	ldr	r2, [pc, #188]	@ (800477c <TIM_Base_SetConfig+0xd0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004780 <TIM_Base_SetConfig+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004784 <TIM_Base_SetConfig+0xd8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a22      	ldr	r2, [pc, #136]	@ (800477c <TIM_Base_SetConfig+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d007      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1f      	ldr	r2, [pc, #124]	@ (8004780 <TIM_Base_SetConfig+0xd4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1e      	ldr	r2, [pc, #120]	@ (8004784 <TIM_Base_SetConfig+0xd8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d108      	bne.n	8004720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0d      	ldr	r2, [pc, #52]	@ (800477c <TIM_Base_SetConfig+0xd0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]
  }
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0201 	bic.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0302 	bic.w	r3, r3, #2
 80047d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1c      	ldr	r2, [pc, #112]	@ (8004850 <TIM_OC1_SetConfig+0xc8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10c      	bne.n	80047fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0308 	bic.w	r3, r3, #8
 80047ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a13      	ldr	r2, [pc, #76]	@ (8004850 <TIM_OC1_SetConfig+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00

08004854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 0210 	bic.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <TIM_OC2_SetConfig+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10d      	bne.n	80048d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a14      	ldr	r2, [pc, #80]	@ (8004924 <TIM_OC2_SetConfig+0xd0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d113      	bne.n	8004900 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00

08004928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <TIM_OC3_SetConfig+0xd0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10d      	bne.n	80049a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800498c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a14      	ldr	r2, [pc, #80]	@ (80049f8 <TIM_OC3_SetConfig+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d113      	bne.n	80049d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00

080049fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	@ (8004a94 <TIM_OC4_SetConfig+0x98>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d109      	bne.n	8004a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00

08004a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0201 	bic.w	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 030a 	bic.w	r3, r3, #10
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0210 	bic.w	r2, r3, #16
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	031b      	lsls	r3, r3, #12
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 0307 	orr.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	021a      	lsls	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_TIMEx_PWMN_Start+0x24>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e022      	b.n	8004c76 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d109      	bne.n	8004c4a <HAL_TIMEx_PWMN_Start+0x3e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e015      	b.n	8004c76 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIMEx_PWMN_Start+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e059      	b.n	8004d32 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_TIMEx_PWMN_Start+0x82>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c8c:	e013      	b.n	8004cb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d104      	bne.n	8004c9e <HAL_TIMEx_PWMN_Start+0x92>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c9c:	e00b      	b.n	8004cb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d104      	bne.n	8004cae <HAL_TIMEx_PWMN_Start+0xa2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cac:	e003      	b.n	8004cb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f8f1 	bl	8004ea6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <HAL_TIMEx_PWMN_Start+0x130>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIMEx_PWMN_Start+0xf0>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIMEx_PWMN_Start+0xf0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <HAL_TIMEx_PWMN_Start+0x134>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIMEx_PWMN_Start+0xf0>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	@ (8004d44 <HAL_TIMEx_PWMN_Start+0x138>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d111      	bne.n	8004d20 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d010      	beq.n	8004d30 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e007      	b.n	8004d30 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e046      	b.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a12      	ldr	r2, [pc, #72]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a10      	ldr	r2, [pc, #64]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10c      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800

08004e04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e03d      	b.n	8004e9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2204      	movs	r2, #4
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	401a      	ands	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f18:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f3c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4013      	ands	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	4638      	mov	r0, r7
 8004f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
	...

08004fbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b09d      	sub	sp, #116	@ 0x74
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	78db      	ldrb	r3, [r3, #3]
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d81f      	bhi.n	800502e <USB_ActivateEndpoint+0x72>
 8004fee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff4 <USB_ActivateEndpoint+0x38>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005037 	.word	0x08005037
 8005000:	08005013 	.word	0x08005013
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005010:	e012      	b.n	8005038 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005012:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005016:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800501a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800501e:	e00b      	b.n	8005038 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005020:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005028:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800502c:	e004      	b.n	8005038 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005034:	e000      	b.n	8005038 <USB_ActivateEndpoint+0x7c>
      break;
 8005036:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005070:	b29b      	uxth	r3, r3
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	4313      	orrs	r3, r2
 8005078:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800508a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	7b1b      	ldrb	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 8178 	bne.w	8005398 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8084 	beq.w	80051ba <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	4413      	add	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	011a      	lsls	r2, r3, #4
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	88db      	ldrh	r3, [r3, #6]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	b29b      	uxth	r3, r3
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	827b      	strh	r3, [r7, #18]
 80050f4:	8a7b      	ldrh	r3, [r7, #18]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01b      	beq.n	8005136 <USB_ActivateEndpoint+0x17a>
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005114:	823b      	strh	r3, [r7, #16]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	8a3b      	ldrh	r3, [r7, #16]
 8005122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005132:	b29b      	uxth	r3, r3
 8005134:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	78db      	ldrb	r3, [r3, #3]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d020      	beq.n	8005180 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005154:	81bb      	strh	r3, [r7, #12]
 8005156:	89bb      	ldrh	r3, [r7, #12]
 8005158:	f083 0320 	eor.w	r3, r3, #32
 800515c:	81bb      	strh	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	89bb      	ldrh	r3, [r7, #12]
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
 800517e:	e2d5      	b.n	800572c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005196:	81fb      	strh	r3, [r7, #14]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]
 80051b8:	e2b8      	b.n	800572c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	4413      	add	r3, r2
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	011a      	lsls	r2, r3, #4
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	88db      	ldrh	r3, [r3, #6]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ec:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	4413      	add	r3, r2
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	011a      	lsls	r2, r3, #4
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	4413      	add	r3, r2
 800520c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521c:	b29a      	uxth	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b3e      	cmp	r3, #62	@ 0x3e
 8005228:	d91d      	bls.n	8005266 <USB_ActivateEndpoint+0x2aa>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <USB_ActivateEndpoint+0x288>
 800523e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005240:	3b01      	subs	r3, #1
 8005242:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29a      	uxth	r2, r3
 800524a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800524c:	b29b      	uxth	r3, r3
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	b29b      	uxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29a      	uxth	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e026      	b.n	80052b4 <USB_ActivateEndpoint+0x2f8>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <USB_ActivateEndpoint+0x2c8>
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527c:	b29a      	uxth	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	e017      	b.n	80052b4 <USB_ActivateEndpoint+0x2f8>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <USB_ActivateEndpoint+0x2e2>
 8005298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800529a:	3301      	adds	r3, #1
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80052c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80052c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <USB_ActivateEndpoint+0x348>
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	843b      	strh	r3, [r7, #32]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	8c3b      	ldrh	r3, [r7, #32]
 80052f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005300:	b29b      	uxth	r3, r3
 8005302:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d124      	bne.n	8005356 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	83bb      	strh	r3, [r7, #28]
 8005324:	8bbb      	ldrh	r3, [r7, #28]
 8005326:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800532a:	83bb      	strh	r3, [r7, #28]
 800532c:	8bbb      	ldrh	r3, [r7, #28]
 800532e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005332:	83bb      	strh	r3, [r7, #28]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	8bbb      	ldrh	r3, [r7, #28]
 8005340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	8013      	strh	r3, [r2, #0]
 8005354:	e1ea      	b.n	800572c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536c:	83fb      	strh	r3, [r7, #30]
 800536e:	8bfb      	ldrh	r3, [r7, #30]
 8005370:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005374:	83fb      	strh	r3, [r7, #30]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800538e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]
 8005396:	e1c9      	b.n	800572c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	78db      	ldrb	r3, [r3, #3]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11e      	bne.n	80053de <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80053c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053d8:	b29b      	uxth	r3, r3
 80053da:	8013      	strh	r3, [r2, #0]
 80053dc:	e01d      	b.n	800541a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80053f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005424:	b29b      	uxth	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800542a:	4413      	add	r3, r2
 800542c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	011a      	lsls	r2, r3, #4
 8005434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005436:	4413      	add	r3, r2
 8005438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	891b      	ldrh	r3, [r3, #8]
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	b29b      	uxth	r3, r3
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	657b      	str	r3, [r7, #84]	@ 0x54
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545e:	4413      	add	r3, r2
 8005460:	657b      	str	r3, [r7, #84]	@ 0x54
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546a:	4413      	add	r3, r2
 800546c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005470:	653b      	str	r3, [r7, #80]	@ 0x50
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	895b      	ldrh	r3, [r3, #10]
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005480:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 8093 	bne.w	80055b2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800549c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80054a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01b      	beq.n	80054e0 <USB_ActivateEndpoint+0x524>
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80054cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80054ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80054f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <USB_ActivateEndpoint+0x574>
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005528:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005548:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800554a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800554e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005550:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005556:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]
 80055b0:	e0bc      	b.n	800572c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80055c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01d      	beq.n	800560a <USB_ActivateEndpoint+0x64e>
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800561a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01d      	beq.n	8005662 <USB_ActivateEndpoint+0x6a6>
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	78db      	ldrb	r3, [r3, #3]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d024      	beq.n	80056b4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005680:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005688:	f083 0320 	eor.w	r3, r3, #32
 800568c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800569e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]
 80056b2:	e01d      	b.n	80056f0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80056dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005706:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800572c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005730:	4618      	mov	r0, r3
 8005732:	3774      	adds	r7, #116	@ 0x74
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop

0800573c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800573c:	b480      	push	{r7}
 800573e:	b08d      	sub	sp, #52	@ 0x34
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	7b1b      	ldrb	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 808e 	bne.w	800586c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d044      	beq.n	80057e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	81bb      	strh	r3, [r7, #12]
 8005766:	89bb      	ldrh	r3, [r7, #12]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01b      	beq.n	80057a8 <USB_DeactivateEndpoint+0x6c>
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	817b      	strh	r3, [r7, #10]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	897b      	ldrh	r3, [r7, #10]
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800579c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057be:	813b      	strh	r3, [r7, #8]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
 80057e0:	e192      	b.n	8005b08 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	827b      	strh	r3, [r7, #18]
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01b      	beq.n	8005832 <USB_DeactivateEndpoint+0xf6>
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800580c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005810:	823b      	strh	r3, [r7, #16]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	8a3b      	ldrh	r3, [r7, #16]
 800581e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005826:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	b29b      	uxth	r3, r3
 8005830:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005848:	81fb      	strh	r3, [r7, #14]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800585e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]
 800586a:	e14d      	b.n	8005b08 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 80a5 	bne.w	80059c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	843b      	strh	r3, [r7, #32]
 8005884:	8c3b      	ldrh	r3, [r7, #32]
 8005886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01b      	beq.n	80058c6 <USB_DeactivateEndpoint+0x18a>
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a4:	83fb      	strh	r3, [r7, #30]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	8bfb      	ldrh	r3, [r7, #30]
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	83bb      	strh	r3, [r7, #28]
 80058d4:	8bbb      	ldrh	r3, [r7, #28]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01b      	beq.n	8005916 <USB_DeactivateEndpoint+0x1da>
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f4:	837b      	strh	r3, [r7, #26]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	441a      	add	r2, r3
 8005900:	8b7b      	ldrh	r3, [r7, #26]
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800590a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592c:	833b      	strh	r3, [r7, #24]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	8b3b      	ldrh	r3, [r7, #24]
 800593a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800593e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800594a:	b29b      	uxth	r3, r3
 800594c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005964:	82fb      	strh	r3, [r7, #22]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	8afb      	ldrh	r3, [r7, #22]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800599c:	82bb      	strh	r3, [r7, #20]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	441a      	add	r2, r3
 80059a8:	8abb      	ldrh	r3, [r7, #20]
 80059aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	8013      	strh	r3, [r2, #0]
 80059be:	e0a3      	b.n	8005b08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80059ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80059d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <USB_DeactivateEndpoint+0x2d4>
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80059fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005a1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <USB_DeactivateEndpoint+0x324>
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a76:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3734      	adds	r7, #52	@ 0x34
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0c2      	sub	sp, #264	@ 0x108
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b22:	6018      	str	r0, [r3, #0]
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	f040 86b7 	bne.w	80068ae <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d908      	bls.n	8005b6e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b6c:	e007      	b.n	8005b7e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	7b1b      	ldrb	r3, [r3, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13a      	bne.n	8005c04 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6959      	ldr	r1, [r3, #20]
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	88da      	ldrh	r2, [r3, #6]
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bb4:	6800      	ldr	r0, [r0, #0]
 8005bb6:	f001 fc9c 	bl	80074f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	011a      	lsls	r2, r3, #4
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	f000 be1f 	b.w	8006842 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	78db      	ldrb	r3, [r3, #3]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	f040 8462 	bne.w	80064da <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f240 83df 	bls.w	80063f2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c84:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 81c7 	beq.w	8006064 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d177      	bne.n	8005de2 <USB_EPStartXfer+0x2ce>
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	4413      	add	r3, r2
 8005d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d26:	4413      	add	r3, r2
 8005d28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d44:	d921      	bls.n	8005d8a <USB_EPStartXfer+0x276>
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <USB_EPStartXfer+0x252>
 8005d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e050      	b.n	8005e2c <USB_EPStartXfer+0x318>
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <USB_EPStartXfer+0x294>
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e041      	b.n	8005e2c <USB_EPStartXfer+0x318>
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <USB_EPStartXfer+0x2b4>
 8005dbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e024      	b.n	8005e2c <USB_EPStartXfer+0x318>
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d11c      	bne.n	8005e2c <USB_EPStartXfer+0x318>
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	4413      	add	r3, r2
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	895b      	ldrh	r3, [r3, #10]
 8005e38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6959      	ldr	r1, [r3, #20]
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	f001 fb49 	bl	80074f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	441a      	add	r2, r3
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d90f      	bls.n	8005eba <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	621a      	str	r2, [r3, #32]
 8005eb8:	e00e      	b.n	8005ed8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d177      	bne.n	8005fd8 <USB_EPStartXfer+0x4c4>
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	4413      	add	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	011a      	lsls	r2, r3, #4
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f3a:	d921      	bls.n	8005f80 <USB_EPStartXfer+0x46c>
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <USB_EPStartXfer+0x448>
 8005f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f56:	3b01      	subs	r3, #1
 8005f58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e056      	b.n	800602e <USB_EPStartXfer+0x51a>
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <USB_EPStartXfer+0x48a>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e047      	b.n	800602e <USB_EPStartXfer+0x51a>
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <USB_EPStartXfer+0x4aa>
 8005fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	029b      	lsls	r3, r3, #10
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e02a      	b.n	800602e <USB_EPStartXfer+0x51a>
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d122      	bne.n	800602e <USB_EPStartXfer+0x51a>
 8005fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	4413      	add	r3, r2
 800600a:	623b      	str	r3, [r7, #32]
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011a      	lsls	r2, r3, #4
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	4413      	add	r3, r2
 800601e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006028:	b29a      	uxth	r2, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	891b      	ldrh	r3, [r3, #8]
 800603a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6959      	ldr	r1, [r3, #20]
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604e:	b29b      	uxth	r3, r3
 8006050:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006054:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006058:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f001 fa48 	bl	80074f2 <USB_WritePMA>
 8006062:	e3ee      	b.n	8006842 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d177      	bne.n	8006164 <USB_EPStartXfer+0x650>
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006094:	4413      	add	r3, r2
 8006096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	011a      	lsls	r2, r3, #4
 80060a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060a8:	4413      	add	r3, r2
 80060aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80060c6:	d921      	bls.n	800610c <USB_EPStartXfer+0x5f8>
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <USB_EPStartXfer+0x5d4>
 80060de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060e2:	3b01      	subs	r3, #1
 80060e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	029b      	lsls	r3, r3, #10
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4313      	orrs	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e056      	b.n	80061ba <USB_EPStartXfer+0x6a6>
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <USB_EPStartXfer+0x616>
 8006114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006122:	b29a      	uxth	r2, r3
 8006124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e047      	b.n	80061ba <USB_EPStartXfer+0x6a6>
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <USB_EPStartXfer+0x636>
 8006140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006144:	3301      	adds	r3, #1
 8006146:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800614a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29a      	uxth	r2, r3
 8006150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29b      	uxth	r3, r3
 800615a:	4313      	orrs	r3, r2
 800615c:	b29a      	uxth	r2, r3
 800615e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e02a      	b.n	80061ba <USB_EPStartXfer+0x6a6>
 8006164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d122      	bne.n	80061ba <USB_EPStartXfer+0x6a6>
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006194:	4413      	add	r3, r2
 8006196:	653b      	str	r3, [r7, #80]	@ 0x50
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	011a      	lsls	r2, r3, #4
 80061a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a8:	4413      	add	r3, r2
 80061aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	891b      	ldrh	r3, [r3, #8]
 80061c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6959      	ldr	r1, [r3, #20]
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061e8:	6800      	ldr	r0, [r0, #0]
 80061ea:	f001 f982 	bl	80074f2 <USB_WritePMA>
            ep->xfer_buff += len;
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fe:	441a      	add	r2, r3
 8006200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800620c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	429a      	cmp	r2, r3
 8006226:	d90f      	bls.n	8006248 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006238:	1ad2      	subs	r2, r2, r3
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	621a      	str	r2, [r3, #32]
 8006246:	e00e      	b.n	8006266 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	643b      	str	r3, [r7, #64]	@ 0x40
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d177      	bne.n	8006372 <USB_EPStartXfer+0x85e>
 8006282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800628e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	4413      	add	r3, r2
 80062a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	011a      	lsls	r2, r3, #4
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80062d4:	d921      	bls.n	800631a <USB_EPStartXfer+0x806>
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <USB_EPStartXfer+0x7e2>
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	b29b      	uxth	r3, r3
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	b29b      	uxth	r3, r3
 8006306:	4313      	orrs	r3, r2
 8006308:	b29b      	uxth	r3, r3
 800630a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006312:	b29a      	uxth	r2, r3
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e050      	b.n	80063bc <USB_EPStartXfer+0x8a8>
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <USB_EPStartXfer+0x824>
 8006322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e041      	b.n	80063bc <USB_EPStartXfer+0x8a8>
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <USB_EPStartXfer+0x844>
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	3301      	adds	r3, #1
 8006354:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006362:	b29b      	uxth	r3, r3
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	b29b      	uxth	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e024      	b.n	80063bc <USB_EPStartXfer+0x8a8>
 8006372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d11c      	bne.n	80063bc <USB_EPStartXfer+0x8a8>
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006396:	4413      	add	r3, r2
 8006398:	643b      	str	r3, [r7, #64]	@ 0x40
 800639a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	011a      	lsls	r2, r3, #4
 80063a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063aa:	4413      	add	r3, r2
 80063ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	895b      	ldrh	r3, [r3, #10]
 80063c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6959      	ldr	r1, [r3, #20]
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	f001 f881 	bl	80074f2 <USB_WritePMA>
 80063f0:	e227      	b.n	8006842 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006428:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800642c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	441a      	add	r2, r3
 8006446:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800647e:	4413      	add	r3, r2
 8006480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	011a      	lsls	r2, r3, #4
 8006490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006492:	4413      	add	r3, r2
 8006494:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	b29a      	uxth	r2, r3
 80064a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	891b      	ldrh	r3, [r3, #8]
 80064b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6959      	ldr	r1, [r3, #20]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064d2:	6800      	ldr	r0, [r0, #0]
 80064d4:	f001 f80d 	bl	80074f2 <USB_WritePMA>
 80064d8:	e1b3      	b.n	8006842 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80c6 	beq.w	80066ac <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	673b      	str	r3, [r7, #112]	@ 0x70
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d177      	bne.n	800662c <USB_EPStartXfer+0xb18>
 800653c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800655c:	4413      	add	r3, r2
 800655e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	011a      	lsls	r2, r3, #4
 800656e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006570:	4413      	add	r3, r2
 8006572:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006576:	667b      	str	r3, [r7, #100]	@ 0x64
 8006578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006582:	b29a      	uxth	r2, r3
 8006584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	2b3e      	cmp	r3, #62	@ 0x3e
 800658e:	d921      	bls.n	80065d4 <USB_EPStartXfer+0xac0>
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <USB_EPStartXfer+0xa9c>
 80065a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065aa:	3b01      	subs	r3, #1
 80065ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29b      	uxth	r3, r3
 80065c0:	4313      	orrs	r3, r2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e050      	b.n	8006676 <USB_EPStartXfer+0xb62>
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <USB_EPStartXfer+0xade>
 80065dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e041      	b.n	8006676 <USB_EPStartXfer+0xb62>
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <USB_EPStartXfer+0xafe>
 8006608:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800660c:	3301      	adds	r3, #1
 800660e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e024      	b.n	8006676 <USB_EPStartXfer+0xb62>
 800662c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d11c      	bne.n	8006676 <USB_EPStartXfer+0xb62>
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006650:	4413      	add	r3, r2
 8006652:	673b      	str	r3, [r7, #112]	@ 0x70
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006664:	4413      	add	r3, r2
 8006666:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800666a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006670:	b29a      	uxth	r2, r3
 8006672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006674:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	895b      	ldrh	r3, [r3, #10]
 8006682:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6959      	ldr	r1, [r3, #20]
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	b29b      	uxth	r3, r3
 8006698:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800669c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	f000 ff24 	bl	80074f2 <USB_WritePMA>
 80066aa:	e0ca      	b.n	8006842 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d177      	bne.n	80067ac <USB_EPStartXfer+0xc98>
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066dc:	4413      	add	r3, r2
 80066de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006702:	b29a      	uxth	r2, r3
 8006704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	2b3e      	cmp	r3, #62	@ 0x3e
 800670e:	d921      	bls.n	8006754 <USB_EPStartXfer+0xc40>
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <USB_EPStartXfer+0xc1c>
 8006726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800672a:	3b01      	subs	r3, #1
 800672c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29b      	uxth	r3, r3
 8006740:	4313      	orrs	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674c:	b29a      	uxth	r2, r3
 800674e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e05c      	b.n	800680e <USB_EPStartXfer+0xcfa>
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <USB_EPStartXfer+0xc5e>
 800675c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29a      	uxth	r2, r3
 800676c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e04d      	b.n	800680e <USB_EPStartXfer+0xcfa>
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <USB_EPStartXfer+0xc7e>
 8006788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800678c:	3301      	adds	r3, #1
 800678e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e030      	b.n	800680e <USB_EPStartXfer+0xcfa>
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d128      	bne.n	800680e <USB_EPStartXfer+0xcfa>
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067d8:	b29b      	uxth	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067e0:	4413      	add	r3, r2
 80067e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011a      	lsls	r2, r3, #4
 80067f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006806:	b29a      	uxth	r2, r3
 8006808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800680c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	891b      	ldrh	r3, [r3, #8]
 800681a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800681e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6959      	ldr	r1, [r3, #20]
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	b29b      	uxth	r3, r3
 8006830:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006834:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006838:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800683c:	6800      	ldr	r0, [r0, #0]
 800683e:	f000 fe58 	bl	80074f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006868:	817b      	strh	r3, [r7, #10]
 800686a:	897b      	ldrh	r3, [r7, #10]
 800686c:	f083 0310 	eor.w	r3, r3, #16
 8006870:	817b      	strh	r3, [r7, #10]
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	f083 0320 	eor.w	r3, r3, #32
 8006878:	817b      	strh	r3, [r7, #10]
 800687a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	897b      	ldrh	r3, [r7, #10]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	f000 bcde 	b.w	800726a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	7b1b      	ldrb	r3, [r3, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 80bb 	bne.w	8006a36 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d917      	bls.n	800690c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	1ad2      	subs	r2, r2, r3
 80068fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	619a      	str	r2, [r3, #24]
 800690a:	e00e      	b.n	800692a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800694e:	4413      	add	r3, r2
 8006950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006966:	4413      	add	r3, r2
 8006968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800696c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800697c:	b29a      	uxth	r2, r3
 800697e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	2b3e      	cmp	r3, #62	@ 0x3e
 800698a:	d924      	bls.n	80069d6 <USB_EPStartXfer+0xec2>
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <USB_EPStartXfer+0xe98>
 80069a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069a6:	3b01      	subs	r3, #1
 80069a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4313      	orrs	r3, r2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	f000 bc10 	b.w	80071f6 <USB_EPStartXfer+0x16e2>
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10c      	bne.n	80069f8 <USB_EPStartXfer+0xee4>
 80069de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e3fe      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <USB_EPStartXfer+0xf04>
 8006a0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a12:	3301      	adds	r3, #1
 8006a14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e3df      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	f040 8218 	bne.w	8006e78 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 809d 	bne.w	8006b94 <USB_EPStartXfer+0x1080>
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a7e:	4413      	add	r3, r2
 8006a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	011a      	lsls	r2, r3, #4
 8006a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a96:	4413      	add	r3, r2
 8006a98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ac2:	d92b      	bls.n	8006b1c <USB_EPStartXfer+0x1008>
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USB_EPStartXfer+0xfe0>
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	e070      	b.n	8006bfe <USB_EPStartXfer+0x10ea>
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10c      	bne.n	8006b46 <USB_EPStartXfer+0x1032>
 8006b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e05b      	b.n	8006bfe <USB_EPStartXfer+0x10ea>
 8006b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <USB_EPStartXfer+0x1062>
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	3301      	adds	r3, #1
 8006b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	029b      	lsls	r3, r3, #10
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e034      	b.n	8006bfe <USB_EPStartXfer+0x10ea>
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d12c      	bne.n	8006bfe <USB_EPStartXfer+0x10ea>
 8006ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bc8:	4413      	add	r3, r2
 8006bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	011a      	lsls	r2, r3, #4
 8006bdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 809d 	bne.w	8006d58 <USB_EPStartXfer+0x1244>
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c42:	4413      	add	r3, r2
 8006c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	011a      	lsls	r2, r3, #4
 8006c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c86:	d92b      	bls.n	8006ce0 <USB_EPStartXfer+0x11cc>
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <USB_EPStartXfer+0x11a4>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e069      	b.n	8006db4 <USB_EPStartXfer+0x12a0>
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10c      	bne.n	8006d0a <USB_EPStartXfer+0x11f6>
 8006cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	e054      	b.n	8006db4 <USB_EPStartXfer+0x12a0>
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <USB_EPStartXfer+0x1226>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d34:	3301      	adds	r3, #1
 8006d36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e02d      	b.n	8006db4 <USB_EPStartXfer+0x12a0>
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d125      	bne.n	8006db4 <USB_EPStartXfer+0x12a0>
 8006d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d7e:	4413      	add	r3, r2
 8006d80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	011a      	lsls	r2, r3, #4
 8006d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006db2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8218 	beq.w	80071f6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006de6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <USB_EPStartXfer+0x12ea>
 8006df2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10d      	bne.n	8006e1a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 81f5 	bne.w	80071f6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 81ee 	bne.w	80071f6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e40:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	8013      	strh	r3, [r2, #0]
 8006e76:	e1be      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	78db      	ldrb	r3, [r3, #3]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 81b4 	bne.w	80071f2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d917      	bls.n	8006ed6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	619a      	str	r2, [r3, #24]
 8006ed4:	e00e      	b.n	8006ef4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 8085 	bne.w	8007010 <USB_EPStartXfer+0x14fc>
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	011a      	lsls	r2, r3, #4
 8006f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f66:	d923      	bls.n	8006fb0 <USB_EPStartXfer+0x149c>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <USB_EPStartXfer+0x1474>
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f82:	3b01      	subs	r3, #1
 8006f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e060      	b.n	8007072 <USB_EPStartXfer+0x155e>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <USB_EPStartXfer+0x14be>
 8006fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e04f      	b.n	8007072 <USB_EPStartXfer+0x155e>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <USB_EPStartXfer+0x14de>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fec:	3301      	adds	r3, #1
 8006fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	b29b      	uxth	r3, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	e030      	b.n	8007072 <USB_EPStartXfer+0x155e>
 8007010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d128      	bne.n	8007072 <USB_EPStartXfer+0x155e>
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007044:	4413      	add	r3, r2
 8007046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800705c:	4413      	add	r3, r2
 800705e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007062:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706a:	b29a      	uxth	r2, r3
 800706c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 8085 	bne.w	800719c <USB_EPStartXfer+0x1688>
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070b6:	4413      	add	r3, r2
 80070b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	011a      	lsls	r2, r3, #4
 80070ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80070f2:	d923      	bls.n	800713c <USB_EPStartXfer+0x1628>
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <USB_EPStartXfer+0x1600>
 800710a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800710e:	3b01      	subs	r3, #1
 8007110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29a      	uxth	r2, r3
 800711c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29b      	uxth	r3, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	b29b      	uxth	r3, r3
 800712a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	e05c      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10c      	bne.n	800715e <USB_EPStartXfer+0x164a>
 8007144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	e04b      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <USB_EPStartXfer+0x166a>
 8007174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007178:	3301      	adds	r3, #1
 800717a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800717e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
 8007194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e02c      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d124      	bne.n	80071f6 <USB_EPStartXfer+0x16e2>
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071c2:	4413      	add	r3, r2
 80071c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	011a      	lsls	r2, r3, #4
 80071d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071da:	4413      	add	r3, r2
 80071dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e001      	b.n	80071f6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e03a      	b.n	800726c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007220:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007224:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007228:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800722c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007230:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007234:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	441a      	add	r2, r3
 8007252:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d020      	beq.n	80072ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800729e:	81bb      	strh	r3, [r7, #12]
 80072a0:	89bb      	ldrh	r3, [r7, #12]
 80072a2:	f083 0310 	eor.w	r3, r3, #16
 80072a6:	81bb      	strh	r3, [r7, #12]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	89bb      	ldrh	r3, [r7, #12]
 80072b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8013      	strh	r3, [r2, #0]
 80072c8:	e01f      	b.n	800730a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e0:	81fb      	strh	r3, [r7, #14]
 80072e2:	89fb      	ldrh	r3, [r7, #14]
 80072e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072e8:	81fb      	strh	r3, [r7, #14]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	89fb      	ldrh	r3, [r7, #14]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	7b1b      	ldrb	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f040 809d 	bne.w	8007464 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d04c      	beq.n	80073cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	823b      	strh	r3, [r7, #16]
 8007340:	8a3b      	ldrh	r3, [r7, #16]
 8007342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01b      	beq.n	8007382 <USB_EPClearStall+0x6c>
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007360:	81fb      	strh	r3, [r7, #14]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	441a      	add	r2, r3
 800736c:	89fb      	ldrh	r3, [r7, #14]
 800736e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800737a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800737e:	b29b      	uxth	r3, r3
 8007380:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	78db      	ldrb	r3, [r3, #3]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d06c      	beq.n	8007464 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800739c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f083 0320 	eor.w	r3, r3, #32
 80073a8:	81bb      	strh	r3, [r7, #12]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	89bb      	ldrh	r3, [r7, #12]
 80073b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8013      	strh	r3, [r2, #0]
 80073ca:	e04b      	b.n	8007464 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	82fb      	strh	r3, [r7, #22]
 80073da:	8afb      	ldrh	r3, [r7, #22]
 80073dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <USB_EPClearStall+0x106>
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fa:	82bb      	strh	r3, [r7, #20]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	8abb      	ldrh	r3, [r7, #20]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	827b      	strh	r3, [r7, #18]
 8007434:	8a7b      	ldrh	r3, [r7, #18]
 8007436:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800743a:	827b      	strh	r3, [r7, #18]
 800743c:	8a7b      	ldrh	r3, [r7, #18]
 800743e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007442:	827b      	strh	r3, [r7, #18]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	8a7b      	ldrh	r3, [r7, #18]
 8007450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007460:	b29b      	uxth	r3, r3
 8007462:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2280      	movs	r2, #128	@ 0x80
 8007486:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr

080074aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr

080074be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074d0:	68fb      	ldr	r3, [r7, #12]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr

080074dc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr

080074f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b08b      	sub	sp, #44	@ 0x2c
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	4611      	mov	r1, r2
 80074fe:	461a      	mov	r2, r3
 8007500:	460b      	mov	r3, r1
 8007502:	80fb      	strh	r3, [r7, #6]
 8007504:	4613      	mov	r3, r2
 8007506:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007508:	88bb      	ldrh	r3, [r7, #4]
 800750a:	3301      	adds	r3, #1
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	005a      	lsls	r2, r3, #1
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007524:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
 800752a:	e01e      	b.n	800756a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	3301      	adds	r3, #1
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	b21a      	sxth	r2, r3
 800753c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007540:	4313      	orrs	r3, r2
 8007542:	b21b      	sxth	r3, r3
 8007544:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	8a7a      	ldrh	r2, [r7, #18]
 800754a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	3302      	adds	r3, #2
 8007550:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	3302      	adds	r3, #2
 8007556:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	3301      	adds	r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	3b01      	subs	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1dd      	bne.n	800752c <USB_WritePMA+0x3a>
  }
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	372c      	adds	r7, #44	@ 0x2c
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr

0800757c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800757c:	b480      	push	{r7}
 800757e:	b08b      	sub	sp, #44	@ 0x2c
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	460b      	mov	r3, r1
 800758c:	80fb      	strh	r3, [r7, #6]
 800758e:	4613      	mov	r3, r2
 8007590:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007592:	88bb      	ldrh	r3, [r7, #4]
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	b29b      	uxth	r3, r3
 8007598:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	005a      	lsls	r2, r3, #1
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b4:	e01b      	b.n	80075ee <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	3302      	adds	r3, #2
 80075c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	3302      	adds	r3, #2
 80075e6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	3b01      	subs	r3, #1
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e0      	bne.n	80075b6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80075f4:	88bb      	ldrh	r3, [r7, #4]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	b2da      	uxtb	r2, r3
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	701a      	strb	r2, [r3, #0]
  }
}
 8007610:	bf00      	nop
 8007612:	372c      	adds	r7, #44	@ 0x2c
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007626:	2304      	movs	r3, #4
 8007628:	2203      	movs	r2, #3
 800762a:	2181      	movs	r1, #129	@ 0x81
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 fc5e 	bl	8008eee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007638:	2010      	movs	r0, #16
 800763a:	f001 fd6b 	bl	8009114 <USBD_static_malloc>
 800763e:	4602      	mov	r2, r0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007650:	2302      	movs	r3, #2
 8007652:	e005      	b.n	8007660 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765a:	2200      	movs	r2, #0
 800765c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007674:	2181      	movs	r1, #129	@ 0x81
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fc5f 	bl	8008f3a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fd4a 	bl	800912c <USBD_static_free>
    pdev->pClassData = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076bc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d045      	beq.n	8007766 <USBD_HID_Setup+0xba>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	f040 80d3 	bne.w	8007886 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	3b02      	subs	r3, #2
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d835      	bhi.n	8007756 <USBD_HID_Setup+0xaa>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <USBD_HID_Setup+0x44>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007747 	.word	0x08007747
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007757 	.word	0x08007757
 80076fc:	08007757 	.word	0x08007757
 8007700:	08007757 	.word	0x08007757
 8007704:	08007757 	.word	0x08007757
 8007708:	08007757 	.word	0x08007757
 800770c:	08007757 	.word	0x08007757
 8007710:	08007735 	.word	0x08007735
 8007714:	08007719 	.word	0x08007719
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	601a      	str	r2, [r3, #0]
          break;
 8007724:	e01e      	b.n	8007764 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2201      	movs	r2, #1
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f91f 	bl	8008970 <USBD_CtlSendData>
          break;
 8007732:	e017      	b.n	8007764 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	885b      	ldrh	r3, [r3, #2]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	b29b      	uxth	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	461a      	mov	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]
          break;
 8007744:	e00e      	b.n	8007764 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3304      	adds	r3, #4
 800774a:	2201      	movs	r2, #1
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f90e 	bl	8008970 <USBD_CtlSendData>
          break;
 8007754:	e006      	b.n	8007764 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f89f 	bl	800889c <USBD_CtlError>
          ret = USBD_FAIL;
 800775e:	2302      	movs	r3, #2
 8007760:	75fb      	strb	r3, [r7, #23]
          break;
 8007762:	bf00      	nop
      }
      break;
 8007764:	e096      	b.n	8007894 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b0b      	cmp	r3, #11
 800776c:	f200 8083 	bhi.w	8007876 <USBD_HID_Setup+0x1ca>
 8007770:	a201      	add	r2, pc, #4	@ (adr r2, 8007778 <USBD_HID_Setup+0xcc>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	080077a9 	.word	0x080077a9
 800777c:	08007877 	.word	0x08007877
 8007780:	08007877 	.word	0x08007877
 8007784:	08007877 	.word	0x08007877
 8007788:	08007877 	.word	0x08007877
 800778c:	08007877 	.word	0x08007877
 8007790:	080077d1 	.word	0x080077d1
 8007794:	08007877 	.word	0x08007877
 8007798:	08007877 	.word	0x08007877
 800779c:	08007877 	.word	0x08007877
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007851 	.word	0x08007851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d107      	bne.n	80077c2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077b2:	f107 030e 	add.w	r3, r7, #14
 80077b6:	2202      	movs	r2, #2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 f8d8 	bl	8008970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c0:	e060      	b.n	8007884 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f869 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 80077ca:	2302      	movs	r3, #2
 80077cc:	75fb      	strb	r3, [r7, #23]
          break;
 80077ce:	e059      	b.n	8007884 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b22      	cmp	r3, #34	@ 0x22
 80077da:	d108      	bne.n	80077ee <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	88db      	ldrh	r3, [r3, #6]
 80077e0:	2b4a      	cmp	r3, #74	@ 0x4a
 80077e2:	bf28      	it	cs
 80077e4:	234a      	movcs	r3, #74	@ 0x4a
 80077e6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80077e8:	4b2d      	ldr	r3, [pc, #180]	@ (80078a0 <USBD_HID_Setup+0x1f4>)
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e015      	b.n	800781a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	885b      	ldrh	r3, [r3, #2]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b21      	cmp	r3, #33	@ 0x21
 80077f8:	d108      	bne.n	800780c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80077fa:	4b2a      	ldr	r3, [pc, #168]	@ (80078a4 <USBD_HID_Setup+0x1f8>)
 80077fc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	88db      	ldrh	r3, [r3, #6]
 8007802:	2b09      	cmp	r3, #9
 8007804:	bf28      	it	cs
 8007806:	2309      	movcs	r3, #9
 8007808:	83fb      	strh	r3, [r7, #30]
 800780a:	e006      	b.n	800781a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 f844 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	75fb      	strb	r3, [r7, #23]
            break;
 8007818:	e034      	b.n	8007884 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800781a:	8bfb      	ldrh	r3, [r7, #30]
 800781c:	461a      	mov	r2, r3
 800781e:	69b9      	ldr	r1, [r7, #24]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 f8a5 	bl	8008970 <USBD_CtlSendData>
          break;
 8007826:	e02d      	b.n	8007884 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782e:	2b03      	cmp	r3, #3
 8007830:	d107      	bne.n	8007842 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3308      	adds	r3, #8
 8007836:	2201      	movs	r2, #1
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 f898 	bl	8008970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007840:	e020      	b.n	8007884 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f829 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 800784a:	2302      	movs	r3, #2
 800784c:	75fb      	strb	r3, [r7, #23]
          break;
 800784e:	e019      	b.n	8007884 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007856:	2b03      	cmp	r3, #3
 8007858:	d106      	bne.n	8007868 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	885b      	ldrh	r3, [r3, #2]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007866:	e00d      	b.n	8007884 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f816 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	75fb      	strb	r3, [r7, #23]
          break;
 8007874:	e006      	b.n	8007884 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f80f 	bl	800889c <USBD_CtlError>
          ret = USBD_FAIL;
 800787e:	2302      	movs	r3, #2
 8007880:	75fb      	strb	r3, [r7, #23]
          break;
 8007882:	bf00      	nop
      }
      break;
 8007884:	e006      	b.n	8007894 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f807 	bl	800889c <USBD_CtlError>
      ret = USBD_FAIL;
 800788e:	2302      	movs	r3, #2
 8007890:	75fb      	strb	r3, [r7, #23]
      break;
 8007892:	bf00      	nop
  }

  return ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200000c8 	.word	0x200000c8
 80078a4:	200000b0 	.word	0x200000b0

080078a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2222      	movs	r2, #34	@ 0x22
 80078b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80078b6:	4b03      	ldr	r3, [pc, #12]	@ (80078c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000044 	.word	0x20000044

080078c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2222      	movs	r2, #34	@ 0x22
 80078d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80078d6:	4b03      	ldr	r3, [pc, #12]	@ (80078e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000068 	.word	0x20000068

080078e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2222      	movs	r2, #34	@ 0x22
 80078f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80078f6:	4b03      	ldr	r3, [pc, #12]	@ (8007904 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	2000008c 	.word	0x2000008c

08007908 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800791a:	2200      	movs	r2, #0
 800791c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
	...

0800792c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220a      	movs	r2, #10
 8007938:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800793a:	4b03      	ldr	r3, [pc, #12]	@ (8007948 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	200000bc 	.word	0x200000bc

0800794c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007960:	2302      	movs	r3, #2
 8007962:	e01a      	b.n	800799a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	79fa      	ldrb	r2, [r7, #7]
 8007990:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f001 fa48 	bl	8008e28 <USBD_LL_Init>

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	e001      	b.n	80079c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
 80079c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fa6b 	bl	8008eb8 <USBD_LL_Start>

  return USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	4611      	mov	r1, r2
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	4611      	mov	r1, r2
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fed7 	bl	800882a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d016      	beq.n	8007ace <USBD_LL_SetupStage+0x6a>
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d81c      	bhi.n	8007ade <USBD_LL_SetupStage+0x7a>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <USBD_LL_SetupStage+0x4a>
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d008      	beq.n	8007abe <USBD_LL_SetupStage+0x5a>
 8007aac:	e017      	b.n	8007ade <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9ca 	bl	8007e50 <USBD_StdDevReq>
      break;
 8007abc:	e01a      	b.n	8007af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa2c 	bl	8007f24 <USBD_StdItfReq>
      break;
 8007acc:	e012      	b.n	8007af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa6c 	bl	8007fb4 <USBD_StdEPReq>
      break;
 8007adc:	e00a      	b.n	8007af4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007ae4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fa43 	bl	8008f78 <USBD_LL_StallEP>
      break;
 8007af2:	bf00      	nop
  }

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	460b      	mov	r3, r1
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d14b      	bne.n	8007baa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d134      	bne.n	8007b8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d919      	bls.n	8007b64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	1ad2      	subs	r2, r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d203      	bcs.n	8007b52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	e002      	b.n	8007b58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 ff35 	bl	80089cc <USBD_CtlContinueRx>
 8007b62:	e038      	b.n	8007bd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d105      	bne.n	8007b86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 ff32 	bl	80089f0 <USBD_CtlSendStatus>
 8007b8c:	e023      	b.n	8007bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d11e      	bne.n	8007bd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 f9e8 	bl	8008f78 <USBD_LL_StallEP>
 8007ba8:	e015      	b.n	8007bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d108      	bne.n	8007bd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	7afa      	ldrb	r2, [r7, #11]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	4798      	blx	r3
 8007bd0:	e001      	b.n	8007bd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e000      	b.n	8007bd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	460b      	mov	r3, r1
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d17f      	bne.n	8007cf4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3314      	adds	r3, #20
 8007bf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d15c      	bne.n	8007cbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d915      	bls.n	8007c3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	1ad2      	subs	r2, r2, r3
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 febd 	bl	80089a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2200      	movs	r2, #0
 8007c32:	2100      	movs	r1, #0
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f001 fa4a 	bl	80090ce <USBD_LL_PrepareReceive>
 8007c3a:	e04e      	b.n	8007cda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	6912      	ldr	r2, [r2, #16]
 8007c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c48:	fb01 f202 	mul.w	r2, r1, r2
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11c      	bne.n	8007c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d316      	bcc.n	8007c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d20f      	bcs.n	8007c8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fe99 	bl	80089a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f001 fa22 	bl	80090ce <USBD_LL_PrepareReceive>
 8007c8a:	e026      	b.n	8007cda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d105      	bne.n	8007cae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cae:	2180      	movs	r1, #128	@ 0x80
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f001 f961 	bl	8008f78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fead 	bl	8008a16 <USBD_CtlReceiveStatus>
 8007cbc:	e00d      	b.n	8007cda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d004      	beq.n	8007cd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cd2:	2180      	movs	r1, #128	@ 0x80
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f001 f94f 	bl	8008f78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d11d      	bne.n	8007d20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fe81 	bl	80079ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cf2:	e015      	b.n	8007d20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d108      	bne.n	8007d1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	7afa      	ldrb	r2, [r7, #11]
 8007d14:	4611      	mov	r1, r2
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	4798      	blx	r3
 8007d1a:	e001      	b.n	8007d20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e000      	b.n	8007d22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d32:	2340      	movs	r3, #64	@ 0x40
 8007d34:	2200      	movs	r2, #0
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f8d8 	bl	8008eee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2240      	movs	r2, #64	@ 0x40
 8007d4a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d4e:	2340      	movs	r3, #64	@ 0x40
 8007d50:	2200      	movs	r2, #0
 8007d52:	2180      	movs	r1, #128	@ 0x80
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f8ca 	bl	8008eee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2240      	movs	r2, #64	@ 0x40
 8007d64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6852      	ldr	r2, [r2, #4]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
  }

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2204      	movs	r2, #4
 8007de2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d105      	bne.n	8007e10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d10b      	bne.n	8007e46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d005      	beq.n	8007e76 <USBD_StdDevReq+0x26>
 8007e6a:	2b40      	cmp	r3, #64	@ 0x40
 8007e6c:	d84f      	bhi.n	8007f0e <USBD_StdDevReq+0xbe>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <USBD_StdDevReq+0x36>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d14b      	bne.n	8007f0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
      break;
 8007e84:	e048      	b.n	8007f18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d839      	bhi.n	8007f02 <USBD_StdDevReq+0xb2>
 8007e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <USBD_StdDevReq+0x44>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	08007ef9 	.word	0x08007ef9
 8007e9c:	08007f03 	.word	0x08007f03
 8007ea0:	08007eef 	.word	0x08007eef
 8007ea4:	08007f03 	.word	0x08007f03
 8007ea8:	08007ec7 	.word	0x08007ec7
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007f03 	.word	0x08007f03
 8007eb4:	08007edb 	.word	0x08007edb
 8007eb8:	08007ed1 	.word	0x08007ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9dc 	bl	800827c <USBD_GetDescriptor>
          break;
 8007ec4:	e022      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb3f 	bl	800854c <USBD_SetAddress>
          break;
 8007ece:	e01d      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fb7e 	bl	80085d4 <USBD_SetConfig>
          break;
 8007ed8:	e018      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc07 	bl	80086f0 <USBD_GetConfig>
          break;
 8007ee2:	e013      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fc37 	bl	800875a <USBD_GetStatus>
          break;
 8007eec:	e00e      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc65 	bl	80087c0 <USBD_SetFeature>
          break;
 8007ef6:	e009      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc74 	bl	80087e8 <USBD_ClrFeature>
          break;
 8007f00:	e004      	b.n	8007f0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fcc9 	bl	800889c <USBD_CtlError>
          break;
 8007f0a:	bf00      	nop
      }
      break;
 8007f0c:	e004      	b.n	8007f18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fcc3 	bl	800889c <USBD_CtlError>
      break;
 8007f16:	bf00      	nop
  }

  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop

08007f24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f3a:	2b40      	cmp	r3, #64	@ 0x40
 8007f3c:	d005      	beq.n	8007f4a <USBD_StdItfReq+0x26>
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d82e      	bhi.n	8007fa0 <USBD_StdItfReq+0x7c>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <USBD_StdItfReq+0x26>
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d12a      	bne.n	8007fa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f50:	3b01      	subs	r3, #1
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d81d      	bhi.n	8007f92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d813      	bhi.n	8007f88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d110      	bne.n	8007f9c <USBD_StdItfReq+0x78>
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fd35 	bl	80089f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f86:	e009      	b.n	8007f9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fc86 	bl	800889c <USBD_CtlError>
          break;
 8007f90:	e004      	b.n	8007f9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fc81 	bl	800889c <USBD_CtlError>
          break;
 8007f9a:	e000      	b.n	8007f9e <USBD_StdItfReq+0x7a>
          break;
 8007f9c:	bf00      	nop
      }
      break;
 8007f9e:	e004      	b.n	8007faa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fc7a 	bl	800889c <USBD_CtlError>
      break;
 8007fa8:	bf00      	nop
  }

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	889b      	ldrh	r3, [r3, #4]
 8007fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fd0:	2b40      	cmp	r3, #64	@ 0x40
 8007fd2:	d007      	beq.n	8007fe4 <USBD_StdEPReq+0x30>
 8007fd4:	2b40      	cmp	r3, #64	@ 0x40
 8007fd6:	f200 8146 	bhi.w	8008266 <USBD_StdEPReq+0x2b2>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <USBD_StdEPReq+0x40>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	f040 8141 	bne.w	8008266 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
      break;
 8007ff2:	e13d      	b.n	8008270 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d10a      	bne.n	8008016 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	e12d      	b.n	8008272 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d007      	beq.n	800802e <USBD_StdEPReq+0x7a>
 800801e:	2b03      	cmp	r3, #3
 8008020:	f300 811b 	bgt.w	800825a <USBD_StdEPReq+0x2a6>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d072      	beq.n	800810e <USBD_StdEPReq+0x15a>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d03a      	beq.n	80080a2 <USBD_StdEPReq+0xee>
 800802c:	e115      	b.n	800825a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008034:	2b02      	cmp	r3, #2
 8008036:	d002      	beq.n	800803e <USBD_StdEPReq+0x8a>
 8008038:	2b03      	cmp	r3, #3
 800803a:	d015      	beq.n	8008068 <USBD_StdEPReq+0xb4>
 800803c:	e02b      	b.n	8008096 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00c      	beq.n	800805e <USBD_StdEPReq+0xaa>
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b80      	cmp	r3, #128	@ 0x80
 8008048:	d009      	beq.n	800805e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 ff92 	bl	8008f78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008054:	2180      	movs	r1, #128	@ 0x80
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 ff8e 	bl	8008f78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800805c:	e020      	b.n	80080a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fc1b 	bl	800889c <USBD_CtlError>
              break;
 8008066:	e01b      	b.n	80080a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	885b      	ldrh	r3, [r3, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10e      	bne.n	800808e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <USBD_StdEPReq+0xda>
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	2b80      	cmp	r3, #128	@ 0x80
 800807a:	d008      	beq.n	800808e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	88db      	ldrh	r3, [r3, #6]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 ff75 	bl	8008f78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fcae 	bl	80089f0 <USBD_CtlSendStatus>

              break;
 8008094:	e004      	b.n	80080a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fbff 	bl	800889c <USBD_CtlError>
              break;
 800809e:	bf00      	nop
          }
          break;
 80080a0:	e0e0      	b.n	8008264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <USBD_StdEPReq+0xfe>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d015      	beq.n	80080dc <USBD_StdEPReq+0x128>
 80080b0:	e026      	b.n	8008100 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <USBD_StdEPReq+0x11e>
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b80      	cmp	r3, #128	@ 0x80
 80080bc:	d009      	beq.n	80080d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 ff58 	bl	8008f78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c8:	2180      	movs	r1, #128	@ 0x80
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 ff54 	bl	8008f78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080d0:	e01c      	b.n	800810c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbe1 	bl	800889c <USBD_CtlError>
              break;
 80080da:	e017      	b.n	800810c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d112      	bne.n	800810a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 ff5f 	bl	8008fb6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc79 	bl	80089f0 <USBD_CtlSendStatus>
              }
              break;
 80080fe:	e004      	b.n	800810a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fbca 	bl	800889c <USBD_CtlError>
              break;
 8008108:	e000      	b.n	800810c <USBD_StdEPReq+0x158>
              break;
 800810a:	bf00      	nop
          }
          break;
 800810c:	e0aa      	b.n	8008264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008114:	2b02      	cmp	r3, #2
 8008116:	d002      	beq.n	800811e <USBD_StdEPReq+0x16a>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d032      	beq.n	8008182 <USBD_StdEPReq+0x1ce>
 800811c:	e097      	b.n	800824e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <USBD_StdEPReq+0x180>
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b80      	cmp	r3, #128	@ 0x80
 8008128:	d004      	beq.n	8008134 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbb5 	bl	800889c <USBD_CtlError>
                break;
 8008132:	e091      	b.n	8008258 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0b      	bge.n	8008154 <USBD_StdEPReq+0x1a0>
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	3310      	adds	r3, #16
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	e00b      	b.n	800816c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	3304      	adds	r3, #4
 800816c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2202      	movs	r2, #2
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fbf8 	bl	8008970 <USBD_CtlSendData>
              break;
 8008180:	e06a      	b.n	8008258 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	da11      	bge.n	80081ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3318      	adds	r3, #24
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d117      	bne.n	80081d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb78 	bl	800889c <USBD_CtlError>
                  break;
 80081ac:	e054      	b.n	8008258 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb65 	bl	800889c <USBD_CtlError>
                  break;
 80081d2:	e041      	b.n	8008258 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da0b      	bge.n	80081f4 <USBD_StdEPReq+0x240>
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3310      	adds	r3, #16
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	e00b      	b.n	800820c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4413      	add	r3, r2
 800820a:	3304      	adds	r3, #4
 800820c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <USBD_StdEPReq+0x266>
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b80      	cmp	r3, #128	@ 0x80
 8008218:	d103      	bne.n	8008222 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e00e      	b.n	8008240 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fee4 	bl	8008ff4 <USBD_LL_IsStallEP>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e002      	b.n	8008240 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2202      	movs	r2, #2
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb92 	bl	8008970 <USBD_CtlSendData>
              break;
 800824c:	e004      	b.n	8008258 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb23 	bl	800889c <USBD_CtlError>
              break;
 8008256:	bf00      	nop
          }
          break;
 8008258:	e004      	b.n	8008264 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb1d 	bl	800889c <USBD_CtlError>
          break;
 8008262:	bf00      	nop
      }
      break;
 8008264:	e004      	b.n	8008270 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb17 	bl	800889c <USBD_CtlError>
      break;
 800826e:	bf00      	nop
  }

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	2b06      	cmp	r3, #6
 800829e:	f200 8128 	bhi.w	80084f2 <USBD_GetDescriptor+0x276>
 80082a2:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <USBD_GetDescriptor+0x2c>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	0800831d 	.word	0x0800831d
 80082b4:	080084f3 	.word	0x080084f3
 80082b8:	080084f3 	.word	0x080084f3
 80082bc:	08008493 	.word	0x08008493
 80082c0:	080084bf 	.word	0x080084bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7c12      	ldrb	r2, [r2, #16]
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
      break;
 80082da:	e112      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7c1b      	ldrb	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10d      	bne.n	8008300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ec:	f107 0208 	add.w	r2, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	2202      	movs	r2, #2
 80082fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082fe:	e100      	b.n	8008502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	f107 0208 	add.w	r2, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
      break;
 800831a:	e0f2      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b05      	cmp	r3, #5
 8008324:	f200 80ac 	bhi.w	8008480 <USBD_GetDescriptor+0x204>
 8008328:	a201      	add	r2, pc, #4	@ (adr r2, 8008330 <USBD_GetDescriptor+0xb4>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008349 	.word	0x08008349
 8008334:	0800837d 	.word	0x0800837d
 8008338:	080083b1 	.word	0x080083b1
 800833c:	080083e5 	.word	0x080083e5
 8008340:	08008419 	.word	0x08008419
 8008344:	0800844d 	.word	0x0800844d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e091      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa94 	bl	800889c <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e089      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e077      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7a 	bl	800889c <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e06f      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e05d      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa60 	bl	800889c <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e055      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e043      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa46 	bl	800889c <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e03b      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e029      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa2c 	bl	800889c <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e021      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e00f      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa12 	bl	800889c <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e007      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa0a 	bl	800889c <USBD_CtlError>
          err++;
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	3301      	adds	r3, #1
 800848c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800848e:	e038      	b.n	8008502 <USBD_GetDescriptor+0x286>
 8008490:	e037      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7c1b      	ldrb	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a2:	f107 0208 	add.w	r2, r7, #8
 80084a6:	4610      	mov	r0, r2
 80084a8:	4798      	blx	r3
 80084aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084ac:	e029      	b.n	8008502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9f3 	bl	800889c <USBD_CtlError>
        err++;
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	3301      	adds	r3, #1
 80084ba:	72fb      	strb	r3, [r7, #11]
      break;
 80084bc:	e021      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7c1b      	ldrb	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ce:	f107 0208 	add.w	r2, r7, #8
 80084d2:	4610      	mov	r0, r2
 80084d4:	4798      	blx	r3
 80084d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	2207      	movs	r2, #7
 80084de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e0:	e00f      	b.n	8008502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9d9 	bl	800889c <USBD_CtlError>
        err++;
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	3301      	adds	r3, #1
 80084ee:	72fb      	strb	r3, [r7, #11]
      break;
 80084f0:	e007      	b.n	8008502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f9d1 	bl	800889c <USBD_CtlError>
      err++;
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	3301      	adds	r3, #1
 80084fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008500:	bf00      	nop
  }

  if (err != 0U)
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11c      	bne.n	8008542 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <USBD_GetDescriptor+0x2b6>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	88da      	ldrh	r2, [r3, #6]
 800851a:	893b      	ldrh	r3, [r7, #8]
 800851c:	4293      	cmp	r3, r2
 800851e:	bf28      	it	cs
 8008520:	4613      	movcs	r3, r2
 8008522:	b29b      	uxth	r3, r3
 8008524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008526:	893b      	ldrh	r3, [r7, #8]
 8008528:	461a      	mov	r2, r3
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa1f 	bl	8008970 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa58 	bl	80089f0 <USBD_CtlSendStatus>
 8008540:	e000      	b.n	8008544 <USBD_GetDescriptor+0x2c8>
    return;
 8008542:	bf00      	nop
    }
  }
}
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d130      	bne.n	80085c0 <USBD_SetAddress+0x74>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d12c      	bne.n	80085c0 <USBD_SetAddress+0x74>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	2b7f      	cmp	r3, #127	@ 0x7f
 800856c:	d828      	bhi.n	80085c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008580:	2b03      	cmp	r3, #3
 8008582:	d104      	bne.n	800858e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f988 	bl	800889c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858c:	e01d      	b.n	80085ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7bfa      	ldrb	r2, [r7, #15]
 8008592:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fd55 	bl	800904a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa25 	bl	80089f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b4:	e009      	b.n	80085ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085be:	e004      	b.n	80085ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f96a 	bl	800889c <USBD_CtlError>
  }
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <USBD_SetConfig+0x118>)
 80085e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085e8:	4b40      	ldr	r3, [pc, #256]	@ (80086ec <USBD_SetConfig+0x118>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d904      	bls.n	80085fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f952 	bl	800889c <USBD_CtlError>
 80085f8:	e075      	b.n	80086e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008600:	2b02      	cmp	r3, #2
 8008602:	d002      	beq.n	800860a <USBD_SetConfig+0x36>
 8008604:	2b03      	cmp	r3, #3
 8008606:	d023      	beq.n	8008650 <USBD_SetConfig+0x7c>
 8008608:	e062      	b.n	80086d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800860a:	4b38      	ldr	r3, [pc, #224]	@ (80086ec <USBD_SetConfig+0x118>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01a      	beq.n	8008648 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008612:	4b36      	ldr	r3, [pc, #216]	@ (80086ec <USBD_SetConfig+0x118>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2203      	movs	r2, #3
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008624:	4b31      	ldr	r3, [pc, #196]	@ (80086ec <USBD_SetConfig+0x118>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff f9e8 	bl	8007a00 <USBD_SetClassConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	2b02      	cmp	r3, #2
 8008634:	d104      	bne.n	8008640 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f92f 	bl	800889c <USBD_CtlError>
            return;
 800863e:	e052      	b.n	80086e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9d5 	bl	80089f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008646:	e04e      	b.n	80086e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9d1 	bl	80089f0 <USBD_CtlSendStatus>
        break;
 800864e:	e04a      	b.n	80086e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008650:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <USBD_SetConfig+0x118>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d112      	bne.n	800867e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008660:	4b22      	ldr	r3, [pc, #136]	@ (80086ec <USBD_SetConfig+0x118>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800866a:	4b20      	ldr	r3, [pc, #128]	@ (80086ec <USBD_SetConfig+0x118>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff f9e4 	bl	8007a3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9ba 	bl	80089f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800867c:	e033      	b.n	80086e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800867e:	4b1b      	ldr	r3, [pc, #108]	@ (80086ec <USBD_SetConfig+0x118>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d01d      	beq.n	80086c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff f9d2 	bl	8007a3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800869a:	4b14      	ldr	r3, [pc, #80]	@ (80086ec <USBD_SetConfig+0x118>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086a4:	4b11      	ldr	r3, [pc, #68]	@ (80086ec <USBD_SetConfig+0x118>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff f9a8 	bl	8007a00 <USBD_SetClassConfig>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d104      	bne.n	80086c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f8ef 	bl	800889c <USBD_CtlError>
            return;
 80086be:	e012      	b.n	80086e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f995 	bl	80089f0 <USBD_CtlSendStatus>
        break;
 80086c6:	e00e      	b.n	80086e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f991 	bl	80089f0 <USBD_CtlSendStatus>
        break;
 80086ce:	e00a      	b.n	80086e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f8e2 	bl	800889c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086d8:	4b04      	ldr	r3, [pc, #16]	@ (80086ec <USBD_SetConfig+0x118>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff f9ad 	bl	8007a3e <USBD_ClrClassConfig>
        break;
 80086e4:	bf00      	nop
    }
  }
}
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20000280 	.word	0x20000280

080086f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	88db      	ldrh	r3, [r3, #6]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d004      	beq.n	800870c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f8c9 	bl	800889c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800870a:	e022      	b.n	8008752 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008712:	2b02      	cmp	r3, #2
 8008714:	dc02      	bgt.n	800871c <USBD_GetConfig+0x2c>
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc03      	bgt.n	8008722 <USBD_GetConfig+0x32>
 800871a:	e015      	b.n	8008748 <USBD_GetConfig+0x58>
 800871c:	2b03      	cmp	r3, #3
 800871e:	d00b      	beq.n	8008738 <USBD_GetConfig+0x48>
 8008720:	e012      	b.n	8008748 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3308      	adds	r3, #8
 800872c:	2201      	movs	r2, #1
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f91d 	bl	8008970 <USBD_CtlSendData>
        break;
 8008736:	e00c      	b.n	8008752 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	2201      	movs	r2, #1
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f915 	bl	8008970 <USBD_CtlSendData>
        break;
 8008746:	e004      	b.n	8008752 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8a6 	bl	800889c <USBD_CtlError>
        break;
 8008750:	bf00      	nop
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800876a:	3b01      	subs	r3, #1
 800876c:	2b02      	cmp	r3, #2
 800876e:	d81e      	bhi.n	80087ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d004      	beq.n	8008782 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f88e 	bl	800889c <USBD_CtlError>
        break;
 8008780:	e01a      	b.n	80087b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f043 0202 	orr.w	r2, r3, #2
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	330c      	adds	r3, #12
 80087a2:	2202      	movs	r2, #2
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8e2 	bl	8008970 <USBD_CtlSendData>
      break;
 80087ac:	e004      	b.n	80087b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f873 	bl	800889c <USBD_CtlError>
      break;
 80087b6:	bf00      	nop
  }
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d106      	bne.n	80087e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f908 	bl	80089f0 <USBD_CtlSendStatus>
  }
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f8:	3b01      	subs	r3, #1
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d80b      	bhi.n	8008816 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10c      	bne.n	8008820 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8ee 	bl	80089f0 <USBD_CtlSendStatus>
      }
      break;
 8008814:	e004      	b.n	8008820 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f83f 	bl	800889c <USBD_CtlError>
      break;
 800881e:	e000      	b.n	8008822 <USBD_ClrFeature+0x3a>
      break;
 8008820:	bf00      	nop
  }
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	785a      	ldrb	r2, [r3, #1]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3302      	adds	r3, #2
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	3303      	adds	r3, #3
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	b29b      	uxth	r3, r3
 8008856:	4413      	add	r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	3304      	adds	r3, #4
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	3305      	adds	r3, #5
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b29b      	uxth	r3, r3
 8008870:	4413      	add	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	3306      	adds	r3, #6
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	3307      	adds	r3, #7
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	b29b      	uxth	r3, r3
 800888a:	4413      	add	r3, r2
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	80da      	strh	r2, [r3, #6]

}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088a6:	2180      	movs	r1, #128	@ 0x80
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fb65 	bl	8008f78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fb61 	bl	8008f78 <USBD_LL_StallEP>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b086      	sub	sp, #24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d032      	beq.n	800893a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f834 	bl	8008942 <USBD_GetLen>
 80088da:	4603      	mov	r3, r0
 80088dc:	3301      	adds	r3, #1
 80088de:	b29b      	uxth	r3, r3
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	75fa      	strb	r2, [r7, #23]
 80088ee:	461a      	mov	r2, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	75fa      	strb	r2, [r7, #23]
 8008900:	461a      	mov	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	2203      	movs	r2, #3
 8008908:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800890a:	e012      	b.n	8008932 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	60fa      	str	r2, [r7, #12]
 8008912:	7dfa      	ldrb	r2, [r7, #23]
 8008914:	1c51      	adds	r1, r2, #1
 8008916:	75f9      	strb	r1, [r7, #23]
 8008918:	4611      	mov	r1, r2
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	440a      	add	r2, r1
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	75fa      	strb	r2, [r7, #23]
 8008928:	461a      	mov	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	4413      	add	r3, r2
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e8      	bne.n	800890c <USBD_GetString+0x4e>
    }
  }
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800894e:	e005      	b.n	800895c <USBD_GetLen+0x1a>
  {
    len++;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	3301      	adds	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3301      	adds	r3, #1
 800895a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f5      	bne.n	8008950 <USBD_GetLen+0xe>
  }

  return len;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr

08008970 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2202      	movs	r2, #2
 8008982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008986:	88fa      	ldrh	r2, [r7, #6]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fb75 	bl	8009088 <USBD_LL_Transmit>

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b6:	88fb      	ldrh	r3, [r7, #6]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	2100      	movs	r1, #0
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fb63 	bl	8009088 <USBD_LL_Transmit>

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	2100      	movs	r1, #0
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fb74 	bl	80090ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2204      	movs	r2, #4
 80089fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a00:	2300      	movs	r3, #0
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fb3e 	bl	8009088 <USBD_LL_Transmit>

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2205      	movs	r2, #5
 8008a22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a26:	2300      	movs	r3, #0
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fb4e 	bl	80090ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a40:	2200      	movs	r2, #0
 8008a42:	490e      	ldr	r1, [pc, #56]	@ (8008a7c <MX_USB_DEVICE_Init+0x40>)
 8008a44:	480e      	ldr	r0, [pc, #56]	@ (8008a80 <MX_USB_DEVICE_Init+0x44>)
 8008a46:	f7fe ff81 	bl	800794c <USBD_Init>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a50:	f7f7 fe02 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a54:	490b      	ldr	r1, [pc, #44]	@ (8008a84 <MX_USB_DEVICE_Init+0x48>)
 8008a56:	480a      	ldr	r0, [pc, #40]	@ (8008a80 <MX_USB_DEVICE_Init+0x44>)
 8008a58:	f7fe ffa3 	bl	80079a2 <USBD_RegisterClass>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a62:	f7f7 fdf9 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a66:	4806      	ldr	r0, [pc, #24]	@ (8008a80 <MX_USB_DEVICE_Init+0x44>)
 8008a68:	f7fe ffb4 	bl	80079d4 <USBD_Start>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a72:	f7f7 fdf1 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a76:	bf00      	nop
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000114 	.word	0x20000114
 8008a80:	20000284 	.word	0x20000284
 8008a84:	2000000c 	.word	0x2000000c

08008a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2212      	movs	r2, #18
 8008a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a9a:	4b03      	ldr	r3, [pc, #12]	@ (8008aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bc80      	pop	{r7}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	20000130 	.word	0x20000130

08008aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2204      	movs	r2, #4
 8008abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	@ (8008acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20000144 	.word	0x20000144

08008ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4907      	ldr	r1, [pc, #28]	@ (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ae6:	4808      	ldr	r0, [pc, #32]	@ (8008b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ae8:	f7ff fee9 	bl	80088be <USBD_GetString>
 8008aec:	e004      	b.n	8008af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4904      	ldr	r1, [pc, #16]	@ (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008af2:	4805      	ldr	r0, [pc, #20]	@ (8008b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008af4:	f7ff fee3 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af8:	4b02      	ldr	r3, [pc, #8]	@ (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000548 	.word	0x20000548
 8008b08:	0800921c 	.word	0x0800921c

08008b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	4904      	ldr	r1, [pc, #16]	@ (8008b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b1c:	4804      	ldr	r0, [pc, #16]	@ (8008b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b1e:	f7ff fece 	bl	80088be <USBD_GetString>
  return USBD_StrDesc;
 8008b22:	4b02      	ldr	r3, [pc, #8]	@ (8008b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20000548 	.word	0x20000548
 8008b30:	08009234 	.word	0x08009234

08008b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	221a      	movs	r2, #26
 8008b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b46:	f000 f843 	bl	8008bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b4a:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000148 	.word	0x20000148

08008b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	4907      	ldr	r1, [pc, #28]	@ (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b6e:	4808      	ldr	r0, [pc, #32]	@ (8008b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b70:	f7ff fea5 	bl	80088be <USBD_GetString>
 8008b74:	e004      	b.n	8008b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	4904      	ldr	r1, [pc, #16]	@ (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b7a:	4805      	ldr	r0, [pc, #20]	@ (8008b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b7c:	f7ff fe9f 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b80:	4b02      	ldr	r3, [pc, #8]	@ (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000548 	.word	0x20000548
 8008b90:	08009238 	.word	0x08009238

08008b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	4907      	ldr	r1, [pc, #28]	@ (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008baa:	4808      	ldr	r0, [pc, #32]	@ (8008bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bac:	f7ff fe87 	bl	80088be <USBD_GetString>
 8008bb0:	e004      	b.n	8008bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4904      	ldr	r1, [pc, #16]	@ (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bb6:	4805      	ldr	r0, [pc, #20]	@ (8008bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bb8:	f7ff fe81 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bbc:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000548 	.word	0x20000548
 8008bcc:	08009244 	.word	0x08009244

08008bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c14 <Get_SerialNum+0x44>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <Get_SerialNum+0x48>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <Get_SerialNum+0x4c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	4909      	ldr	r1, [pc, #36]	@ (8008c20 <Get_SerialNum+0x50>)
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f814 	bl	8008c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c00:	2204      	movs	r2, #4
 8008c02:	4908      	ldr	r1, [pc, #32]	@ (8008c24 <Get_SerialNum+0x54>)
 8008c04:	68b8      	ldr	r0, [r7, #8]
 8008c06:	f000 f80f 	bl	8008c28 <IntToUnicode>
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	1ffff7e8 	.word	0x1ffff7e8
 8008c18:	1ffff7ec 	.word	0x1ffff7ec
 8008c1c:	1ffff7f0 	.word	0x1ffff7f0
 8008c20:	2000014a 	.word	0x2000014a
 8008c24:	2000015a 	.word	0x2000015a

08008c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
 8008c3e:	e027      	b.n	8008c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d80b      	bhi.n	8008c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	0f1b      	lsrs	r3, r3, #28
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	4619      	mov	r1, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	440b      	add	r3, r1
 8008c58:	3230      	adds	r2, #48	@ 0x30
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	e00a      	b.n	8008c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	0f1b      	lsrs	r3, r3, #28
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	440b      	add	r3, r1
 8008c70:	3237      	adds	r2, #55	@ 0x37
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	3301      	adds	r3, #1
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
 8008c90:	7dfa      	ldrb	r2, [r7, #23]
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d3d3      	bcc.n	8008c40 <IntToUnicode+0x18>
  }
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce8 <HAL_PCD_MspInit+0x44>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d113      	bne.n	8008cde <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cec <HAL_PCD_MspInit+0x48>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	4a0c      	ldr	r2, [pc, #48]	@ (8008cec <HAL_PCD_MspInit+0x48>)
 8008cbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008cc0:	61d3      	str	r3, [r2, #28]
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cec <HAL_PCD_MspInit+0x48>)
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	2014      	movs	r0, #20
 8008cd4:	f7f8 f99b 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008cd8:	2014      	movs	r0, #20
 8008cda:	f7f8 f9b4 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40005c00 	.word	0x40005c00
 8008cec:	40021000 	.word	0x40021000

08008cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fe feac 	bl	8007a64 <USBD_LL_SetupStage>
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	440b      	add	r3, r1
 8008d34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7fe fede 	bl	8007afe <USBD_LL_DataOutStage>
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d5c:	78fa      	ldrb	r2, [r7, #3]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	440b      	add	r3, r1
 8008d6a:	3324      	adds	r3, #36	@ 0x24
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7fe ff35 	bl	8007be0 <USBD_LL_DataInStage>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff f845 	bl	8007e1c <USBD_LL_SOF>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008da2:	2301      	movs	r3, #1
 8008da4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	799b      	ldrb	r3, [r3, #6]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d001      	beq.n	8008db2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dae:	f7f7 fc53 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fff5 	bl	8007dac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe ffae 	bl	8007d2a <USBD_LL_Reset>
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe ffef 	bl	8007dca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7a9b      	ldrb	r3, [r3, #10]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008df4:	4b04      	ldr	r3, [pc, #16]	@ (8008e08 <HAL_PCD_SuspendCallback+0x30>)
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	4a03      	ldr	r2, [pc, #12]	@ (8008e08 <HAL_PCD_SuspendCallback+0x30>)
 8008dfa:	f043 0306 	orr.w	r3, r3, #6
 8008dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed00 	.word	0xe000ed00

08008e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe ffe9 	bl	8007df2 <USBD_LL_Resume>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e30:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e40:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e42:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb4 <USBD_LL_Init+0x8c>)
 8008e44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e46:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e48:	2208      	movs	r2, #8
 8008e4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e4c:	4b18      	ldr	r3, [pc, #96]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e4e:	2202      	movs	r2, #2
 8008e50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e52:	4b17      	ldr	r3, [pc, #92]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e58:	4b15      	ldr	r3, [pc, #84]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e5e:	4b14      	ldr	r3, [pc, #80]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e64:	4812      	ldr	r0, [pc, #72]	@ (8008eb0 <USBD_LL_Init+0x88>)
 8008e66:	f7f8 ff51 	bl	8001d0c <HAL_PCD_Init>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e70:	f7f7 fbf2 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e7a:	2318      	movs	r3, #24
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f7fa fc4b 	bl	800371a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e8a:	2358      	movs	r3, #88	@ 0x58
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2180      	movs	r1, #128	@ 0x80
 8008e90:	f7fa fc43 	bl	800371a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2181      	movs	r1, #129	@ 0x81
 8008ea2:	f7fa fc3a 	bl	800371a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000748 	.word	0x20000748
 8008eb4:	40005c00 	.word	0x40005c00

08008eb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f9 f812 	bl	8001ef8 <HAL_PCD_Start>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f93a 	bl	8009154 <USBD_Get_USB_Status>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	461a      	mov	r2, r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	70fb      	strb	r3, [r7, #3]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70bb      	strb	r3, [r7, #2]
 8008f04:	4613      	mov	r3, r2
 8008f06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f16:	78bb      	ldrb	r3, [r7, #2]
 8008f18:	883a      	ldrh	r2, [r7, #0]
 8008f1a:	78f9      	ldrb	r1, [r7, #3]
 8008f1c:	f7f9 f966 	bl	80021ec <HAL_PCD_EP_Open>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f914 	bl	8009154 <USBD_Get_USB_Status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f9 f9a4 	bl	80022a6 <HAL_PCD_EP_Close>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f8f5 	bl	8009154 <USBD_Get_USB_Status>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f9 fa35 	bl	8002406 <HAL_PCD_EP_SetStall>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f8d6 	bl	8009154 <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7f9 fa76 	bl	80024c6 <HAL_PCD_EP_ClrStall>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f8b7 	bl	8009154 <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009006:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900c:	2b00      	cmp	r3, #0
 800900e:	da0b      	bge.n	8009028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	440b      	add	r3, r1
 8009022:	3312      	adds	r3, #18
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	e00b      	b.n	8009040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	440b      	add	r3, r1
 800903a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800903e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr

0800904a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f7f9 f89b 	bl	80021a4 <HAL_PCD_SetAddress>
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 f86d 	bl	8009154 <USBD_Get_USB_Status>
 800907a:	4603      	mov	r3, r0
 800907c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	461a      	mov	r2, r3
 8009094:	460b      	mov	r3, r1
 8009096:	72fb      	strb	r3, [r7, #11]
 8009098:	4613      	mov	r3, r2
 800909a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090aa:	893b      	ldrh	r3, [r7, #8]
 80090ac:	7af9      	ldrb	r1, [r7, #11]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	f7f9 f972 	bl	8002398 <HAL_PCD_EP_Transmit>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f84a 	bl	8009154 <USBD_Get_USB_Status>
 80090c0:	4603      	mov	r3, r0
 80090c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	461a      	mov	r2, r3
 80090da:	460b      	mov	r3, r1
 80090dc:	72fb      	strb	r3, [r7, #11]
 80090de:	4613      	mov	r3, r2
 80090e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80090f0:	893b      	ldrh	r3, [r7, #8]
 80090f2:	7af9      	ldrb	r1, [r7, #11]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	f7f9 f91e 	bl	8002336 <HAL_PCD_EP_Receive>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f827 	bl	8009154 <USBD_Get_USB_Status>
 8009106:	4603      	mov	r3, r0
 8009108:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800910a:	7dbb      	ldrb	r3, [r7, #22]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800911c:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <USBD_static_malloc+0x14>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr
 8009128:	20000a20 	.word	0x20000a20

0800912c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]

}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr

0800913e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d817      	bhi.n	8009198 <USBD_Get_USB_Status+0x44>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBD_Get_USB_Status+0x1c>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009181 	.word	0x08009181
 8009174:	08009187 	.word	0x08009187
 8009178:	0800918d 	.word	0x0800918d
 800917c:	08009193 	.word	0x08009193
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
    break;
 8009184:	e00b      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009186:	2302      	movs	r3, #2
 8009188:	73fb      	strb	r3, [r7, #15]
    break;
 800918a:	e008      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800918c:	2301      	movs	r3, #1
 800918e:	73fb      	strb	r3, [r7, #15]
    break;
 8009190:	e005      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009192:	2302      	movs	r3, #2
 8009194:	73fb      	strb	r3, [r7, #15]
    break;
 8009196:	e002      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009198:	2302      	movs	r3, #2
 800919a:	73fb      	strb	r3, [r7, #15]
    break;
 800919c:	bf00      	nop
  }
  return usb_status;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <memset>:
 80091ac:	4603      	mov	r3, r0
 80091ae:	4402      	add	r2, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <__libc_init_array>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	2600      	movs	r6, #0
 80091c0:	4d0c      	ldr	r5, [pc, #48]	@ (80091f4 <__libc_init_array+0x38>)
 80091c2:	4c0d      	ldr	r4, [pc, #52]	@ (80091f8 <__libc_init_array+0x3c>)
 80091c4:	1b64      	subs	r4, r4, r5
 80091c6:	10a4      	asrs	r4, r4, #2
 80091c8:	42a6      	cmp	r6, r4
 80091ca:	d109      	bne.n	80091e0 <__libc_init_array+0x24>
 80091cc:	f000 f81a 	bl	8009204 <_init>
 80091d0:	2600      	movs	r6, #0
 80091d2:	4d0a      	ldr	r5, [pc, #40]	@ (80091fc <__libc_init_array+0x40>)
 80091d4:	4c0a      	ldr	r4, [pc, #40]	@ (8009200 <__libc_init_array+0x44>)
 80091d6:	1b64      	subs	r4, r4, r5
 80091d8:	10a4      	asrs	r4, r4, #2
 80091da:	42a6      	cmp	r6, r4
 80091dc:	d105      	bne.n	80091ea <__libc_init_array+0x2e>
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e4:	4798      	blx	r3
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7ee      	b.n	80091c8 <__libc_init_array+0xc>
 80091ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ee:	4798      	blx	r3
 80091f0:	3601      	adds	r6, #1
 80091f2:	e7f2      	b.n	80091da <__libc_init_array+0x1e>
 80091f4:	08009280 	.word	0x08009280
 80091f8:	08009280 	.word	0x08009280
 80091fc:	08009280 	.word	0x08009280
 8009200:	08009284 	.word	0x08009284

08009204 <_init>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

08009210 <_fini>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr
