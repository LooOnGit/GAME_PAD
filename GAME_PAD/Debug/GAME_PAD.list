
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ad0  08003ad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b10  08003b10  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b10  08003b10  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00004b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b14  08003b14  00004b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08003b24  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003b24  00005130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb4  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be9  00000000  00000000  00010be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000127d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa0  00000000  00000000  00013560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e3b  00000000  00000000  00014000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f715  00000000  00000000  0002be3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb70  00000000  00000000  0003b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca0c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  000ca104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000cda68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ab8 	.word	0x08003ab8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003ab8 	.word	0x08003ab8

0800014c <TLC59116_Init>:
void MCP23017_EnablePullUps() {
    MCP23017_WriteRegister(0x0C, 0xFF); // GPPUA - bật pull-up cho tất cả chân A
    MCP23017_WriteRegister(0x0D, 0xFF); // GPPUB - bật pull-up cho tất cả chân B
}

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af04      	add	r7, sp, #16
 8000152:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 8000158:	2300      	movs	r3, #0
 800015a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	9302      	str	r3, [sp, #8]
 8000162:	2301      	movs	r3, #1
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	f107 030f 	add.w	r3, r7, #15
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	2301      	movs	r3, #1
 800016e:	2200      	movs	r2, #0
 8000170:	21c0      	movs	r1, #192	@ 0xc0
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f001 fc9a 	bl	8001aac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	9302      	str	r3, [sp, #8]
 800017e:	2301      	movs	r3, #1
 8000180:	9301      	str	r3, [sp, #4]
 8000182:	f107 030e 	add.w	r3, r7, #14
 8000186:	9300      	str	r3, [sp, #0]
 8000188:	2301      	movs	r3, #1
 800018a:	2201      	movs	r2, #1
 800018c:	21c0      	movs	r1, #192	@ 0xc0
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 fc8c 	bl	8001aac <HAL_I2C_Mem_Write>
}
 8000194:	bf00      	nop
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}

0800019c <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af04      	add	r7, sp, #16
 80001a2:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 80001a4:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80001a8:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001aa:	f04f 33ff 	mov.w	r3, #4294967295
 80001ae:	9302      	str	r3, [sp, #8]
 80001b0:	2304      	movs	r3, #4
 80001b2:	9301      	str	r3, [sp, #4]
 80001b4:	f107 030c 	add.w	r3, r7, #12
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2301      	movs	r3, #1
 80001bc:	2214      	movs	r2, #20
 80001be:	21c0      	movs	r1, #192	@ 0xc0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f001 fc73 	bl	8001aac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	9302      	str	r3, [sp, #8]
 80001cc:	2304      	movs	r3, #4
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	2215      	movs	r2, #21
 80001da:	21c0      	movs	r1, #192	@ 0xc0
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f001 fc65 	bl	8001aac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	9302      	str	r3, [sp, #8]
 80001e8:	2304      	movs	r3, #4
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	f107 030c 	add.w	r3, r7, #12
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2301      	movs	r3, #1
 80001f4:	2216      	movs	r2, #22
 80001f6:	21c0      	movs	r1, #192	@ 0xc0
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f001 fc57 	bl	8001aac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000202:	9302      	str	r3, [sp, #8]
 8000204:	2304      	movs	r3, #4
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	2217      	movs	r2, #23
 8000212:	21c0      	movs	r1, #192	@ 0xc0
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f001 fc49 	bl	8001aac <HAL_I2C_Mem_Write>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fbc2 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f84a 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f9ee 	bl	8000610 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000234:	f000 f91c 	bl	8000470 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000238:	f000 f89e 	bl	8000378 <MX_ADC1_Init>
  MX_ADC2_Init();
 800023c:	f000 f8da 	bl	80003f4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000240:	f000 f944 	bl	80004cc <MX_TIM1_Init>

  //mode digital
//  TLC59116_Init(&hi2c1);

  //mode pwm
  TLC59116_Init(&hi2c1);
 8000244:	481a      	ldr	r0, [pc, #104]	@ (80002b0 <main+0x8c>)
 8000246:	f7ff ff81 	bl	800014c <TLC59116_Init>
  TLC59116_Set_All_PWM_Mode(&hi2c1);
 800024a:	4819      	ldr	r0, [pc, #100]	@ (80002b0 <main+0x8c>)
 800024c:	f7ff ffa6 	bl	800019c <TLC59116_Set_All_PWM_Mode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000250:	2104      	movs	r1, #4
 8000252:	4818      	ldr	r0, [pc, #96]	@ (80002b4 <main+0x90>)
 8000254:	f002 fdb6 	bl	8002dc4 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);     // Nếu bạn dùng CH2 chính
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // CH2N → xuất ra PB14
 8000258:	2104      	movs	r1, #4
 800025a:	4816      	ldr	r0, [pc, #88]	@ (80002b4 <main+0x90>)
 800025c:	f003 fa8e 	bl	800377c <HAL_TIMEx_PWMN_Start>
//    value_ledPWM = (ADC_VAL * 255)/4095;
//	for(uint8_t j = 0; j < 14; j++){
//		TLC59116_Set_PWM(&hi2c1, j, value_ledPWM); // Tăng độ sáng OUT0
//	}

	HAL_ADC_Start(&hadc2);
 8000260:	4815      	ldr	r0, [pc, #84]	@ (80002b8 <main+0x94>)
 8000262:	f000 fcdf 	bl	8000c24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8000266:	2164      	movs	r1, #100	@ 0x64
 8000268:	4813      	ldr	r0, [pc, #76]	@ (80002b8 <main+0x94>)
 800026a:	f000 fdb5 	bl	8000dd8 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 800026e:	4812      	ldr	r0, [pc, #72]	@ (80002b8 <main+0x94>)
 8000270:	f000 feb8 	bl	8000fe4 <HAL_ADC_GetValue>
 8000274:	4603      	mov	r3, r0
 8000276:	b29a      	uxth	r2, r3
 8000278:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <main+0x98>)
 800027a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 800027c:	480e      	ldr	r0, [pc, #56]	@ (80002b8 <main+0x94>)
 800027e:	f000 fd7f 	bl	8000d80 <HAL_ADC_Stop>
	value_ledPWM = (ADC_VAL * 800)/4096;
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <main+0x98>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	da01      	bge.n	8000298 <main+0x74>
 8000294:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000298:	131b      	asrs	r3, r3, #12
 800029a:	461a      	mov	r2, r3
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <main+0x9c>)
 800029e:	601a      	str	r2, [r3, #0]
    // �?i�?u khiển PWM: Tăng dần từ 0 đến 100%
//    for (uint16_t i = 0; i < 800; i++) {
//        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);  // Thay đổi duty cycle
//        HAL_Delay(10); // Delay để quan sát thay đổi
//    }
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_ledPWM);
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <main+0x9c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <main+0x90>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_ADC_Start(&hadc2);
 80002aa:	bf00      	nop
 80002ac:	e7d8      	b.n	8000260 <main+0x3c>
 80002ae:	bf00      	nop
 80002b0:	20000088 	.word	0x20000088
 80002b4:	200000dc 	.word	0x200000dc
 80002b8:	20000058 	.word	0x20000058
 80002bc:	20000124 	.word	0x20000124
 80002c0:	20000128 	.word	0x20000128

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	@ 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fbc3 	bl	8003a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000306:	2302      	movs	r3, #2
 8000308:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000310:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800031a:	4618      	mov	r0, r3
 800031c:	f001 ff2e 	bl	800217c <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000326:	f000 f9bd 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2302      	movs	r3, #2
 8000330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f002 f99a 	bl	8002680 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000352:	f000 f9a7 	bl	80006a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000356:	2302      	movs	r3, #2
 8000358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fb1b 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800036c:	f000 f99a 	bl	80006a4 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	@ 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_ADC1_Init+0x74>)
 800038a:	4a19      	ldr	r2, [pc, #100]	@ (80003f0 <MX_ADC1_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_ADC1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_ADC1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_ADC1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_ADC1_Init+0x74>)
 80003a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a8:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <MX_ADC1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_ADC1_Init+0x74>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b4:	480d      	ldr	r0, [pc, #52]	@ (80003ec <MX_ADC1_Init+0x74>)
 80003b6:	f000 fb5d 	bl	8000a74 <HAL_ADC_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003c0:	f000 f970 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003cc:	2307      	movs	r3, #7
 80003ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	@ (80003ec <MX_ADC1_Init+0x74>)
 80003d6:	f000 fe11 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003e0:	f000 f960 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000028 	.word	0x20000028
 80003f0:	40012400 	.word	0x40012400

080003f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000404:	4b18      	ldr	r3, [pc, #96]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000406:	4a19      	ldr	r2, [pc, #100]	@ (800046c <MX_ADC2_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <MX_ADC2_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_ADC2_Init+0x74>)
 800041e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000422:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_ADC2_Init+0x74>)
 800042c:	2201      	movs	r2, #1
 800042e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000432:	f000 fb1f 	bl	8000a74 <HAL_ADC_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800043c:	f000 f932 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000440:	2301      	movs	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000444:	2301      	movs	r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000448:	2307      	movs	r3, #7
 800044a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	@ (8000468 <MX_ADC2_Init+0x74>)
 8000452:	f000 fdd3 	bl	8000ffc <HAL_ADC_ConfigChannel>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800045c:	f000 f922 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000058 	.word	0x20000058
 800046c:	40012800 	.word	0x40012800

08000470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_I2C1_Init+0x50>)
 8000476:	4a13      	ldr	r2, [pc, #76]	@ (80004c4 <MX_I2C1_Init+0x54>)
 8000478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <MX_I2C1_Init+0x50>)
 800047c:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <MX_I2C1_Init+0x58>)
 800047e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000480:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <MX_I2C1_Init+0x50>)
 800048e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <MX_I2C1_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <MX_I2C1_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a0:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <MX_I2C1_Init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <MX_I2C1_Init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <MX_I2C1_Init+0x50>)
 80004ae:	f001 f9b9 	bl	8001824 <HAL_I2C_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b8:	f000 f8f4 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000088 	.word	0x20000088
 80004c4:	40005400 	.word	0x40005400
 80004c8:	000186a0 	.word	0x000186a0

080004cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b096      	sub	sp, #88	@ 0x58
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2220      	movs	r2, #32
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f003 faaa 	bl	8003a5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800050a:	4b3f      	ldr	r3, [pc, #252]	@ (8000608 <MX_TIM1_Init+0x13c>)
 800050c:	4a3f      	ldr	r2, [pc, #252]	@ (800060c <MX_TIM1_Init+0x140>)
 800050e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 599;
 8000510:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000512:	f240 2257 	movw	r2, #599	@ 0x257
 8000516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b3b      	ldr	r3, [pc, #236]	@ (8000608 <MX_TIM1_Init+0x13c>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800051e:	4b3a      	ldr	r3, [pc, #232]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000520:	f240 321f 	movw	r2, #799	@ 0x31f
 8000524:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b38      	ldr	r3, [pc, #224]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800052c:	4b36      	ldr	r3, [pc, #216]	@ (8000608 <MX_TIM1_Init+0x13c>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000532:	4b35      	ldr	r3, [pc, #212]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000538:	4833      	ldr	r0, [pc, #204]	@ (8000608 <MX_TIM1_Init+0x13c>)
 800053a:	f002 fb9b 	bl	8002c74 <HAL_TIM_Base_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000544:	f000 f8ae 	bl	80006a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800054e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000552:	4619      	mov	r1, r3
 8000554:	482c      	ldr	r0, [pc, #176]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000556:	f002 fd99 	bl	800308c <HAL_TIM_ConfigClockSource>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000560:	f000 f8a0 	bl	80006a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000564:	4828      	ldr	r0, [pc, #160]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000566:	f002 fbd4 	bl	8002d12 <HAL_TIM_PWM_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000570:	f000 f898 	bl	80006a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000574:	2300      	movs	r3, #0
 8000576:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000580:	4619      	mov	r1, r3
 8000582:	4821      	ldr	r0, [pc, #132]	@ (8000608 <MX_TIM1_Init+0x13c>)
 8000584:	f003 f998 	bl	80038b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800058e:	f000 f889 	bl	80006a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000592:	2360      	movs	r3, #96	@ 0x60
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b2:	2204      	movs	r2, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4814      	ldr	r0, [pc, #80]	@ (8000608 <MX_TIM1_Init+0x13c>)
 80005b8:	f002 fca6 	bl	8002f08 <HAL_TIM_PWM_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80005c2:	f000 f86f 	bl	80006a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM1_Init+0x13c>)
 80005ea:	f003 f9c3 	bl	8003974 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80005f4:	f000 f856 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <MX_TIM1_Init+0x13c>)
 80005fa:	f000 f94d 	bl	8000898 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3758      	adds	r7, #88	@ 0x58
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000dc 	.word	0x200000dc
 800060c:	40012c00 	.word	0x40012c00

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <MX_GPIO_Init+0x8c>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_GPIO_Init+0x8c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_GPIO_Init+0x8c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <MX_GPIO_Init+0x8c>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_GPIO_Init+0x8c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <MX_GPIO_Init+0x90>)
 8000672:	f001 f8bf 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x90>)
 800068e:	f000 ff2d 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010c00 	.word	0x40010c00

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a14      	ldr	r2, [pc, #80]	@ (800070c <HAL_MspInit+0x5c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x5c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_MspInit+0x60>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <HAL_MspInit+0x60>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000

08000714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a28      	ldr	r2, [pc, #160]	@ (80007d0 <HAL_ADC_MspInit+0xbc>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d122      	bne.n	800077a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 800073a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0318 	add.w	r3, r7, #24
 8000770:	4619      	mov	r1, r3
 8000772:	4819      	ldr	r0, [pc, #100]	@ (80007d8 <HAL_ADC_MspInit+0xc4>)
 8000774:	f000 feba 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000778:	e026      	b.n	80007c8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <HAL_ADC_MspInit+0xc8>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d121      	bne.n	80007c8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 800078a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_ADC_MspInit+0xc0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b8:	2303      	movs	r3, #3
 80007ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <HAL_ADC_MspInit+0xc4>)
 80007c4:	f000 fe92 	bl	80014ec <HAL_GPIO_Init>
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40012400 	.word	0x40012400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40012800 	.word	0x40012800

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <HAL_I2C_MspInit+0x70>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d123      	bne.n	8000848 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000818:	23c0      	movs	r3, #192	@ 0xc0
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0x78>)
 800082c:	f000 fe5e 	bl	80014ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 8000836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0x74>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	40021000 	.word	0x40021000
 8000858:	40010c00 	.word	0x40010c00

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <HAL_TIM_Base_MspInit+0x34>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_TIM_Base_MspInit+0x38>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_TIM_Base_MspInit+0x38>)
 8000874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_TIM_Base_MspInit+0x38>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40012c00 	.word	0x40012c00
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <HAL_TIM_MspPostInit+0x5c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d118      	bne.n	80008ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_TIM_MspPostInit+0x60>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <HAL_TIM_MspPostInit+0x60>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_TIM_MspPostInit+0x60>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <HAL_TIM_MspPostInit+0x64>)
 80008e6:	f000 fe01 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010c00 	.word	0x40010c00

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f874 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000964:	f7ff fff8 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480b      	ldr	r0, [pc, #44]	@ (8000998 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800096a:	490c      	ldr	r1, [pc, #48]	@ (800099c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a09      	ldr	r2, [pc, #36]	@ (80009a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000980:	4c09      	ldr	r4, [pc, #36]	@ (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f003 f86f 	bl	8003a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fc47 	bl	8000224 <main>
  bx lr
 8000996:	4770      	bx	lr
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	08003b18 	.word	0x08003b18
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	20000130 	.word	0x20000130

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_Init+0x28>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_Init+0x28>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 fd5f 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff fe70 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fd69 	bl	80014d2 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 fd3f 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a03      	ldr	r2, [pc, #12]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	2000012c 	.word	0x2000012c

08000a60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b02      	ldr	r3, [pc, #8]	@ (8000a70 <HAL_GetTick+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	2000012c 	.word	0x2000012c

08000a74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e0be      	b.n	8000c14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d109      	bne.n	8000ab8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fe2e 	bl	8000714 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fbf1 	bl	80012a0 <ADC_ConversionStop_Disable>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 8099 	bne.w	8000c02 <HAL_ADC_Init+0x18e>
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8095 	bne.w	8000c02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000adc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ae0:	f023 0302 	bic.w	r3, r3, #2
 8000ae4:	f043 0202 	orr.w	r2, r3, #2
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7b1b      	ldrb	r3, [r3, #12]
 8000afa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000afc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b0c:	d003      	beq.n	8000b16 <HAL_ADC_Init+0xa2>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <HAL_ADC_Init+0xa8>
 8000b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1a:	e000      	b.n	8000b1e <HAL_ADC_Init+0xaa>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7d1b      	ldrb	r3, [r3, #20]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d119      	bne.n	8000b60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7b1b      	ldrb	r3, [r3, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d109      	bne.n	8000b48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	035a      	lsls	r2, r3, #13
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	e00b      	b.n	8000b60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4c:	f043 0220 	orr.w	r2, r3, #32
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b58:	f043 0201 	orr.w	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <HAL_ADC_Init+0x1a8>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b90:	d003      	beq.n	8000b9a <HAL_ADC_Init+0x126>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d104      	bne.n	8000ba4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	051b      	lsls	r3, r3, #20
 8000ba2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_ADC_Init+0x1ac>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d10b      	bne.n	8000be0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd2:	f023 0303 	bic.w	r3, r3, #3
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bde:	e018      	b.n	8000c12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be4:	f023 0312 	bic.w	r3, r3, #18
 8000be8:	f043 0210 	orr.w	r2, r3, #16
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	f043 0201 	orr.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c00:	e007      	b.n	8000c12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c06:	f043 0210 	orr.w	r2, r3, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	ffe1f7fd 	.word	0xffe1f7fd
 8000c20:	ff1f0efe 	.word	0xff1f0efe

08000c24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d101      	bne.n	8000c3e <HAL_ADC_Start+0x1a>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e098      	b.n	8000d70 <HAL_ADC_Start+0x14c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fad0 	bl	80011ec <ADC_Enable>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8087 	bne.w	8000d66 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c60:	f023 0301 	bic.w	r3, r3, #1
 8000c64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a41      	ldr	r2, [pc, #260]	@ (8000d78 <HAL_ADC_Start+0x154>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d105      	bne.n	8000c82 <HAL_ADC_Start+0x5e>
 8000c76:	4b41      	ldr	r3, [pc, #260]	@ (8000d7c <HAL_ADC_Start+0x158>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d115      	bne.n	8000cae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d026      	beq.n	8000cea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ca4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cac:	e01d      	b.n	8000cea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8000d7c <HAL_ADC_Start+0x158>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d004      	beq.n	8000cce <HAL_ADC_Start+0xaa>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d78 <HAL_ADC_Start+0x154>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10d      	bne.n	8000cea <HAL_ADC_Start+0xc6>
 8000cce:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <HAL_ADC_Start+0x158>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d007      	beq.n	8000cea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cde:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ce2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfa:	f023 0206 	bic.w	r2, r3, #6
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d02:	e002      	b.n	8000d0a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f06f 0202 	mvn.w	r2, #2
 8000d1a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d26:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d2a:	d113      	bne.n	8000d54 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d30:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <HAL_ADC_Start+0x154>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d105      	bne.n	8000d42 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_ADC_Start+0x158>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d108      	bne.n	8000d54 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	e00c      	b.n	8000d6e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	e003      	b.n	8000d6e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40012800 	.word	0x40012800
 8000d7c:	40012400 	.word	0x40012400

08000d80 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_ADC_Stop+0x1a>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e01a      	b.n	8000dd0 <HAL_ADC_Stop+0x50>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fa7c 	bl	80012a0 <ADC_ConversionStop_Disable>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dee:	f7ff fe37 	bl	8000a60 <HAL_GetTick>
 8000df2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00b      	beq.n	8000e1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e06:	f043 0220 	orr.w	r2, r3, #32
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0d3      	b.n	8000fc2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d131      	bne.n	8000e8c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d12a      	bne.n	8000e8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e36:	e021      	b.n	8000e7c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3e:	d01d      	beq.n	8000e7c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_ADC_PollForConversion+0x7e>
 8000e46:	f7ff fe0b 	bl	8000a60 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d212      	bcs.n	8000e7c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10b      	bne.n	8000e7c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0a2      	b.n	8000fc2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0d6      	beq.n	8000e38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e8a:	e070      	b.n	8000f6e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fcc <HAL_ADC_PollForConversion+0x1f4>)
 8000e8e:	681c      	ldr	r4, [r3, #0]
 8000e90:	2002      	movs	r0, #2
 8000e92:	f001 fe39 	bl	8002b08 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e96:	4603      	mov	r3, r0
 8000e98:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6919      	ldr	r1, [r3, #16]
 8000ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8000fd0 <HAL_ADC_PollForConversion+0x1f8>)
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_ADC_PollForConversion+0x104>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68d9      	ldr	r1, [r3, #12]
 8000eb0:	4b48      	ldr	r3, [pc, #288]	@ (8000fd4 <HAL_ADC_PollForConversion+0x1fc>)
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_ADC_PollForConversion+0x104>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6919      	ldr	r1, [r3, #16]
 8000ebe:	4b46      	ldr	r3, [pc, #280]	@ (8000fd8 <HAL_ADC_PollForConversion+0x200>)
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d108      	bne.n	8000ed8 <HAL_ADC_PollForConversion+0x100>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68d9      	ldr	r1, [r3, #12]
 8000ecc:	4b43      	ldr	r3, [pc, #268]	@ (8000fdc <HAL_ADC_PollForConversion+0x204>)
 8000ece:	400b      	ands	r3, r1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_ADC_PollForConversion+0x100>
 8000ed4:	2314      	movs	r3, #20
 8000ed6:	e020      	b.n	8000f1a <HAL_ADC_PollForConversion+0x142>
 8000ed8:	2329      	movs	r3, #41	@ 0x29
 8000eda:	e01e      	b.n	8000f1a <HAL_ADC_PollForConversion+0x142>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6919      	ldr	r1, [r3, #16]
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd8 <HAL_ADC_PollForConversion+0x200>)
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x120>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68d9      	ldr	r1, [r3, #12]
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <HAL_ADC_PollForConversion+0x204>)
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00d      	beq.n	8000f14 <HAL_ADC_PollForConversion+0x13c>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6919      	ldr	r1, [r3, #16]
 8000efe:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <HAL_ADC_PollForConversion+0x208>)
 8000f00:	400b      	ands	r3, r1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d108      	bne.n	8000f18 <HAL_ADC_PollForConversion+0x140>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68d9      	ldr	r1, [r3, #12]
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <HAL_ADC_PollForConversion+0x208>)
 8000f0e:	400b      	ands	r3, r1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_ADC_PollForConversion+0x140>
 8000f14:	2354      	movs	r3, #84	@ 0x54
 8000f16:	e000      	b.n	8000f1a <HAL_ADC_PollForConversion+0x142>
 8000f18:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f20:	e021      	b.n	8000f66 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d01a      	beq.n	8000f60 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <HAL_ADC_PollForConversion+0x168>
 8000f30:	f7ff fd96 	bl	8000a60 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d20f      	bcs.n	8000f60 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d90b      	bls.n	8000f60 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4c:	f043 0204 	orr.w	r2, r3, #4
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e030      	b.n	8000fc2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d8d9      	bhi.n	8000f22 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f06f 0212 	mvn.w	r2, #18
 8000f76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f8e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f92:	d115      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb8:	f043 0201 	orr.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	24924924 	.word	0x24924924
 8000fd4:	00924924 	.word	0x00924924
 8000fd8:	12492492 	.word	0x12492492
 8000fdc:	00492492 	.word	0x00492492
 8000fe0:	00249249 	.word	0x00249249

08000fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_ConfigChannel+0x20>
 8001018:	2302      	movs	r3, #2
 800101a:	e0dc      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1da>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d81c      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	3b05      	subs	r3, #5
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b05      	subs	r3, #5
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34
 8001064:	e03c      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d81c      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b23      	subs	r3, #35	@ 0x23
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	4019      	ands	r1, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b23      	subs	r3, #35	@ 0x23
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a6:	e01b      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b41      	subs	r3, #65	@ 0x41
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b41      	subs	r3, #65	@ 0x41
 80010d4:	fa00 f203 	lsl.w	r2, r0, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d91c      	bls.n	8001122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3b1e      	subs	r3, #30
 80010fa:	2207      	movs	r2, #7
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6898      	ldr	r0, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	3b1e      	subs	r3, #30
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	e019      	b.n	8001156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6919      	ldr	r1, [r3, #16]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	fa00 f203 	lsl.w	r2, r0, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d003      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	2b11      	cmp	r3, #17
 8001164:	d132      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d125      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d126      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800118c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d11a      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9a      	lsrs	r2, r3, #18
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x1b2>
 80011ba:	e007      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40012400 	.word	0x40012400
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83

080011ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d040      	beq.n	800128c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <ADC_Enable+0xac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <ADC_Enable+0xb0>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001228:	e002      	b.n	8001230 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001236:	f7ff fc13 	bl	8000a60 <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800123c:	e01f      	b.n	800127e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123e:	f7ff fc0f 	bl	8000a60 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d918      	bls.n	800127e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d011      	beq.n	800127e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125e:	f043 0210 	orr.w	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e007      	b.n	800128e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b01      	cmp	r3, #1
 800128a:	d1d8      	bne.n	800123e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d12e      	bne.n	8001318 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ca:	f7ff fbc9 	bl	8000a60 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012d0:	e01b      	b.n	800130a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012d2:	f7ff fbc5 	bl	8000a60 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d914      	bls.n	800130a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10d      	bne.n	800130a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e007      	b.n	800131a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d0dc      	beq.n	80012d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff90 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff49 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff5e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffb0 	bl	8001440 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b08b      	sub	sp, #44	@ 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e169      	b.n	80017d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001500:	2201      	movs	r2, #1
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 8158 	bne.w	80017ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a9a      	ldr	r2, [pc, #616]	@ (800178c <HAL_GPIO_Init+0x2a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d05e      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001528:	4a98      	ldr	r2, [pc, #608]	@ (800178c <HAL_GPIO_Init+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d875      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800152e:	4a98      	ldr	r2, [pc, #608]	@ (8001790 <HAL_GPIO_Init+0x2a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d058      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001534:	4a96      	ldr	r2, [pc, #600]	@ (8001790 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d86f      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800153a:	4a96      	ldr	r2, [pc, #600]	@ (8001794 <HAL_GPIO_Init+0x2a8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d052      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001540:	4a94      	ldr	r2, [pc, #592]	@ (8001794 <HAL_GPIO_Init+0x2a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d869      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001546:	4a94      	ldr	r2, [pc, #592]	@ (8001798 <HAL_GPIO_Init+0x2ac>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04c      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 800154c:	4a92      	ldr	r2, [pc, #584]	@ (8001798 <HAL_GPIO_Init+0x2ac>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d863      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001552:	4a92      	ldr	r2, [pc, #584]	@ (800179c <HAL_GPIO_Init+0x2b0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d046      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001558:	4a90      	ldr	r2, [pc, #576]	@ (800179c <HAL_GPIO_Init+0x2b0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d85d      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d82a      	bhi.n	80015b8 <HAL_GPIO_Init+0xcc>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d859      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001566:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <HAL_GPIO_Init+0x80>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015c1 	.word	0x080015c1
 8001574:	080015d3 	.word	0x080015d3
 8001578:	08001615 	.word	0x08001615
 800157c:	0800161b 	.word	0x0800161b
 8001580:	0800161b 	.word	0x0800161b
 8001584:	0800161b 	.word	0x0800161b
 8001588:	0800161b 	.word	0x0800161b
 800158c:	0800161b 	.word	0x0800161b
 8001590:	0800161b 	.word	0x0800161b
 8001594:	0800161b 	.word	0x0800161b
 8001598:	0800161b 	.word	0x0800161b
 800159c:	0800161b 	.word	0x0800161b
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	0800161b 	.word	0x0800161b
 80015a8:	0800161b 	.word	0x0800161b
 80015ac:	0800161b 	.word	0x0800161b
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015dd 	.word	0x080015dd
 80015b8:	4a79      	ldr	r2, [pc, #484]	@ (80017a0 <HAL_GPIO_Init+0x2b4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015be:	e02c      	b.n	800161a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e029      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e024      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	3308      	adds	r3, #8
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e01f      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	330c      	adds	r3, #12
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e01a      	b.n	800161c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ee:	2304      	movs	r3, #4
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e013      	b.n	800161c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	611a      	str	r2, [r3, #16]
          break;
 8001606:	e009      	b.n	800161c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001608:	2308      	movs	r3, #8
 800160a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	615a      	str	r2, [r3, #20]
          break;
 8001612:	e003      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x130>
          break;
 800161a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	@ 0xff
 8001620:	d801      	bhi.n	8001626 <HAL_GPIO_Init+0x13a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	e001      	b.n	800162a <HAL_GPIO_Init+0x13e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	@ 0xff
 8001630:	d802      	bhi.n	8001638 <HAL_GPIO_Init+0x14c>
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x152>
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	3b08      	subs	r3, #8
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	210f      	movs	r1, #15
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	6a39      	ldr	r1, [r7, #32]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80b1 	beq.w	80017ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800166c:	4b4d      	ldr	r3, [pc, #308]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a4c      	ldr	r2, [pc, #304]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b4a      	ldr	r3, [pc, #296]	@ (80017a4 <HAL_GPIO_Init+0x2b8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001684:	4a48      	ldr	r2, [pc, #288]	@ (80017a8 <HAL_GPIO_Init+0x2bc>)
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a40      	ldr	r2, [pc, #256]	@ (80017ac <HAL_GPIO_Init+0x2c0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1ec>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3f      	ldr	r2, [pc, #252]	@ (80017b0 <HAL_GPIO_Init+0x2c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	@ (80017b4 <HAL_GPIO_Init+0x2c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3d      	ldr	r2, [pc, #244]	@ (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1e0>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e006      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e004      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d8:	2300      	movs	r3, #0
 80016da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	4093      	lsls	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ea:	492f      	ldr	r1, [pc, #188]	@ (80017a8 <HAL_GPIO_Init+0x2bc>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001704:	4b2d      	ldr	r3, [pc, #180]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	492c      	ldr	r1, [pc, #176]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4928      	ldr	r1, [pc, #160]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4922      	ldr	r1, [pc, #136]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	491e      	ldr	r1, [pc, #120]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4918      	ldr	r1, [pc, #96]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4914      	ldr	r1, [pc, #80]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d021      	beq.n	80017c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	490e      	ldr	r1, [pc, #56]	@ (80017bc <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e021      	b.n	80017ce <HAL_GPIO_Init+0x2e2>
 800178a:	bf00      	nop
 800178c:	10320000 	.word	0x10320000
 8001790:	10310000 	.word	0x10310000
 8001794:	10220000 	.word	0x10220000
 8001798:	10210000 	.word	0x10210000
 800179c:	10120000 	.word	0x10120000
 80017a0:	10110000 	.word	0x10110000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40010800 	.word	0x40010800
 80017b0:	40010c00 	.word	0x40010c00
 80017b4:	40011000 	.word	0x40011000
 80017b8:	40011400 	.word	0x40011400
 80017bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_GPIO_Init+0x304>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4909      	ldr	r1, [pc, #36]	@ (80017f0 <HAL_GPIO_Init+0x304>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f47f ae8e 	bne.w	8001500 <HAL_GPIO_Init+0x14>
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	372c      	adds	r7, #44	@ 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e12b      	b.n	8001a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe ffc8 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2224      	movs	r2, #36	@ 0x24
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001888:	f001 f842 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a81      	ldr	r2, [pc, #516]	@ (8001a98 <HAL_I2C_Init+0x274>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d807      	bhi.n	80018a8 <HAL_I2C_Init+0x84>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a80      	ldr	r2, [pc, #512]	@ (8001a9c <HAL_I2C_Init+0x278>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e006      	b.n	80018b6 <HAL_I2C_Init+0x92>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa0 <HAL_I2C_Init+0x27c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf94      	ite	ls
 80018b0:	2301      	movls	r3, #1
 80018b2:	2300      	movhi	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0e7      	b.n	8001a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a78      	ldr	r2, [pc, #480]	@ (8001aa4 <HAL_I2C_Init+0x280>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0c9b      	lsrs	r3, r3, #18
 80018c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001a98 <HAL_I2C_Init+0x274>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d802      	bhi.n	80018f8 <HAL_I2C_Init+0xd4>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	e009      	b.n	800190c <HAL_I2C_Init+0xe8>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	4a69      	ldr	r2, [pc, #420]	@ (8001aa8 <HAL_I2C_Init+0x284>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	3301      	adds	r3, #1
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800191e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	495c      	ldr	r1, [pc, #368]	@ (8001a98 <HAL_I2C_Init+0x274>)
 8001928:	428b      	cmp	r3, r1
 800192a:	d819      	bhi.n	8001960 <HAL_I2C_Init+0x13c>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e59      	subs	r1, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fbb1 f3f3 	udiv	r3, r1, r3
 800193a:	1c59      	adds	r1, r3, #1
 800193c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001940:	400b      	ands	r3, r1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <HAL_I2C_Init+0x138>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1e59      	subs	r1, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fbb1 f3f3 	udiv	r3, r1, r3
 8001954:	3301      	adds	r3, #1
 8001956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195a:	e051      	b.n	8001a00 <HAL_I2C_Init+0x1dc>
 800195c:	2304      	movs	r3, #4
 800195e:	e04f      	b.n	8001a00 <HAL_I2C_Init+0x1dc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_I2C_Init+0x168>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	440b      	add	r3, r1
 8001976:	fbb0 f3f3 	udiv	r3, r0, r3
 800197a:	3301      	adds	r3, #1
 800197c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	e012      	b.n	80019b2 <HAL_I2C_Init+0x18e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1e58      	subs	r0, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	0099      	lsls	r1, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Init+0x196>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e022      	b.n	8001a00 <HAL_I2C_Init+0x1dc>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <HAL_I2C_Init+0x1bc>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1e58      	subs	r0, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	440b      	add	r3, r1
 80019d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019de:	e00f      	b.n	8001a00 <HAL_I2C_Init+0x1dc>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	0099      	lsls	r1, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6809      	ldr	r1, [r1, #0]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6911      	ldr	r1, [r2, #16]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	000186a0 	.word	0x000186a0
 8001a9c:	001e847f 	.word	0x001e847f
 8001aa0:	003d08ff 	.word	0x003d08ff
 8001aa4:	431bde83 	.word	0x431bde83
 8001aa8:	10624dd3 	.word	0x10624dd3

08001aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	813b      	strh	r3, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ac6:	f7fe ffcb 	bl	8000a60 <HAL_GetTick>
 8001aca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	f040 80d9 	bne.w	8001c8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2319      	movs	r3, #25
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	496d      	ldr	r1, [pc, #436]	@ (8001c98 <HAL_I2C_Mem_Write+0x1ec>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f971 	bl	8001dcc <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0cc      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Mem_Write+0x56>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0c5      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d007      	beq.n	8001b28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2221      	movs	r2, #33	@ 0x21
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a3a      	ldr	r2, [r7, #32]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a4d      	ldr	r2, [pc, #308]	@ (8001c9c <HAL_I2C_Mem_Write+0x1f0>)
 8001b68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b6a:	88f8      	ldrh	r0, [r7, #6]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	8979      	ldrh	r1, [r7, #10]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f890 	bl	8001ca0 <I2C_RequestMemoryWrite>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d052      	beq.n	8001c2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e081      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa36 	bl	8002000 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d107      	bne.n	8001bb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d11b      	bne.n	8001c2c <HAL_I2C_Mem_Write+0x180>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d017      	beq.n	8001c2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1aa      	bne.n	8001b8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fa29 	bl	8002090 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d107      	bne.n	8001c5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e016      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	00100002 	.word	0x00100002
 8001c9c:	ffff0000 	.word	0xffff0000

08001ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	817b      	strh	r3, [r7, #10]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	813b      	strh	r3, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f878 	bl	8001dcc <I2C_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf0:	d103      	bne.n	8001cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e05f      	b.n	8001dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	6a3a      	ldr	r2, [r7, #32]
 8001d12:	492d      	ldr	r1, [pc, #180]	@ (8001dc8 <I2C_RequestMemoryWrite+0x128>)
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f8d3 	bl	8001ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e04c      	b.n	8001dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3c:	6a39      	ldr	r1, [r7, #32]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f95e 	bl	8002000 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00d      	beq.n	8001d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d107      	bne.n	8001d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02b      	b.n	8001dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6c:	893b      	ldrh	r3, [r7, #8]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	e021      	b.n	8001dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d78:	893b      	ldrh	r3, [r7, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	6a39      	ldr	r1, [r7, #32]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f938 	bl	8002000 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d107      	bne.n	8001dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e005      	b.n	8001dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	00010002 	.word	0x00010002

08001dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ddc:	e048      	b.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d044      	beq.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7fe fe3b 	bl	8000a60 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d139      	bne.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10d      	bne.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	e00c      	b.n	8001e3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d116      	bne.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e023      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	e00c      	b.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d093      	beq.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ece:	e071      	b.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ede:	d123      	bne.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f043 0204 	orr.w	r2, r3, #4
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e067      	b.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d041      	beq.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7fe fd96 	bl	8000a60 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d136      	bne.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10c      	bne.n	8001f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e00b      	b.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4013      	ands	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e021      	b.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10c      	bne.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e00b      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f47f af6d 	bne.w	8001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200c:	e034      	b.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f886 	bl	8002120 <I2C_IsAcknowledgeFailed>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e034      	b.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d028      	beq.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002026:	f7fe fd1b 	bl	8000a60 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	d302      	bcc.n	800203c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11d      	bne.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	2b80      	cmp	r3, #128	@ 0x80
 8002048:	d016      	beq.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e007      	b.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002082:	2b80      	cmp	r3, #128	@ 0x80
 8002084:	d1c3      	bne.n	800200e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800209c:	e034      	b.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f83e 	bl	8002120 <I2C_IsAcknowledgeFailed>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e034      	b.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d028      	beq.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b6:	f7fe fcd3 	bl	8000a60 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d302      	bcc.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11d      	bne.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d016      	beq.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e007      	b.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d1c3      	bne.n	800209e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002136:	d11b      	bne.n	8002170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e272      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b92      	ldr	r3, [pc, #584]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4b8f      	ldr	r3, [pc, #572]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
 80021b4:	4b8c      	ldr	r3, [pc, #560]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b89      	ldr	r3, [pc, #548]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x12c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e24c      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x76>
 80021e4:	4b80      	ldr	r3, [pc, #512]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7f      	ldr	r2, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b7b      	ldr	r3, [pc, #492]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7a      	ldr	r2, [pc, #488]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xbc>
 800221e:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a71      	ldr	r2, [pc, #452]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6f      	ldr	r3, [pc, #444]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002238:	4b6b      	ldr	r3, [pc, #428]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6a      	ldr	r2, [pc, #424]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b68      	ldr	r3, [pc, #416]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a67      	ldr	r2, [pc, #412]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fc02 	bl	8000a60 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe fbfe 	bl	8000a60 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e200      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5d      	ldr	r3, [pc, #372]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe4>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fbee 	bl	8000a60 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fbea 	bl	8000a60 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1ec      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x10c>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b4c      	ldr	r3, [pc, #304]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c2:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
 80022ce:	4b46      	ldr	r3, [pc, #280]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1c0      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4939      	ldr	r1, [pc, #228]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <HAL_RCC_OscConfig+0x270>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fba3 	bl	8000a60 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe fb9f 	bl	8000a60 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1a1      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b2a      	ldr	r3, [pc, #168]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4927      	ldr	r1, [pc, #156]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <HAL_RCC_OscConfig+0x270>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fb82 	bl	8000a60 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7fe fb7e 	bl	8000a60 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e180      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03a      	beq.n	8002400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d019      	beq.n	80023c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe fb62 	bl	8000a60 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe fb5e 	bl	8000a60 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e160      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 face 	bl	8002960 <RCC_Delay>
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7fe fb48 	bl	8000a60 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe fb44 	bl	8000a60 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d908      	bls.n	80023f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e146      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	42420000 	.word	0x42420000
 80023f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b92      	ldr	r3, [pc, #584]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e9      	bne.n	80023d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a6 	beq.w	800255a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b8b      	ldr	r3, [pc, #556]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b88      	ldr	r3, [pc, #544]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a87      	ldr	r2, [pc, #540]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b82      	ldr	r3, [pc, #520]	@ (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b7f      	ldr	r3, [pc, #508]	@ (8002644 <HAL_RCC_OscConfig+0x4c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7e      	ldr	r2, [pc, #504]	@ (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe fb05 	bl	8000a60 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7fe fb01 	bl	8000a60 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	@ 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e103      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4b75      	ldr	r3, [pc, #468]	@ (8002644 <HAL_RCC_OscConfig+0x4c8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002480:	4b6f      	ldr	r3, [pc, #444]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a6e      	ldr	r2, [pc, #440]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x334>
 8002496:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a69      	ldr	r2, [pc, #420]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b67      	ldr	r3, [pc, #412]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a66      	ldr	r2, [pc, #408]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x356>
 80024b8:	4b61      	ldr	r3, [pc, #388]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a60      	ldr	r2, [pc, #384]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b58      	ldr	r3, [pc, #352]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a57      	ldr	r2, [pc, #348]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7fe fab5 	bl	8000a60 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fab1 	bl	8000a60 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0b1      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b4b      	ldr	r3, [pc, #300]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x37e>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fe fa9f 	bl	8000a60 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fa9b 	bl	8000a60 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e09b      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b40      	ldr	r3, [pc, #256]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b3c      	ldr	r3, [pc, #240]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a3b      	ldr	r2, [pc, #236]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b36      	ldr	r3, [pc, #216]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d061      	beq.n	8002634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d146      	bne.n	8002606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b33      	ldr	r3, [pc, #204]	@ (8002648 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fa6f 	bl	8000a60 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fa6b 	bl	8000a60 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e06d      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	4b29      	ldr	r3, [pc, #164]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ae:	4b24      	ldr	r3, [pc, #144]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4921      	ldr	r1, [pc, #132]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	430b      	orrs	r3, r1
 80025d2:	491b      	ldr	r1, [pc, #108]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fe fa3f 	bl	8000a60 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fa3b 	bl	8000a60 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
 8002604:	e035      	b.n	8002672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fa28 	bl	8000a60 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fa24 	bl	8000a60 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e026      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x498>
 8002632:	e01e      	b.n	8002672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e019      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_RCC_OscConfig+0x500>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d0      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b6a      	ldr	r3, [pc, #424]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b67      	ldr	r3, [pc, #412]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4965      	ldr	r1, [pc, #404]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d040      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d115      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b41      	ldr	r3, [pc, #260]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e073      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4936      	ldr	r1, [pc, #216]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe f976 	bl	8000a60 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe f972 	bl	8000a60 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e053      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d210      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4922      	ldr	r1, [pc, #136]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	@ (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f8d4 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	08003ad0 	.word	0x08003ad0
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286e:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x30>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x36>
 8002882:	e027      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	e027      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	0c9b      	lsrs	r3, r3, #18
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0c5b      	lsrs	r3, r3, #17
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ae:	5cd3      	ldrb	r3, [r2, r3]
 80028b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028b6:	fb03 f202 	mul.w	r2, r3, r2
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e004      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	e002      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	613b      	str	r3, [r7, #16]
      break;
 80028d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028da:	693b      	ldr	r3, [r7, #16]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	007a1200 	.word	0x007a1200
 80028f0:	08003ae8 	.word	0x08003ae8
 80028f4:	08003af8 	.word	0x08003af8
 80028f8:	003d0900 	.word	0x003d0900

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b02      	ldr	r3, [pc, #8]	@ (800290c <HAL_RCC_GetHCLKFreq+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff2 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08003ae0 	.word	0x08003ae0

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffde 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0adb      	lsrs	r3, r3, #11
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	08003ae0 	.word	0x08003ae0

08002960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002968:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <RCC_Delay+0x34>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <RCC_Delay+0x38>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a5b      	lsrs	r3, r3, #9
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800297c:	bf00      	nop
  }
  while (Delay --);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	60fa      	str	r2, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <RCC_Delay+0x1c>
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000000 	.word	0x20000000
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d07d      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029bc:	4b4f      	ldr	r3, [pc, #316]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b4c      	ldr	r3, [pc, #304]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	61d3      	str	r3, [r2, #28]
 80029d4:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d118      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f0:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a42      	ldr	r2, [pc, #264]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fc:	f7fe f830 	bl	8000a60 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fe f82c 	bl	8000a60 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e06d      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b3a      	ldr	r3, [pc, #232]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a22:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02e      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d027      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a40:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	4b2c      	ldr	r3, [pc, #176]	@ (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a56:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d014      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fd fffb 	bl	8000a60 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fd fff7 	bl	8000a60 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ee      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4917      	ldr	r1, [pc, #92]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	490b      	ldr	r1, [pc, #44]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4904      	ldr	r1, [pc, #16]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42420440 	.word	0x42420440

08002b08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	f200 808a 	bhi.w	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d045      	beq.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d075      	beq.n	8002c2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b3e:	e082      	b.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002b40:	4b46      	ldr	r3, [pc, #280]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b46:	4b45      	ldr	r3, [pc, #276]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07b      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0c9b      	lsrs	r3, r3, #18
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	4a41      	ldr	r2, [pc, #260]	@ (8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d015      	beq.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	0c5b      	lsrs	r3, r3, #17
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	4a3b      	ldr	r2, [pc, #236]	@ (8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b84:	4a38      	ldr	r2, [pc, #224]	@ (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e004      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4a34      	ldr	r2, [pc, #208]	@ (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	61bb      	str	r3, [r7, #24]
      break;
 8002bb2:	e04a      	b.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
      break;
 8002bc2:	e042      	b.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	d108      	bne.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e01f      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c00:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	e00f      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c12:	d11c      	bne.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002c20:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002c24:	61bb      	str	r3, [r7, #24]
      break;
 8002c26:	e012      	b.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c28:	e011      	b.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c2a:	f7ff fe85 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0b9b      	lsrs	r3, r3, #14
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	61bb      	str	r3, [r7, #24]
      break;
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c4e:	bf00      	nop
    }
  }
  return (frequency);
 8002c50:	69bb      	ldr	r3, [r7, #24]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08003afc 	.word	0x08003afc
 8002c64:	08003b0c 	.word	0x08003b0c
 8002c68:	007a1200 	.word	0x007a1200
 8002c6c:	003d0900 	.word	0x003d0900
 8002c70:	aaaaaaab 	.word	0xaaaaaaab

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fdde 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fab2 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e041      	b.n	8002da8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f839 	bl	8002db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 fa63 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_PWM_Start+0x24>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e022      	b.n	8002e2e <HAL_TIM_PWM_Start+0x6a>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d109      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x3e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e015      	b.n	8002e2e <HAL_TIM_PWM_Start+0x6a>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_PWM_Start+0x58>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e008      	b.n	8002e2e <HAL_TIM_PWM_Start+0x6a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e05e      	b.n	8002ef4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x82>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e44:	e013      	b.n	8002e6e <HAL_TIM_PWM_Start+0xaa>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x92>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e54:	e00b      	b.n	8002e6e <HAL_TIM_PWM_Start+0xaa>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xa2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e64:	e003      	b.n	8002e6e <HAL_TIM_PWM_Start+0xaa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fc5c 	bl	8003734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <HAL_TIM_PWM_Start+0x138>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d107      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_TIM_PWM_Start+0x138>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_TIM_PWM_Start+0xfa>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIM_PWM_Start+0xfa>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a14      	ldr	r2, [pc, #80]	@ (8002f00 <HAL_TIM_PWM_Start+0x13c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIM_PWM_Start+0xfa>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_TIM_PWM_Start+0x140>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d111      	bne.n	8002ee2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d010      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	e007      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800

08002f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0ae      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	f200 809f 	bhi.w	8003074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08003075 	.word	0x08003075
 8002f44:	08003075 	.word	0x08003075
 8002f48:	08003075 	.word	0x08003075
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08003075 	.word	0x08003075
 8002f54:	08003075 	.word	0x08003075
 8002f58:	08003075 	.word	0x08003075
 8002f5c:	08002ff3 	.word	0x08002ff3
 8002f60:	08003075 	.word	0x08003075
 8002f64:	08003075 	.word	0x08003075
 8002f68:	08003075 	.word	0x08003075
 8002f6c:	08003033 	.word	0x08003033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f9be 	bl	80032f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	619a      	str	r2, [r3, #24]
      break;
 8002fae:	e064      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa04 	bl	80033c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6999      	ldr	r1, [r3, #24]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	021a      	lsls	r2, r3, #8
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	619a      	str	r2, [r3, #24]
      break;
 8002ff0:	e043      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa4d 	bl	8003498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0208 	orr.w	r2, r2, #8
 800300c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0204 	bic.w	r2, r2, #4
 800301c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69d9      	ldr	r1, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	61da      	str	r2, [r3, #28]
      break;
 8003030:	e023      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa97 	bl	800356c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800304c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800305c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	021a      	lsls	r2, r3, #8
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]
      break;
 8003072:	e002      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
      break;
 8003078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_TIM_ConfigClockSource+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e0b4      	b.n	8003212 <HAL_TIM_ConfigClockSource+0x186>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e0:	d03e      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0xd4>
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e6:	f200 8087 	bhi.w	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	f000 8086 	beq.w	80031fe <HAL_TIM_ConfigClockSource+0x172>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f6:	d87f      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b70      	cmp	r3, #112	@ 0x70
 80030fa:	d01a      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xa6>
 80030fc:	2b70      	cmp	r3, #112	@ 0x70
 80030fe:	d87b      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b60      	cmp	r3, #96	@ 0x60
 8003102:	d050      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003104:	2b60      	cmp	r3, #96	@ 0x60
 8003106:	d877      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b50      	cmp	r3, #80	@ 0x50
 800310a:	d03c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0xfa>
 800310c:	2b50      	cmp	r3, #80	@ 0x50
 800310e:	d873      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d058      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	d86f      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b30      	cmp	r3, #48	@ 0x30
 800311a:	d064      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	2b30      	cmp	r3, #48	@ 0x30
 800311e:	d86b      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d060      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d867      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05c      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	2b10      	cmp	r3, #16
 800312e:	d05a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	e062      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	f000 fad8 	bl	80036f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]
      break;
 800315e:	e04f      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	f000 fac1 	bl	80036f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003182:	609a      	str	r2, [r3, #8]
      break;
 8003184:	e03c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	f000 fa38 	bl	8003608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2150      	movs	r1, #80	@ 0x50
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa8f 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80031a4:	e02c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 fa56 	bl	8003664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2160      	movs	r1, #96	@ 0x60
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fa7f 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80031c4:	e01c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 fa18 	bl	8003608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2140      	movs	r1, #64	@ 0x40
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa6f 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80031e4:	e00c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f000 fa66 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80031f6:	e003      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      break;
 80031fc:	e000      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a2f      	ldr	r2, [pc, #188]	@ (80032ec <TIM_Base_SetConfig+0xd0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a2c      	ldr	r2, [pc, #176]	@ (80032f0 <TIM_Base_SetConfig+0xd4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <TIM_Base_SetConfig+0xd8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <TIM_Base_SetConfig+0xd0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <TIM_Base_SetConfig+0xd4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <TIM_Base_SetConfig+0xd8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0d      	ldr	r2, [pc, #52]	@ (80032ec <TIM_Base_SetConfig+0xd0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]
  }
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 0201 	bic.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0302 	bic.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <TIM_OC1_SetConfig+0xc8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10c      	bne.n	800336e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0308 	bic.w	r3, r3, #8
 800335a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <TIM_OC1_SetConfig+0xc8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d111      	bne.n	800339a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800337c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00

080033c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 0210 	bic.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0320 	bic.w	r3, r3, #32
 800340e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <TIM_OC2_SetConfig+0xd0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10d      	bne.n	8003440 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800342a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a14      	ldr	r2, [pc, #80]	@ (8003494 <TIM_OC2_SetConfig+0xd0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d113      	bne.n	8003470 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800344e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00

08003498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <TIM_OC3_SetConfig+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10d      	bne.n	8003512 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a14      	ldr	r2, [pc, #80]	@ (8003568 <TIM_OC3_SetConfig+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d113      	bne.n	8003542 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00

0800356c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	031b      	lsls	r3, r3, #12
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003604 <TIM_OC4_SetConfig+0x98>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d109      	bne.n	80035e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40012c00 	.word	0x40012c00

08003608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 030a 	bic.w	r3, r3, #10
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0210 	bic.w	r2, r3, #16
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	031b      	lsls	r3, r3, #12
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	621a      	str	r2, [r3, #32]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f043 0307 	orr.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003710:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	021a      	lsls	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	431a      	orrs	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4313      	orrs	r3, r2
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	609a      	str	r2, [r3, #8]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2201      	movs	r2, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_TIMEx_PWMN_Start+0x24>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e022      	b.n	80037e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d109      	bne.n	80037ba <HAL_TIMEx_PWMN_Start+0x3e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	bf14      	ite	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	2300      	moveq	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	e015      	b.n	80037e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d109      	bne.n	80037d4 <HAL_TIMEx_PWMN_Start+0x58>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e008      	b.n	80037e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e059      	b.n	80038a2 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_TIMEx_PWMN_Start+0x82>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037fc:	e013      	b.n	8003826 <HAL_TIMEx_PWMN_Start+0xaa>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d104      	bne.n	800380e <HAL_TIMEx_PWMN_Start+0x92>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800380c:	e00b      	b.n	8003826 <HAL_TIMEx_PWMN_Start+0xaa>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d104      	bne.n	800381e <HAL_TIMEx_PWMN_Start+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800381c:	e003      	b.n	8003826 <HAL_TIMEx_PWMN_Start+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2204      	movs	r2, #4
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f8f1 	bl	8003a16 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_TIMEx_PWMN_Start+0x130>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_TIMEx_PWMN_Start+0xf0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003856:	d009      	beq.n	800386c <HAL_TIMEx_PWMN_Start+0xf0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <HAL_TIMEx_PWMN_Start+0x134>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_TIMEx_PWMN_Start+0xf0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a13      	ldr	r2, [pc, #76]	@ (80038b4 <HAL_TIMEx_PWMN_Start+0x138>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d111      	bne.n	8003890 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b06      	cmp	r3, #6
 800387c:	d010      	beq.n	80038a0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	e007      	b.n	80038a0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800

080038b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e046      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a12      	ldr	r2, [pc, #72]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800

08003974 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800398c:	2302      	movs	r3, #2
 800398e:	e03d      	b.n	8003a0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	2204      	movs	r2, #4
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	401a      	ands	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <memset>:
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4402      	add	r2, r0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d100      	bne.n	8003a68 <memset+0xa>
 8003a66:	4770      	bx	lr
 8003a68:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6c:	e7f9      	b.n	8003a62 <memset+0x4>
	...

08003a70 <__libc_init_array>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	2600      	movs	r6, #0
 8003a74:	4d0c      	ldr	r5, [pc, #48]	@ (8003aa8 <__libc_init_array+0x38>)
 8003a76:	4c0d      	ldr	r4, [pc, #52]	@ (8003aac <__libc_init_array+0x3c>)
 8003a78:	1b64      	subs	r4, r4, r5
 8003a7a:	10a4      	asrs	r4, r4, #2
 8003a7c:	42a6      	cmp	r6, r4
 8003a7e:	d109      	bne.n	8003a94 <__libc_init_array+0x24>
 8003a80:	f000 f81a 	bl	8003ab8 <_init>
 8003a84:	2600      	movs	r6, #0
 8003a86:	4d0a      	ldr	r5, [pc, #40]	@ (8003ab0 <__libc_init_array+0x40>)
 8003a88:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab4 <__libc_init_array+0x44>)
 8003a8a:	1b64      	subs	r4, r4, r5
 8003a8c:	10a4      	asrs	r4, r4, #2
 8003a8e:	42a6      	cmp	r6, r4
 8003a90:	d105      	bne.n	8003a9e <__libc_init_array+0x2e>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a98:	4798      	blx	r3
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7ee      	b.n	8003a7c <__libc_init_array+0xc>
 8003a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa2:	4798      	blx	r3
 8003aa4:	3601      	adds	r6, #1
 8003aa6:	e7f2      	b.n	8003a8e <__libc_init_array+0x1e>
 8003aa8:	08003b10 	.word	0x08003b10
 8003aac:	08003b10 	.word	0x08003b10
 8003ab0:	08003b10 	.word	0x08003b10
 8003ab4:	08003b14 	.word	0x08003b14

08003ab8 <_init>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr

08003ac4 <_fini>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr
