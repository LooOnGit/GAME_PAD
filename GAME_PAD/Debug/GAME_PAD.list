
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009f10  08009f10  0000af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  0000b134  2**0
                  CONTENTS
  4 .ARM          00000000  08009f98  08009f98  0000b134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f98  08009f98  0000b134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f9c  08009f9c  0000af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  08009fa0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000134  0800a0d4  0000b134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  0800a0d4  0000bb04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e94  00000000  00000000  0000b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c8  00000000  00000000  0001fff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000235c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  000249b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae7c  00000000  00000000  00025907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019409  00000000  00000000  00040783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094141  00000000  00000000  00059b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000edd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f3004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ef8 	.word	0x08009ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	08009ef8 	.word	0x08009ef8

0800014c <HAL_GPIO_EXTI_Callback>:
uint32_t HC165_DT;
uint8_t click_report[REPORT_SIZE] = {0};


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin==GPIO_PIN_4){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b10      	cmp	r3, #16
 800015a:	d102      	bne.n	8000162 <HAL_GPIO_EXTI_Callback+0x16>
	  ButtonPoten2 = 1;
 800015c:	4b06      	ldr	r3, [pc, #24]	@ (8000178 <HAL_GPIO_EXTI_Callback+0x2c>)
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin==GPIO_PIN_5){
 8000162:	88fb      	ldrh	r3, [r7, #6]
 8000164:	2b20      	cmp	r3, #32
 8000166:	d102      	bne.n	800016e <HAL_GPIO_EXTI_Callback+0x22>
	  ButtonPoten1 = 1;
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <HAL_GPIO_EXTI_Callback+0x30>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
  }

}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000034a 	.word	0x2000034a
 800017c:	20000340 	.word	0x20000340

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 ff15 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f9bf 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 fc19 	bl	80009c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000192:	f000 fa19 	bl	80005c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000196:	f000 fa55 	bl	8000644 <MX_ADC2_Init>
  MX_TIM1_Init();
 800019a:	f000 fabf 	bl	800071c <MX_TIM1_Init>
  MX_TIM2_Init();
 800019e:	f000 fb15 	bl	80007cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80001a2:	f000 fb67 	bl	8000874 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80001a6:	f009 fac3 	bl	8009730 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001aa:	f000 fbb7 	bl	800091c <MX_TIM4_Init>
  MX_I2C2_Init();
 80001ae:	f000 fa87 	bl	80006c0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MCP23017_Init(&hi2c2);
 80001b2:	4895      	ldr	r0, [pc, #596]	@ (8000408 <main+0x288>)
 80001b4:	f007 ff7d 	bl	80080b2 <MCP23017_Init>
  MCP23017_EnablePullUps(&hi2c2);
 80001b8:	4893      	ldr	r0, [pc, #588]	@ (8000408 <main+0x288>)
 80001ba:	f007 ffe8 	bl	800818e <MCP23017_EnablePullUps>

//  mode digital
  TLC59116_Init(&hi2c2);
 80001be:	4892      	ldr	r0, [pc, #584]	@ (8000408 <main+0x288>)
 80001c0:	f007 fff7 	bl	80081b2 <TLC59116_Init>

  //mode pwm
  TLC59116_Set_All_PWM_Mode(&hi2c2);
 80001c4:	4890      	ldr	r0, [pc, #576]	@ (8000408 <main+0x288>)
 80001c6:	f008 f81c 	bl	8008202 <TLC59116_Set_All_PWM_Mode>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001ca:	2104      	movs	r1, #4
 80001cc:	488f      	ldr	r0, [pc, #572]	@ (800040c <main+0x28c>)
 80001ce:	f005 fa5d 	bl	800568c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001d2:	2104      	movs	r1, #4
 80001d4:	488e      	ldr	r0, [pc, #568]	@ (8000410 <main+0x290>)
 80001d6:	f005 fa59 	bl	800568c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001da:	2104      	movs	r1, #4
 80001dc:	488d      	ldr	r0, [pc, #564]	@ (8000414 <main+0x294>)
 80001de:	f005 fa55 	bl	800568c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	488c      	ldr	r0, [pc, #560]	@ (8000418 <main+0x298>)
 80001e6:	f005 fa51 	bl	800568c <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//read pot
	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim1);
 80001ea:	4b88      	ldr	r3, [pc, #544]	@ (800040c <main+0x28c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	4b8a      	ldr	r3, [pc, #552]	@ (800041c <main+0x29c>)
 80001f4:	801a      	strh	r2, [r3, #0]
	pulsePre2 = __HAL_TIM_GET_COUNTER(&htim2);
 80001f6:	4b86      	ldr	r3, [pc, #536]	@ (8000410 <main+0x290>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001fc:	b21a      	sxth	r2, r3
 80001fe:	4b88      	ldr	r3, [pc, #544]	@ (8000420 <main+0x2a0>)
 8000200:	801a      	strh	r2, [r3, #0]
	pulsePre3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000202:	4b84      	ldr	r3, [pc, #528]	@ (8000414 <main+0x294>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000208:	b21a      	sxth	r2, r3
 800020a:	4b86      	ldr	r3, [pc, #536]	@ (8000424 <main+0x2a4>)
 800020c:	801a      	strh	r2, [r3, #0]
	pulsePre4 = __HAL_TIM_GET_COUNTER(&htim4);
 800020e:	4b82      	ldr	r3, [pc, #520]	@ (8000418 <main+0x298>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000214:	b21a      	sxth	r2, r3
 8000216:	4b84      	ldr	r3, [pc, #528]	@ (8000428 <main+0x2a8>)
 8000218:	801a      	strh	r2, [r3, #0]
//
//	//	  read button
	portA = ~MCP23017_Read_GPIOA(&hi2c2);
 800021a:	487b      	ldr	r0, [pc, #492]	@ (8000408 <main+0x288>)
 800021c:	f007 ff6f 	bl	80080fe <MCP23017_Read_GPIOA>
 8000220:	4603      	mov	r3, r0
 8000222:	43db      	mvns	r3, r3
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b81      	ldr	r3, [pc, #516]	@ (800042c <main+0x2ac>)
 8000228:	701a      	strb	r2, [r3, #0]
	portB = ~MCP23017_Read_GPIOB(&hi2c2);
 800022a:	4877      	ldr	r0, [pc, #476]	@ (8000408 <main+0x288>)
 800022c:	f007 ff7e 	bl	800812c <MCP23017_Read_GPIOB>
 8000230:	4603      	mov	r3, r0
 8000232:	43db      	mvns	r3, r3
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b7e      	ldr	r3, [pc, #504]	@ (8000430 <main+0x2b0>)
 8000238:	701a      	strb	r2, [r3, #0]
	portA = 0;
 800023a:	4b7c      	ldr	r3, [pc, #496]	@ (800042c <main+0x2ac>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	portB = 0;
 8000240:	4b7b      	ldr	r3, [pc, #492]	@ (8000430 <main+0x2b0>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]

	//set status button buffer HID
	keyboardhid.Keycode0 = portA;
 8000246:	4b79      	ldr	r3, [pc, #484]	@ (800042c <main+0x2ac>)
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	4b7a      	ldr	r3, [pc, #488]	@ (8000434 <main+0x2b4>)
 800024c:	701a      	strb	r2, [r3, #0]
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x08;//button4
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x10;//button5
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x20;//button6
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x40;//button7
//	keyboardhid.Keycode6 = keyboardhid.Keycode6 | 0x80;//button8
	keyboardhid.Keycode1 = portB;
 800024e:	4b78      	ldr	r3, [pc, #480]	@ (8000430 <main+0x2b0>)
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b78      	ldr	r3, [pc, #480]	@ (8000434 <main+0x2b4>)
 8000254:	705a      	strb	r2, [r3, #1]
	//set cursor status buffer HID
//	keyboardhid.Keycode0 = pulse1*50;
//	keyboardhid.Keycode1 = pulse2*50;

	//button on poten 1
	if(pulsePre1 > pulseOld1){
 8000256:	4b71      	ldr	r3, [pc, #452]	@ (800041c <main+0x29c>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	b21a      	sxth	r2, r3
 800025c:	4b76      	ldr	r3, [pc, #472]	@ (8000438 <main+0x2b8>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b21b      	sxth	r3, r3
 8000262:	429a      	cmp	r2, r3
 8000264:	dd0b      	ble.n	800027e <main+0xfe>
		pulseOld1 = pulsePre1;
 8000266:	4b6d      	ldr	r3, [pc, #436]	@ (800041c <main+0x29c>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	b21a      	sxth	r2, r3
 800026c:	4b72      	ldr	r3, [pc, #456]	@ (8000438 <main+0x2b8>)
 800026e:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode1 = keyboardhid.Keycode1 | 0x40;
 8000270:	4b70      	ldr	r3, [pc, #448]	@ (8000434 <main+0x2b4>)
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b6e      	ldr	r3, [pc, #440]	@ (8000434 <main+0x2b4>)
 800027c:	705a      	strb	r2, [r3, #1]
	}

	if(pulsePre1 < pulseOld1){
 800027e:	4b67      	ldr	r3, [pc, #412]	@ (800041c <main+0x29c>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b21a      	sxth	r2, r3
 8000284:	4b6c      	ldr	r3, [pc, #432]	@ (8000438 <main+0x2b8>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b21b      	sxth	r3, r3
 800028a:	429a      	cmp	r2, r3
 800028c:	da0b      	bge.n	80002a6 <main+0x126>
		pulseOld1 = pulsePre1;
 800028e:	4b63      	ldr	r3, [pc, #396]	@ (800041c <main+0x29c>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b21a      	sxth	r2, r3
 8000294:	4b68      	ldr	r3, [pc, #416]	@ (8000438 <main+0x2b8>)
 8000296:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode1 = keyboardhid.Keycode1 | 0x80;
 8000298:	4b66      	ldr	r3, [pc, #408]	@ (8000434 <main+0x2b4>)
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b64      	ldr	r3, [pc, #400]	@ (8000434 <main+0x2b4>)
 80002a4:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonPoten1  == 1){
 80002a6:	4b65      	ldr	r3, [pc, #404]	@ (800043c <main+0x2bc>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d109      	bne.n	80002c4 <main+0x144>
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x01;
 80002b0:	4b60      	ldr	r3, [pc, #384]	@ (8000434 <main+0x2b4>)
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000434 <main+0x2b4>)
 80002bc:	709a      	strb	r2, [r3, #2]
		ButtonPoten1 = 0;
 80002be:	4b5f      	ldr	r3, [pc, #380]	@ (800043c <main+0x2bc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
	}

	if(pulsePre3 > pulseOld3){
 80002c4:	4b57      	ldr	r3, [pc, #348]	@ (8000424 <main+0x2a4>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	b21a      	sxth	r2, r3
 80002ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000440 <main+0x2c0>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dd0b      	ble.n	80002ec <main+0x16c>
		pulseOld3 = pulsePre3;
 80002d4:	4b53      	ldr	r3, [pc, #332]	@ (8000424 <main+0x2a4>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	b21a      	sxth	r2, r3
 80002da:	4b59      	ldr	r3, [pc, #356]	@ (8000440 <main+0x2c0>)
 80002dc:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x02;
 80002de:	4b55      	ldr	r3, [pc, #340]	@ (8000434 <main+0x2b4>)
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b52      	ldr	r3, [pc, #328]	@ (8000434 <main+0x2b4>)
 80002ea:	709a      	strb	r2, [r3, #2]
	}

	if(pulsePre3 < pulseOld3){
 80002ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000424 <main+0x2a4>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b21a      	sxth	r2, r3
 80002f2:	4b53      	ldr	r3, [pc, #332]	@ (8000440 <main+0x2c0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	429a      	cmp	r2, r3
 80002fa:	da0b      	bge.n	8000314 <main+0x194>
		pulseOld3 = pulsePre3;
 80002fc:	4b49      	ldr	r3, [pc, #292]	@ (8000424 <main+0x2a4>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b21a      	sxth	r2, r3
 8000302:	4b4f      	ldr	r3, [pc, #316]	@ (8000440 <main+0x2c0>)
 8000304:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x04;
 8000306:	4b4b      	ldr	r3, [pc, #300]	@ (8000434 <main+0x2b4>)
 8000308:	789b      	ldrb	r3, [r3, #2]
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b48      	ldr	r3, [pc, #288]	@ (8000434 <main+0x2b4>)
 8000312:	709a      	strb	r2, [r3, #2]
	}

	//button on poten 2
	if(pulsePre2 > pulseOld2){
 8000314:	4b42      	ldr	r3, [pc, #264]	@ (8000420 <main+0x2a0>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	b21a      	sxth	r2, r3
 800031a:	4b4a      	ldr	r3, [pc, #296]	@ (8000444 <main+0x2c4>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	b21b      	sxth	r3, r3
 8000320:	429a      	cmp	r2, r3
 8000322:	dd0b      	ble.n	800033c <main+0x1bc>
		pulseOld2 = pulsePre2;
 8000324:	4b3e      	ldr	r3, [pc, #248]	@ (8000420 <main+0x2a0>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	b21a      	sxth	r2, r3
 800032a:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <main+0x2c4>)
 800032c:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x08;
 800032e:	4b41      	ldr	r3, [pc, #260]	@ (8000434 <main+0x2b4>)
 8000330:	789b      	ldrb	r3, [r3, #2]
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b3e      	ldr	r3, [pc, #248]	@ (8000434 <main+0x2b4>)
 800033a:	709a      	strb	r2, [r3, #2]
	}
	if(pulsePre2 < pulseOld2){
 800033c:	4b38      	ldr	r3, [pc, #224]	@ (8000420 <main+0x2a0>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b21a      	sxth	r2, r3
 8000342:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <main+0x2c4>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	b21b      	sxth	r3, r3
 8000348:	429a      	cmp	r2, r3
 800034a:	da0b      	bge.n	8000364 <main+0x1e4>
		pulseOld2 = pulsePre2;
 800034c:	4b34      	ldr	r3, [pc, #208]	@ (8000420 <main+0x2a0>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	b21a      	sxth	r2, r3
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <main+0x2c4>)
 8000354:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x10;
 8000356:	4b37      	ldr	r3, [pc, #220]	@ (8000434 <main+0x2b4>)
 8000358:	789b      	ldrb	r3, [r3, #2]
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b34      	ldr	r3, [pc, #208]	@ (8000434 <main+0x2b4>)
 8000362:	709a      	strb	r2, [r3, #2]
	}

	if(ButtonPoten2  == 1){
 8000364:	4b38      	ldr	r3, [pc, #224]	@ (8000448 <main+0x2c8>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b01      	cmp	r3, #1
 800036c:	d109      	bne.n	8000382 <main+0x202>
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x20;
 800036e:	4b31      	ldr	r3, [pc, #196]	@ (8000434 <main+0x2b4>)
 8000370:	789b      	ldrb	r3, [r3, #2]
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b2e      	ldr	r3, [pc, #184]	@ (8000434 <main+0x2b4>)
 800037a:	709a      	strb	r2, [r3, #2]
		ButtonPoten2 = 0;
 800037c:	4b32      	ldr	r3, [pc, #200]	@ (8000448 <main+0x2c8>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
	}

	if(pulsePre4 > pulseOld4){
 8000382:	4b29      	ldr	r3, [pc, #164]	@ (8000428 <main+0x2a8>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	b21a      	sxth	r2, r3
 8000388:	4b30      	ldr	r3, [pc, #192]	@ (800044c <main+0x2cc>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b21b      	sxth	r3, r3
 800038e:	429a      	cmp	r2, r3
 8000390:	dd0b      	ble.n	80003aa <main+0x22a>
		pulseOld4 = pulsePre4;
 8000392:	4b25      	ldr	r3, [pc, #148]	@ (8000428 <main+0x2a8>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	b21a      	sxth	r2, r3
 8000398:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <main+0x2cc>)
 800039a:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x40;
 800039c:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <main+0x2b4>)
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b23      	ldr	r3, [pc, #140]	@ (8000434 <main+0x2b4>)
 80003a8:	709a      	strb	r2, [r3, #2]
	}
	if(pulsePre4 < pulseOld4){
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <main+0x2a8>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	b21a      	sxth	r2, r3
 80003b0:	4b26      	ldr	r3, [pc, #152]	@ (800044c <main+0x2cc>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	429a      	cmp	r2, r3
 80003b8:	da0b      	bge.n	80003d2 <main+0x252>
		pulseOld4 = pulsePre4;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <main+0x2a8>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	b21a      	sxth	r2, r3
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <main+0x2cc>)
 80003c2:	801a      	strh	r2, [r3, #0]
		keyboardhid.Keycode2 = keyboardhid.Keycode2 | 0x80;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <main+0x2b4>)
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b19      	ldr	r3, [pc, #100]	@ (8000434 <main+0x2b4>)
 80003d0:	709a      	strb	r2, [r3, #2]
//
//	//button on poten 1
//	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim2);
//	pulsePre2 = __HAL_TIM_GET_COUNTER(&htim3);
//
	USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80003d2:	2203      	movs	r2, #3
 80003d4:	4917      	ldr	r1, [pc, #92]	@ (8000434 <main+0x2b4>)
 80003d6:	481e      	ldr	r0, [pc, #120]	@ (8000450 <main+0x2d0>)
 80003d8:	f008 f8be 	bl	8008558 <USBD_HID_SendReport>
//	EnAPoten1 = 0;
//	EnBPoten1 = 0;
//	EnAPoten2 = 0;
//	EnBPoten2 = 0;
	HAL_Delay(10);
 80003dc:	200a      	movs	r0, #10
 80003de:	f000 fe4b 	bl	8001078 <HAL_Delay>
//
//	//reset status button on poten
	keyboardhid.Keycode2 = keyboardhid.Keycode2 & 0x00;
 80003e2:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <main+0x2b4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	709a      	strb	r2, [r3, #2]
//
//
////	//control led follow PWM
    HAL_ADC_Start(&hadc1);
 80003e8:	481a      	ldr	r0, [pc, #104]	@ (8000454 <main+0x2d4>)
 80003ea:	f000 ff41 	bl	8001270 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80003ee:	2164      	movs	r1, #100	@ 0x64
 80003f0:	4818      	ldr	r0, [pc, #96]	@ (8000454 <main+0x2d4>)
 80003f2:	f001 f817 	bl	8001424 <HAL_ADC_PollForConversion>
    ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80003f6:	4817      	ldr	r0, [pc, #92]	@ (8000454 <main+0x2d4>)
 80003f8:	f001 f91a 	bl	8001630 <HAL_ADC_GetValue>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <main+0x2d8>)
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	e02a      	b.n	800045c <main+0x2dc>
 8000406:	bf00      	nop
 8000408:	200001b4 	.word	0x200001b4
 800040c:	20000208 	.word	0x20000208
 8000410:	20000250 	.word	0x20000250
 8000414:	20000298 	.word	0x20000298
 8000418:	200002e0 	.word	0x200002e0
 800041c:	2000033a 	.word	0x2000033a
 8000420:	20000344 	.word	0x20000344
 8000424:	2000033e 	.word	0x2000033e
 8000428:	20000348 	.word	0x20000348
 800042c:	20000328 	.word	0x20000328
 8000430:	20000329 	.word	0x20000329
 8000434:	20000150 	.word	0x20000150
 8000438:	20000338 	.word	0x20000338
 800043c:	20000340 	.word	0x20000340
 8000440:	2000033c 	.word	0x2000033c
 8000444:	20000342 	.word	0x20000342
 8000448:	2000034a 	.word	0x2000034a
 800044c:	20000346 	.word	0x20000346
 8000450:	20000354 	.word	0x20000354
 8000454:	20000154 	.word	0x20000154
 8000458:	2000032c 	.word	0x2000032c
    HAL_ADC_Stop(&hadc1);
 800045c:	4823      	ldr	r0, [pc, #140]	@ (80004ec <main+0x36c>)
 800045e:	f000 ffb5 	bl	80013cc <HAL_ADC_Stop>
    value_ledPWM = (ADC_VAL * 255)/4095;
 8000462:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <main+0x370>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4613      	mov	r3, r2
 8000468:	021b      	lsls	r3, r3, #8
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <main+0x374>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	441a      	add	r2, r3
 8000474:	12d2      	asrs	r2, r2, #11
 8000476:	17db      	asrs	r3, r3, #31
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	4a1f      	ldr	r2, [pc, #124]	@ (80004f8 <main+0x378>)
 800047c:	6013      	str	r3, [r2, #0]
	for(uint8_t j = 0; j < 14; j++){
 800047e:	2300      	movs	r3, #0
 8000480:	71fb      	strb	r3, [r7, #7]
 8000482:	e00a      	b.n	800049a <main+0x31a>
		TLC59116_Set_PWM(&hi2c2, j, value_ledPWM); // Tăng độ sáng OUT0
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <main+0x378>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4619      	mov	r1, r3
 800048e:	481b      	ldr	r0, [pc, #108]	@ (80004fc <main+0x37c>)
 8000490:	f007 fefa 	bl	8008288 <TLC59116_Set_PWM>
	for(uint8_t j = 0; j < 14; j++){
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	3301      	adds	r3, #1
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	2b0d      	cmp	r3, #13
 800049e:	d9f1      	bls.n	8000484 <main+0x304>
	}
//
////	//control lcd light
	HAL_ADC_Start(&hadc2);
 80004a0:	4817      	ldr	r0, [pc, #92]	@ (8000500 <main+0x380>)
 80004a2:	f000 fee5 	bl	8001270 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80004a6:	2164      	movs	r1, #100	@ 0x64
 80004a8:	4815      	ldr	r0, [pc, #84]	@ (8000500 <main+0x380>)
 80004aa:	f000 ffbb 	bl	8001424 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 80004ae:	4814      	ldr	r0, [pc, #80]	@ (8000500 <main+0x380>)
 80004b0:	f001 f8be 	bl	8001630 <HAL_ADC_GetValue>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <main+0x370>)
 80004ba:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80004bc:	4810      	ldr	r0, [pc, #64]	@ (8000500 <main+0x380>)
 80004be:	f000 ff85 	bl	80013cc <HAL_ADC_Stop>
	value_lcdPWM = (ADC_VAL * 800)/4096;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <main+0x370>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	da01      	bge.n	80004d6 <main+0x356>
 80004d2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004d6:	131b      	asrs	r3, r3, #12
 80004d8:	461a      	mov	r2, r3
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <main+0x384>)
 80004dc:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_lcdPWM);
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <main+0x384>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <main+0x388>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	639a      	str	r2, [r3, #56]	@ 0x38
	pulsePre1 = __HAL_TIM_GET_COUNTER(&htim1);
 80004e8:	e67f      	b.n	80001ea <main+0x6a>
 80004ea:	bf00      	nop
 80004ec:	20000154 	.word	0x20000154
 80004f0:	2000032c 	.word	0x2000032c
 80004f4:	80080081 	.word	0x80080081
 80004f8:	20000330 	.word	0x20000330
 80004fc:	200001b4 	.word	0x200001b4
 8000500:	20000184 	.word	0x20000184
 8000504:	20000334 	.word	0x20000334
 8000508:	20000208 	.word	0x20000208

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	@ 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000516:	2228      	movs	r2, #40	@ 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f009 fcc0 	bl	8009ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000558:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800055c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fa74 	bl	8004a50 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800056e:	f000 facb 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000582:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fce0 	bl	8004f54 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800059a:	f000 fab5 	bl	8000b08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800059e:	2312      	movs	r3, #18
 80005a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fe5e 	bl	8005270 <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ba:	f000 faa5 	bl	8000b08 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_ADC1_Init+0x74>)
 80005da:	4a19      	ldr	r2, [pc, #100]	@ (8000640 <MX_ADC1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_ADC1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_ADC1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC1_Init+0x74>)
 80005f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_ADC1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_ADC1_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_ADC1_Init+0x74>)
 8000606:	f000 fd5b 	bl	80010c0 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fa7a 	bl	8000b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800061c:	2307      	movs	r3, #7
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_ADC1_Init+0x74>)
 8000626:	f001 f80f 	bl	8001648 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000630:	f000 fa6a 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000154 	.word	0x20000154
 8000640:	40012400 	.word	0x40012400

08000644 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_ADC2_Init+0x74>)
 8000656:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <MX_ADC2_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_ADC2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_ADC2_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_ADC2_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_ADC2_Init+0x74>)
 800066e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000672:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_ADC2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_ADC2_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <MX_ADC2_Init+0x74>)
 8000682:	f000 fd1d 	bl	80010c0 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 fa3c 	bl	8000b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000690:	2301      	movs	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000698:	2307      	movs	r3, #7
 800069a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_ADC2_Init+0x74>)
 80006a2:	f000 ffd1 	bl	8001648 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80006ac:	f000 fa2c 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000184 	.word	0x20000184
 80006bc:	40012800 	.word	0x40012800

080006c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <MX_I2C2_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_I2C2_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_I2C2_Init+0x50>)
 80006fe:	f001 fbf9 	bl	8001ef4 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f9fe 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200001b4 	.word	0x200001b4
 8000714:	40005800 	.word	0x40005800
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2224      	movs	r2, #36	@ 0x24
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f009 fbb8 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 800073a:	4a23      	ldr	r2, [pc, #140]	@ (80007c8 <MX_TIM1_Init+0xac>)
 800073c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 800074c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000758:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000764:	2303      	movs	r3, #3
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800077c:	2301      	movs	r3, #1
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 8000790:	f004 feda 	bl	8005548 <HAL_TIM_Encoder_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800079a:	f000 f9b5 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_TIM1_Init+0xa8>)
 80007ac:	f005 f88e 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007b6:	f000 f9a7 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	@ 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000208 	.word	0x20000208
 80007c8:	40012c00 	.word	0x40012c00

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2224      	movs	r2, #36	@ 0x24
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fb60 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_TIM2_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000810:	2303      	movs	r3, #3
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_TIM2_Init+0xa4>)
 800083c:	f004 fe84 	bl	8005548 <HAL_TIM_Encoder_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000846:	f000 f95f 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM2_Init+0xa4>)
 8000858:	f005 f838 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000862:	f000 f951 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	@ 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000250 	.word	0x20000250

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2224      	movs	r2, #36	@ 0x24
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f009 fb0c 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_TIM3_Init+0xa0>)
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <MX_TIM3_Init+0xa4>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_TIM3_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_TIM3_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_TIM3_Init+0xa0>)
 80008a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_TIM3_Init+0xa0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_TIM3_Init+0xa0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008b6:	2303      	movs	r3, #3
 80008b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ce:	2301      	movs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_TIM3_Init+0xa0>)
 80008e2:	f004 fe31 	bl	8005548 <HAL_TIM_Encoder_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f90c 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_TIM3_Init+0xa0>)
 80008fe:	f004 ffe5 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 f8fe 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	@ 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000298 	.word	0x20000298
 8000918:	40000400 	.word	0x40000400

0800091c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2224      	movs	r2, #36	@ 0x24
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f009 fab8 	bl	8009ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_TIM4_Init+0xa0>)
 800093a:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <MX_TIM4_Init+0xa4>)
 800093c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_TIM4_Init+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_TIM4_Init+0xa0>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_TIM4_Init+0xa0>)
 800094c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000950:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_TIM4_Init+0xa0>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_TIM4_Init+0xa0>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800095e:	2303      	movs	r3, #3
 8000960:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_TIM4_Init+0xa0>)
 800098a:	f004 fddd 	bl	8005548 <HAL_TIM_Encoder_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f8b8 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM4_Init+0xa0>)
 80009a6:	f004 ff91 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 f8aa 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	@ 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002e0 	.word	0x200002e0
 80009c0:	40000800 	.word	0x40000800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b46      	ldr	r3, [pc, #280]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a45      	ldr	r2, [pc, #276]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b43      	ldr	r3, [pc, #268]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b40      	ldr	r3, [pc, #256]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a3f      	ldr	r2, [pc, #252]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <MX_GPIO_Init+0x130>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b3a      	ldr	r3, [pc, #232]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a39      	ldr	r2, [pc, #228]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b37      	ldr	r3, [pc, #220]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b34      	ldr	r3, [pc, #208]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a33      	ldr	r2, [pc, #204]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b31      	ldr	r3, [pc, #196]	@ (8000af4 <MX_GPIO_Init+0x130>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	482e      	ldr	r0, [pc, #184]	@ (8000af8 <MX_GPIO_Init+0x134>)
 8000a3e:	f001 fa29 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a42:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_GPIO_Init+0x138>)
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	482a      	ldr	r0, [pc, #168]	@ (8000b00 <MX_GPIO_Init+0x13c>)
 8000a58:	f001 f898 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a5c:	2328      	movs	r3, #40	@ 0x28
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_GPIO_Init+0x138>)
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <MX_GPIO_Init+0x140>)
 8000a70:	f001 f88c 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a74:	2302      	movs	r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481b      	ldr	r0, [pc, #108]	@ (8000af8 <MX_GPIO_Init+0x134>)
 8000a8c:	f001 f87e 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4;
 8000a90:	f241 0310 	movw	r3, #4112	@ 0x1010
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_GPIO_Init+0x138>)
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	@ (8000af8 <MX_GPIO_Init+0x134>)
 8000aa6:	f001 f871 	bl	8001b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2009      	movs	r0, #9
 8000ab0:	f001 f835 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ab4:	2009      	movs	r0, #9
 8000ab6:	f001 f84e 	bl	8001b56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f001 f82d 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f001 f846 	bl	8001b56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	2017      	movs	r0, #23
 8000ad0:	f001 f825 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad4:	2017      	movs	r0, #23
 8000ad6:	f001 f83e 	bl	8001b56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	2028      	movs	r0, #40	@ 0x28
 8000ae0:	f001 f81d 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae4:	2028      	movs	r0, #40	@ 0x28
 8000ae6:	f001 f836 	bl	8001b56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	10110000 	.word	0x10110000
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40010800 	.word	0x40010800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_MspInit+0x60>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_MspInit+0x60>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a28      	ldr	r2, [pc, #160]	@ (8000c34 <HAL_ADC_MspInit+0xbc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d122      	bne.n	8000bde <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4819      	ldr	r0, [pc, #100]	@ (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000bd8:	f000 ffd8 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bdc:	e026      	b.n	8000c2c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_ADC_MspInit+0xc8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d121      	bne.n	8000c2c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_ADC_MspInit+0xc0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_ADC_MspInit+0xc4>)
 8000c28:	f000 ffb0 	bl	8001b8c <HAL_GPIO_Init>
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40012400 	.word	0x40012400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	40012800 	.word	0x40012800

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <HAL_I2C_MspInit+0x74>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d124      	bne.n	8000cae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <HAL_I2C_MspInit+0x7c>)
 8000c92:	f000 ff7b 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000c9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_I2C_MspInit+0x78>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005800 	.word	0x40005800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b090      	sub	sp, #64	@ 0x40
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6a      	ldr	r2, [pc, #424]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d125      	bne.n	8000d30 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce4:	4b69      	ldr	r3, [pc, #420]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a68      	ldr	r2, [pc, #416]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b66      	ldr	r3, [pc, #408]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b63      	ldr	r3, [pc, #396]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a62      	ldr	r2, [pc, #392]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b60      	ldr	r3, [pc, #384]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4859      	ldr	r0, [pc, #356]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d2a:	f000 ff2f 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d2e:	e0a7      	b.n	8000e80 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d38:	d14f      	bne.n	8000dda <HAL_TIM_Encoder_MspInit+0x116>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3a:	4b54      	ldr	r3, [pc, #336]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a53      	ldr	r2, [pc, #332]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b51      	ldr	r3, [pc, #324]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
 8000d50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b4e      	ldr	r3, [pc, #312]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a4d      	ldr	r2, [pc, #308]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b48      	ldr	r3, [pc, #288]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a47      	ldr	r2, [pc, #284]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b45      	ldr	r3, [pc, #276]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	483e      	ldr	r0, [pc, #248]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000d98:	f000 fef8 	bl	8001b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	4839      	ldr	r0, [pc, #228]	@ (8000e94 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000db0:	f000 feec 	bl	8001b8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000db4:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dd2:	4a31      	ldr	r2, [pc, #196]	@ (8000e98 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd6:	6053      	str	r3, [r2, #4]
}
 8000dd8:	e052      	b.n	8000e80 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d124      	bne.n	8000e2e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	61d3      	str	r3, [r2, #28]
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e14:	23c0      	movs	r3, #192	@ 0xc0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	481a      	ldr	r0, [pc, #104]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000e28:	f000 feb0 	bl	8001b8c <HAL_GPIO_Init>
}
 8000e2c:	e028      	b.n	8000e80 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM4)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d123      	bne.n	8000e80 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	61d3      	str	r3, [r2, #28]
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e68:	23c0      	movs	r3, #192	@ 0xc0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000e7c:	f000 fe86 	bl	8001b8c <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3740      	adds	r7, #64	@ 0x40
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40000800 	.word	0x40000800

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8a4 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f00:	2008      	movs	r0, #8
 8000f02:	f000 ffdf 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f0e:	2010      	movs	r0, #16
 8000f10:	f000 ffd8 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f1e:	f002 f96a 	bl	80031f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000818 	.word	0x20000818

08000f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f30:	2020      	movs	r0, #32
 8000f32:	f000 ffc7 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000f3e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f42:	f000 ffbf 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f46:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f4a:	f000 ffbb 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f4e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f52:	f000 ffb7 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff fff7 	bl	8000f5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6e:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f70:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f84:	4c09      	ldr	r4, [pc, #36]	@ (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f008 ff8d 	bl	8009eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff f8f3 	bl	8000180 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000fa4:	08009fa0 	.word	0x08009fa0
  ldr r2, =_sbss
 8000fa8:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000fac:	20000b04 	.word	0x20000b04

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fd9f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fda0 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fdb7 	bl	8001b72 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 fd7f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	@ (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000008 	.word	0x20000008
 8001060:	2000034c 	.word	0x2000034c

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	@ (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000034c 	.word	0x2000034c

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0be      	b.n	8001260 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fd3a 	bl	8000b78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fbf1 	bl	80018ec <ADC_ConversionStop_Disable>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8099 	bne.w	800124e <HAL_ADC_Init+0x18e>
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8095 	bne.w	800124e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800112c:	f023 0302 	bic.w	r3, r3, #2
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001140:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001148:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4313      	orrs	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001158:	d003      	beq.n	8001162 <HAL_ADC_Init+0xa2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_ADC_Init+0xa8>
 8001162:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001166:	e000      	b.n	800116a <HAL_ADC_Init+0xaa>
 8001168:	2300      	movs	r3, #0
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7d1b      	ldrb	r3, [r3, #20]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d119      	bne.n	80011ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	3b01      	subs	r3, #1
 8001186:	035a      	lsls	r2, r3, #13
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e00b      	b.n	80011ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	f043 0220 	orr.w	r2, r3, #32
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_ADC_Init+0x1a8>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_Init+0x126>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	051b      	lsls	r3, r3, #20
 80011ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	430a      	orrs	r2, r1
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_ADC_Init+0x1ac>)
 800120c:	4013      	ands	r3, r2
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10b      	bne.n	800122c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122a:	e018      	b.n	800125e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f023 0312 	bic.w	r3, r3, #18
 8001234:	f043 0210 	orr.w	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	f043 0201 	orr.w	r2, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124c:	e007      	b.n	800125e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	f043 0210 	orr.w	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	ffe1f7fd 	.word	0xffe1f7fd
 800126c:	ff1f0efe 	.word	0xff1f0efe

08001270 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADC_Start+0x1a>
 8001286:	2302      	movs	r3, #2
 8001288:	e098      	b.n	80013bc <HAL_ADC_Start+0x14c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fad0 	bl	8001838 <ADC_Enable>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 8087 	bne.w	80013b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a41      	ldr	r2, [pc, #260]	@ (80013c4 <HAL_ADC_Start+0x154>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d105      	bne.n	80012ce <HAL_ADC_Start+0x5e>
 80012c2:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <HAL_ADC_Start+0x158>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d026      	beq.n	8001336 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f8:	e01d      	b.n	8001336 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2f      	ldr	r2, [pc, #188]	@ (80013c8 <HAL_ADC_Start+0x158>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d004      	beq.n	800131a <HAL_ADC_Start+0xaa>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2b      	ldr	r2, [pc, #172]	@ (80013c4 <HAL_ADC_Start+0x154>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_ADC_Start+0xc6>
 800131a:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <HAL_ADC_Start+0x158>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800132e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	f023 0206 	bic.w	r2, r3, #6
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800134e:	e002      	b.n	8001356 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f06f 0202 	mvn.w	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001372:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001376:	d113      	bne.n	80013a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_ADC_Start+0x154>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d105      	bne.n	800138e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_ADC_Start+0x158>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d108      	bne.n	80013a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	e00c      	b.n	80013ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e003      	b.n	80013ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40012800 	.word	0x40012800
 80013c8:	40012400 	.word	0x40012400

080013cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_Stop+0x1a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e01a      	b.n	800141c <HAL_ADC_Stop+0x50>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa7c 	bl	80018ec <ADC_ConversionStop_Disable>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800143a:	f7ff fe13 	bl	8001064 <HAL_GetTick>
 800143e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001452:	f043 0220 	orr.w	r2, r3, #32
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0d3      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d131      	bne.n	80014d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800147e:	2b00      	cmp	r3, #0
 8001480:	d12a      	bne.n	80014d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001482:	e021      	b.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148a:	d01d      	beq.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_ADC_PollForConversion+0x7e>
 8001492:	f7ff fde7 	bl	8001064 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d212      	bcs.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10b      	bne.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f043 0204 	orr.w	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0a2      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0d6      	beq.n	8001484 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014d6:	e070      	b.n	80015ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <HAL_ADC_PollForConversion+0x1f4>)
 80014da:	681c      	ldr	r4, [r3, #0]
 80014dc:	2002      	movs	r0, #2
 80014de:	f003 ff7d 	bl	80053dc <HAL_RCCEx_GetPeriphCLKFreq>
 80014e2:	4603      	mov	r3, r0
 80014e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_ADC_PollForConversion+0x1f8>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68d9      	ldr	r1, [r3, #12]
 80014fc:	4b48      	ldr	r3, [pc, #288]	@ (8001620 <HAL_ADC_PollForConversion+0x1fc>)
 80014fe:	400b      	ands	r3, r1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6919      	ldr	r1, [r3, #16]
 800150a:	4b46      	ldr	r3, [pc, #280]	@ (8001624 <HAL_ADC_PollForConversion+0x200>)
 800150c:	400b      	ands	r3, r1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <HAL_ADC_PollForConversion+0x100>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_ADC_PollForConversion+0x204>)
 800151a:	400b      	ands	r3, r1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_ADC_PollForConversion+0x100>
 8001520:	2314      	movs	r3, #20
 8001522:	e020      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001524:	2329      	movs	r3, #41	@ 0x29
 8001526:	e01e      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_ADC_PollForConversion+0x200>)
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_ADC_PollForConversion+0x120>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
 800153c:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_ADC_PollForConversion+0x204>)
 800153e:	400b      	ands	r3, r1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00d      	beq.n	8001560 <HAL_ADC_PollForConversion+0x13c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	4b38      	ldr	r3, [pc, #224]	@ (800162c <HAL_ADC_PollForConversion+0x208>)
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <HAL_ADC_PollForConversion+0x140>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	4b34      	ldr	r3, [pc, #208]	@ (800162c <HAL_ADC_PollForConversion+0x208>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_ADC_PollForConversion+0x140>
 8001560:	2354      	movs	r3, #84	@ 0x54
 8001562:	e000      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001564:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800156c:	e021      	b.n	80015b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d01a      	beq.n	80015ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_ADC_PollForConversion+0x168>
 800157c:	f7ff fd72 	bl	8001064 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d20f      	bcs.n	80015ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d90b      	bls.n	80015ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e030      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d8d9      	bhi.n	800156e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0212 	mvn.w	r2, #18
 80015c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015de:	d115      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	24924924 	.word	0x24924924
 8001620:	00924924 	.word	0x00924924
 8001624:	12492492 	.word	0x12492492
 8001628:	00492492 	.word	0x00492492
 800162c:	00249249 	.word	0x00249249

08001630 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x20>
 8001664:	2302      	movs	r3, #2
 8001666:	e0dc      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1da>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b06      	cmp	r3, #6
 8001676:	d81c      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b05      	subs	r3, #5
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80016b0:	e03c      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d81c      	bhi.n	80016f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b23      	subs	r3, #35	@ 0x23
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4019      	ands	r1, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b23      	subs	r3, #35	@ 0x23
 80016e6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f2:	e01b      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b41      	subs	r3, #65	@ 0x41
 8001706:	221f      	movs	r2, #31
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	@ 0x41
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d91c      	bls.n	800176e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1e      	subs	r3, #30
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	e019      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d132      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_ADC_ConfigChannel+0x1e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d125      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d126      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d11a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_ADC_ConfigChannel+0x1e8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x1b2>
 8001806:	e007      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40012400 	.word	0x40012400
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d040      	beq.n	80018d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <ADC_Enable+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <ADC_Enable+0xb0>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9b      	lsrs	r3, r3, #18
 8001872:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001874:	e002      	b.n	800187c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001882:	f7ff fbef 	bl	8001064 <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001888:	e01f      	b.n	80018ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800188a:	f7ff fbeb 	bl	8001064 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d918      	bls.n	80018ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d011      	beq.n	80018ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e007      	b.n	80018da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d1d8      	bne.n	800188a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83

080018ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d12e      	bne.n	8001964 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001916:	f7ff fba5 	bl	8001064 <HAL_GetTick>
 800191a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800191c:	e01b      	b.n	8001956 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800191e:	f7ff fba1 	bl	8001064 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d914      	bls.n	8001956 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d10d      	bne.n	8001956 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193e:	f043 0210 	orr.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e007      	b.n	8001966 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d0dc      	beq.n	800191e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4906      	ldr	r1, [pc, #24]	@ (8001a08 <__NVIC_EnableIRQ+0x34>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff90 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff2d 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff42 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff90 	bl	8001a60 <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5f 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff35 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b08b      	sub	sp, #44	@ 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e169      	b.n	8001e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8158 	bne.w	8001e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a9a      	ldr	r2, [pc, #616]	@ (8001e2c <HAL_GPIO_Init+0x2a0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d05e      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a98      	ldr	r2, [pc, #608]	@ (8001e2c <HAL_GPIO_Init+0x2a0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d875      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bce:	4a98      	ldr	r2, [pc, #608]	@ (8001e30 <HAL_GPIO_Init+0x2a4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d058      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a96      	ldr	r2, [pc, #600]	@ (8001e30 <HAL_GPIO_Init+0x2a4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d86f      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bda:	4a96      	ldr	r2, [pc, #600]	@ (8001e34 <HAL_GPIO_Init+0x2a8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d052      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001be0:	4a94      	ldr	r2, [pc, #592]	@ (8001e34 <HAL_GPIO_Init+0x2a8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d869      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001be6:	4a94      	ldr	r2, [pc, #592]	@ (8001e38 <HAL_GPIO_Init+0x2ac>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d04c      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bec:	4a92      	ldr	r2, [pc, #584]	@ (8001e38 <HAL_GPIO_Init+0x2ac>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d863      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bf2:	4a92      	ldr	r2, [pc, #584]	@ (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d046      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bf8:	4a90      	ldr	r2, [pc, #576]	@ (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d85d      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d82a      	bhi.n	8001c58 <HAL_GPIO_Init+0xcc>
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d859      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001c06:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <HAL_GPIO_Init+0x80>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c87 	.word	0x08001c87
 8001c10:	08001c61 	.word	0x08001c61
 8001c14:	08001c73 	.word	0x08001c73
 8001c18:	08001cb5 	.word	0x08001cb5
 8001c1c:	08001cbb 	.word	0x08001cbb
 8001c20:	08001cbb 	.word	0x08001cbb
 8001c24:	08001cbb 	.word	0x08001cbb
 8001c28:	08001cbb 	.word	0x08001cbb
 8001c2c:	08001cbb 	.word	0x08001cbb
 8001c30:	08001cbb 	.word	0x08001cbb
 8001c34:	08001cbb 	.word	0x08001cbb
 8001c38:	08001cbb 	.word	0x08001cbb
 8001c3c:	08001cbb 	.word	0x08001cbb
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001cbb 	.word	0x08001cbb
 8001c48:	08001cbb 	.word	0x08001cbb
 8001c4c:	08001cbb 	.word	0x08001cbb
 8001c50:	08001c69 	.word	0x08001c69
 8001c54:	08001c7d 	.word	0x08001c7d
 8001c58:	4a79      	ldr	r2, [pc, #484]	@ (8001e40 <HAL_GPIO_Init+0x2b4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c5e:	e02c      	b.n	8001cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e029      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e024      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	3308      	adds	r3, #8
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e01f      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	330c      	adds	r3, #12
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e01a      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e013      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	611a      	str	r2, [r3, #16]
          break;
 8001ca6:	e009      	b.n	8001cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	615a      	str	r2, [r3, #20]
          break;
 8001cb2:	e003      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          break;
 8001cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2bff      	cmp	r3, #255	@ 0xff
 8001cc0:	d801      	bhi.n	8001cc6 <HAL_GPIO_Init+0x13a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	e001      	b.n	8001cca <HAL_GPIO_Init+0x13e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2bff      	cmp	r3, #255	@ 0xff
 8001cd0:	d802      	bhi.n	8001cd8 <HAL_GPIO_Init+0x14c>
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x152>
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	3b08      	subs	r3, #8
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80b1 	beq.w	8001e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a4c      	ldr	r2, [pc, #304]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d24:	4a48      	ldr	r2, [pc, #288]	@ (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	@ (8001e4c <HAL_GPIO_Init+0x2c0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_GPIO_Init+0x1ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3f      	ldr	r2, [pc, #252]	@ (8001e50 <HAL_GPIO_Init+0x2c4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1e8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e54 <HAL_GPIO_Init+0x2c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3d      	ldr	r2, [pc, #244]	@ (8001e58 <HAL_GPIO_Init+0x2cc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1e0>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d8a:	492f      	ldr	r1, [pc, #188]	@ (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	492c      	ldr	r1, [pc, #176]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4928      	ldr	r1, [pc, #160]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	4922      	ldr	r1, [pc, #136]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	491e      	ldr	r1, [pc, #120]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4918      	ldr	r1, [pc, #96]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4914      	ldr	r1, [pc, #80]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d021      	beq.n	8001e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	490e      	ldr	r1, [pc, #56]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e021      	b.n	8001e6e <HAL_GPIO_Init+0x2e2>
 8001e2a:	bf00      	nop
 8001e2c:	10320000 	.word	0x10320000
 8001e30:	10310000 	.word	0x10310000
 8001e34:	10220000 	.word	0x10220000
 8001e38:	10210000 	.word	0x10210000
 8001e3c:	10120000 	.word	0x10120000
 8001e40:	10110000 	.word	0x10110000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40010800 	.word	0x40010800
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40011400 	.word	0x40011400
 8001e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4909      	ldr	r1, [pc, #36]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	3301      	adds	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f47f ae8e 	bne.w	8001ba0 <HAL_GPIO_Init+0x14>
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	372c      	adds	r7, #44	@ 0x2c
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ece:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eda:	4a05      	ldr	r2, [pc, #20]	@ (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe f932 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e12b      	b.n	800215e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fe92 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f58:	f003 f944 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a81      	ldr	r2, [pc, #516]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d807      	bhi.n	8001f78 <HAL_I2C_Init+0x84>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a80      	ldr	r2, [pc, #512]	@ (800216c <HAL_I2C_Init+0x278>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bf94      	ite	ls
 8001f70:	2301      	movls	r3, #1
 8001f72:	2300      	movhi	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e006      	b.n	8001f86 <HAL_I2C_Init+0x92>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a7d      	ldr	r2, [pc, #500]	@ (8002170 <HAL_I2C_Init+0x27c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0e7      	b.n	800215e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a78      	ldr	r2, [pc, #480]	@ (8002174 <HAL_I2C_Init+0x280>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0c9b      	lsrs	r3, r3, #18
 8001f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_I2C_Init+0xd4>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	e009      	b.n	8001fdc <HAL_I2C_Init+0xe8>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <HAL_I2C_Init+0x284>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	3301      	adds	r3, #1
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	495c      	ldr	r1, [pc, #368]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	d819      	bhi.n	8002030 <HAL_I2C_Init+0x13c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e59      	subs	r1, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fbb1 f3f3 	udiv	r3, r1, r3
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002010:	400b      	ands	r3, r1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_I2C_Init+0x138>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e59      	subs	r1, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	e051      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800202c:	2304      	movs	r3, #4
 800202e:	e04f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <HAL_I2C_Init+0x168>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e58      	subs	r0, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e012      	b.n	8002082 <HAL_I2C_Init+0x18e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x196>
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10e      	bne.n	80020b0 <HAL_I2C_Init+0x1bc>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e58      	subs	r0, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ae:	e00f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e58      	subs	r0, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	0099      	lsls	r1, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6809      	ldr	r1, [r1, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6911      	ldr	r1, [r2, #16]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	430b      	orrs	r3, r1
 8002112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	000186a0 	.word	0x000186a0
 800216c:	001e847f 	.word	0x001e847f
 8002170:	003d08ff 	.word	0x003d08ff
 8002174:	431bde83 	.word	0x431bde83
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	461a      	mov	r2, r3
 800218a:	4603      	mov	r3, r0
 800218c:	817b      	strh	r3, [r7, #10]
 800218e:	460b      	mov	r3, r1
 8002190:	813b      	strh	r3, [r7, #8]
 8002192:	4613      	mov	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002196:	f7fe ff65 	bl	8001064 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	f040 80d9 	bne.w	800235c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2319      	movs	r3, #25
 80021b0:	2201      	movs	r2, #1
 80021b2:	496d      	ldr	r1, [pc, #436]	@ (8002368 <HAL_I2C_Mem_Write+0x1ec>)
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fccd 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0cc      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2C_Mem_Write+0x56>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e0c5      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d007      	beq.n	80021f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2221      	movs	r2, #33	@ 0x21
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2240      	movs	r2, #64	@ 0x40
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a3a      	ldr	r2, [r7, #32]
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_I2C_Mem_Write+0x1f0>)
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800223a:	88f8      	ldrh	r0, [r7, #6]
 800223c:	893a      	ldrh	r2, [r7, #8]
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4603      	mov	r3, r0
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fb04 	bl	8002858 <I2C_RequestMemoryWrite>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d052      	beq.n	80022fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e081      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fd92 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2b04      	cmp	r3, #4
 8002270:	d107      	bne.n	8002282 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06b      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d11b      	bne.n	80022fc <HAL_I2C_Mem_Write+0x180>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d017      	beq.n	80022fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1aa      	bne.n	800225a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fd85 	bl	8002e18 <I2C_WaitOnBTFFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	2b04      	cmp	r3, #4
 800231a:	d107      	bne.n	800232c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e016      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	00100002 	.word	0x00100002
 800236c:	ffff0000 	.word	0xffff0000

08002370 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	@ 0x30
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238e:	f7fe fe69 	bl	8001064 <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	f040 8250 	bne.w	8002842 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2319      	movs	r3, #25
 80023a8:	2201      	movs	r2, #1
 80023aa:	4982      	ldr	r1, [pc, #520]	@ (80025b4 <HAL_I2C_Mem_Read+0x244>)
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fbd1 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e243      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Read+0x5a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e23c      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d007      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2222      	movs	r2, #34	@ 0x22
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a62      	ldr	r2, [pc, #392]	@ (80025b8 <HAL_I2C_Mem_Read+0x248>)
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002432:	88f8      	ldrh	r0, [r7, #6]
 8002434:	893a      	ldrh	r2, [r7, #8]
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa9e 	bl	8002984 <I2C_RequestMemoryRead>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1f8      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e1cc      	b.n	800281c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11e      	bne.n	80024c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002498:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800249a:	b672      	cpsid	i
}
 800249c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024c4:	b662      	cpsie	i
}
 80024c6:	e035      	b.n	8002534 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11e      	bne.n	800250e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024e0:	b672      	cpsid	i
}
 80024e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800250a:	b662      	cpsie	i
}
 800250c:	e012      	b.n	8002534 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800251c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002534:	e172      	b.n	800281c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	2b03      	cmp	r3, #3
 800253c:	f200 811f 	bhi.w	800277e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b01      	cmp	r3, #1
 8002546:	d123      	bne.n	8002590 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fcab 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e173      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800258e:	e145      	b.n	800281c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	2b02      	cmp	r3, #2
 8002596:	d152      	bne.n	800263e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	2200      	movs	r2, #0
 80025a0:	4906      	ldr	r1, [pc, #24]	@ (80025bc <HAL_I2C_Mem_Read+0x24c>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fad6 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e148      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
 80025b2:	bf00      	nop
 80025b4:	00100002 	.word	0x00100002
 80025b8:	ffff0000 	.word	0xffff0000
 80025bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025c0:	b672      	cpsid	i
}
 80025c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002606:	b662      	cpsie	i
}
 8002608:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800263c:	e0ee      	b.n	800281c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002644:	2200      	movs	r2, #0
 8002646:	4981      	ldr	r1, [pc, #516]	@ (800284c <HAL_I2C_Mem_Read+0x4dc>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fa83 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0f5      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002666:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800269e:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_I2C_Mem_Read+0x4e0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <HAL_I2C_Mem_Read+0x4e4>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a1a      	lsrs	r2, r3, #8
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00da      	lsls	r2, r3, #3
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d118      	bne.n	80026f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026e6:	b662      	cpsie	i
}
 80026e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0a6      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d1d9      	bne.n	80026b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002746:	b662      	cpsie	i
}
 8002748:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800277c:	e04e      	b.n	800281c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fb90 	bl	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e058      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d124      	bne.n	800281c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f ae88 	bne.w	8002536 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3728      	adds	r7, #40	@ 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	00010004 	.word	0x00010004
 8002850:	20000000 	.word	0x20000000
 8002854:	14f8b589 	.word	0x14f8b589

08002858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2200      	movs	r2, #0
 800288a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f960 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a8:	d103      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e05f      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	492d      	ldr	r1, [pc, #180]	@ (8002980 <I2C_RequestMemoryWrite+0x128>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f9bb 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e04c      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa46 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02b      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002924:	893b      	ldrh	r3, [r7, #8]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	e021      	b.n	8002974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa20 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b04      	cmp	r3, #4
 8002954:	d107      	bne.n	8002966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e005      	b.n	8002976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	00010002 	.word	0x00010002

08002984 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f8c2 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e4:	d103      	bne.n	80029ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0aa      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	4952      	ldr	r1, [pc, #328]	@ (8002b50 <I2C_RequestMemoryRead+0x1cc>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f91d 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e097      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9a8 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e076      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e021      	b.n	8002ab0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f982 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e050      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	6a39      	ldr	r1, [r7, #32]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f967 	bl	8002d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e035      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f82b 	bl	8002b54 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d103      	bne.n	8002b1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e013      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	6a3a      	ldr	r2, [r7, #32]
 8002b34:	4906      	ldr	r1, [pc, #24]	@ (8002b50 <I2C_RequestMemoryRead+0x1cc>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f886 	bl	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00010002 	.word	0x00010002

08002b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b64:	e048      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d044      	beq.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fa79 	bl	8001064 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d139      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10d      	bne.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	e00c      	b.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d116      	bne.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e023      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10d      	bne.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	e00c      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d093      	beq.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c56:	e071      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	d123      	bne.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e067      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d041      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7fe f9d4 	bl	8001064 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d136      	bne.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e00b      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e021      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10c      	bne.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e00b      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f af6d 	bne.w	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d94:	e034      	b.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8e3 	bl	8002f62 <I2C_IsAcknowledgeFailed>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e034      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d028      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7fe f959 	bl	8001064 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11d      	bne.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dce:	2b80      	cmp	r3, #128	@ 0x80
 8002dd0:	d016      	beq.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	d1c3      	bne.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e24:	e034      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f89b 	bl	8002f62 <I2C_IsAcknowledgeFailed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e034      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d028      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fe f911 	bl	8001064 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11d      	bne.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d1c3      	bne.n	8002e26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb4:	e049      	b.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d119      	bne.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e030      	b.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe f8b4 	bl	8001064 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d016      	beq.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e007      	b.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d1ae      	bne.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f78:	d11b      	bne.n	8002fb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0e8      	b.n	80031a2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 fcd7 	bl	8009998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2203      	movs	r2, #3
 8002fee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 fce6 	bl	80059ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800300c:	f002 fcbc 	bl	8005988 <USB_CoreInit>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0bf      	b.n	80031a2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fcea 	bl	8005a02 <USB_SetCurrentMode>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b0      	b.n	80031a2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e03e      	b.n	80030c4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	3311      	adds	r3, #17
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3310      	adds	r3, #16
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3313      	adds	r3, #19
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	3320      	adds	r3, #32
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3324      	adds	r3, #36	@ 0x24
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3bb      	bcc.n	8003046 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e044      	b.n	800315e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	3301      	adds	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3b5      	bcc.n	80030d4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003172:	f002 fc52 	bl	8005a1a <USB_DevInit>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e00c      	b.n	80031a2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f004 fed1 	bl	8007f42 <USB_DevDisconnect>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_PCD_Start+0x16>
 80031bc:	2302      	movs	r3, #2
 80031be:	e016      	b.n	80031ee <HAL_PCD_Start+0x44>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fbe8 	bl	80059a2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031d2:	2101      	movs	r1, #1
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f006 fe2c 	bl	8009e32 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f004 fea5 	bl	8007f2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fea7 	bl	8007f56 <USB_ReadInterrupts>
 8003208:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fb03 	bl	8003820 <PCD_EP_ISR_Handler>

    return;
 800321a:	e119      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003238:	b292      	uxth	r2, r2
 800323a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f006 fc25 	bl	8009a8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003244:	2100      	movs	r1, #0
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f905 	bl	8003456 <HAL_PCD_SetAddress>

    return;
 800324c:	e100      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800326a:	b292      	uxth	r2, r2
 800326c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003270:	e0ee      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00c      	beq.n	8003296 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800328e:	b292      	uxth	r2, r2
 8003290:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003294:	e0dc      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d027      	beq.n	80032f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	b292      	uxth	r2, r2
 80032b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0208 	bic.w	r2, r2, #8
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f006 fc15 	bl	8009b00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032e8:	b292      	uxth	r2, r2
 80032ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80032ee:	e0af      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8083 	beq.w	8003402 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e010      	b.n	8003324 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	7ffb      	ldrb	r3, [r7, #31]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	7ffb      	ldrb	r3, [r7, #31]
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	b292      	uxth	r2, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	3320      	adds	r3, #32
 8003318:	443b      	add	r3, r7
 800331a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	3301      	adds	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	2b07      	cmp	r3, #7
 8003328:	d9eb      	bls.n	8003302 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	b292      	uxth	r2, r2
 800333e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	b292      	uxth	r2, r2
 8003356:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800335a:	bf00      	nop
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003364:	b29b      	uxth	r3, r3
 8003366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f6      	beq.n	800335c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003380:	b292      	uxth	r2, r2
 8003382:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e00f      	b.n	80033ac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	4611      	mov	r1, r2
 8003394:	7ffa      	ldrb	r2, [r7, #31]
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	440a      	add	r2, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	3320      	adds	r3, #32
 800339e:	443b      	add	r3, r7
 80033a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80033a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	3301      	adds	r3, #1
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	7ffb      	ldrb	r3, [r7, #31]
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d9ec      	bls.n	800338c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0208 	orr.w	r2, r2, #8
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033dc:	b292      	uxth	r2, r2
 80033de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0204 	orr.w	r2, r2, #4
 80033f4:	b292      	uxth	r2, r2
 80033f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f006 fb66 	bl	8009acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003400:	e026      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00f      	beq.n	800342c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800341e:	b292      	uxth	r2, r2
 8003420:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f006 fb24 	bl	8009a72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800342a:	e011      	b.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003448:	b292      	uxth	r2, r2
 800344a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800344e:	bf00      	nop
  }
}
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_PCD_SetAddress+0x1a>
 800346c:	2302      	movs	r3, #2
 800346e:	e012      	b.n	8003496 <HAL_PCD_SetAddress+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f004 fd3e 	bl	8007f08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	4608      	mov	r0, r1
 80034a8:	4611      	mov	r1, r2
 80034aa:	461a      	mov	r2, r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	70fb      	strb	r3, [r7, #3]
 80034b0:	460b      	mov	r3, r1
 80034b2:	803b      	strh	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da0e      	bge.n	80034e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 0207 	and.w	r2, r3, #7
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	3310      	adds	r3, #16
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	705a      	strb	r2, [r3, #1]
 80034e0:	e00e      	b.n	8003500 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 0207 	and.w	r2, r3, #7
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800350c:	883a      	ldrh	r2, [r7, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	78ba      	ldrb	r2, [r7, #2]
 8003516:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003518:	78bb      	ldrb	r3, [r7, #2]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d102      	bne.n	8003524 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_PCD_EP_Open+0x94>
 800352e:	2302      	movs	r3, #2
 8003530:	e00e      	b.n	8003550 <HAL_PCD_EP_Open+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f002 fa87 	bl	8005a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800354e:	7afb      	ldrb	r3, [r7, #11]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da0e      	bge.n	800358a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 0207 	and.w	r2, r3, #7
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	3310      	adds	r3, #16
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	705a      	strb	r2, [r3, #1]
 8003588:	e00e      	b.n	80035a8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 0207 	and.w	r2, r3, #7
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_PCD_EP_Close+0x6a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e00e      	b.n	80035e0 <HAL_PCD_EP_Close+0x88>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68f9      	ldr	r1, [r7, #12]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fdff 	bl	80061d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	f003 0207 	and.w	r2, r3, #7
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 ffb6 	bl	80065ac <USB_EPStartXfer>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	460b      	mov	r3, r1
 8003658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 0207 	and.w	r2, r3, #7
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	3310      	adds	r3, #16
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2201      	movs	r2, #1
 8003694:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003696:	7afb      	ldrb	r3, [r7, #11]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	b2da      	uxtb	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 ff7f 	bl	80065ac <USB_EPStartXfer>

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	7912      	ldrb	r2, [r2, #4]
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e04c      	b.n	8003770 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	da0e      	bge.n	80036fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	f003 0207 	and.w	r2, r3, #7
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	3310      	adds	r3, #16
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	705a      	strb	r2, [r3, #1]
 80036fa:	e00c      	b.n	8003716 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_PCD_EP_SetStall+0x7e>
 8003732:	2302      	movs	r3, #2
 8003734:	e01c      	b.n	8003770 <HAL_PCD_EP_SetStall+0xb8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	4618      	mov	r0, r3
 8003746:	f004 fae2 	bl	8007d0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f004 fc07 	bl	8007f74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	7912      	ldrb	r2, [r2, #4]
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e040      	b.n	8003818 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	da0e      	bge.n	80037bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 0207 	and.w	r2, r3, #7
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	3310      	adds	r3, #16
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	705a      	strb	r2, [r3, #1]
 80037ba:	e00e      	b.n	80037da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 0207 	and.w	r2, r3, #7
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_PCD_EP_ClrStall+0x82>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e00e      	b.n	8003818 <HAL_PCD_EP_ClrStall+0xa0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fad0 	bl	8007dae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b096      	sub	sp, #88	@ 0x58
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003828:	e3bb      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003832:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003836:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003844:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 8175 	bne.w	8003b38 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800384e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d14e      	bne.n	80038f8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386a:	81fb      	strh	r3, [r7, #14]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29b      	uxth	r3, r3
 800387c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3310      	adds	r3, #16
 8003882:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	3302      	adds	r3, #2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	441a      	add	r2, r3
 80038ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038be:	2100      	movs	r1, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f006 f8bc 	bl	8009a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7b5b      	ldrb	r3, [r3, #13]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8368 	beq.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8363 	bne.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7b5b      	ldrb	r3, [r3, #13]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	735a      	strb	r2, [r3, #13]
 80038f6:	e354      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038fe:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800390a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800390e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003912:	2b00      	cmp	r3, #0
 8003914:	d034      	beq.n	8003980 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	3306      	adds	r3, #6
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003954:	b29b      	uxth	r3, r3
 8003956:	f004 fb5d 	bl	8008014 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003966:	4013      	ands	r3, r2
 8003968:	823b      	strh	r3, [r7, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	8a3a      	ldrh	r2, [r7, #16]
 8003970:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003974:	b292      	uxth	r2, r2
 8003976:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f006 f833 	bl	80099e4 <HAL_PCD_SetupStageCallback>
 800397e:	e310      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003980:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003984:	2b00      	cmp	r3, #0
 8003986:	f280 830c 	bge.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29a      	uxth	r2, r3
 8003992:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003996:	4013      	ands	r3, r2
 8003998:	83fb      	strh	r3, [r7, #30]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	8bfa      	ldrh	r2, [r7, #30]
 80039a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039a4:	b292      	uxth	r2, r2
 80039a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	3306      	adds	r3, #6
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d019      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x1f0>
 80039dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ea:	6959      	ldr	r1, [r3, #20]
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f004 fb0d 	bl	8008014 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	441a      	add	r2, r3
 8003a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a06:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a08:	2100      	movs	r1, #0
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 fffc 	bl	8009a08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003a1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 82bd 	bne.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
 8003a28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a34:	f000 82b5 	beq.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a6e:	d91d      	bls.n	8003aac <PCD_EP_ISR_Handler+0x28c>
 8003a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <PCD_EP_ISR_Handler+0x26a>
 8003a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a86:	3b01      	subs	r3, #1
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	029b      	lsls	r3, r3, #10
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e026      	b.n	8003afa <PCD_EP_ISR_Handler+0x2da>
 8003aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <PCD_EP_ISR_Handler+0x2aa>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	e017      	b.n	8003afa <PCD_EP_ISR_Handler+0x2da>
 8003aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <PCD_EP_ISR_Handler+0x2c4>
 8003ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	029b      	lsls	r3, r3, #10
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0a:	827b      	strh	r3, [r7, #18]
 8003b0c:	8a7b      	ldrh	r3, [r7, #18]
 8003b0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003b12:	827b      	strh	r3, [r7, #18]
 8003b14:	8a7b      	ldrh	r3, [r7, #18]
 8003b16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b1a:	827b      	strh	r3, [r7, #18]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	8013      	strh	r3, [r2, #0]
 8003b36:	e234      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b4c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f280 80fc 	bge.w	8003d4e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003b84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b8c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	7b1b      	ldrb	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d125      	bne.n	8003bf6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3306      	adds	r3, #6
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8092 	beq.w	8003d04 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	6959      	ldr	r1, [r3, #20]
 8003be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bea:	88da      	ldrh	r2, [r3, #6]
 8003bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bf0:	f004 fa10 	bl	8008014 <USB_ReadPMA>
 8003bf4:	e086      	b.n	8003d04 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	78db      	ldrb	r3, [r3, #3]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d10a      	bne.n	8003c14 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c02:	461a      	mov	r2, r3
 8003c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9d9 	bl	8003fbe <HAL_PCD_EP_DB_Receive>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003c12:	e077      	b.n	8003d04 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d024      	beq.n	8003cbc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	3302      	adds	r3, #2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02e      	beq.n	8003d04 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	6959      	ldr	r1, [r3, #20]
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	891a      	ldrh	r2, [r3, #8]
 8003cb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cb6:	f004 f9ad 	bl	8008014 <USB_ReadPMA>
 8003cba:	e023      	b.n	8003d04 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3306      	adds	r3, #6
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ce8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf6:	6959      	ldr	r1, [r3, #20]
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfa:	895a      	ldrh	r2, [r3, #10]
 8003cfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d00:	f004 f988 	bl	8008014 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d0c:	441a      	add	r2, r3
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d1a:	441a      	add	r2, r3
 8003d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <PCD_EP_ISR_Handler+0x514>
 8003d28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d206      	bcs.n	8003d42 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f005 fe64 	bl	8009a08 <HAL_PCD_DataOutStageCallback>
 8003d40:	e005      	b.n	8003d4e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 fc2f 	bl	80065ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8123 	beq.w	8003fa2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d5c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3310      	adds	r3, #16
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dae:	78db      	ldrb	r3, [r3, #3]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f040 80a2 	bne.w	8003efa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	7b1b      	ldrb	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8093 	beq.w	8003eec <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d046      	beq.n	8003e60 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d126      	bne.n	8003e28 <PCD_EP_ISR_Handler+0x608>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	4413      	add	r3, r2
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	011a      	lsls	r2, r3, #4
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	e061      	b.n	8003eec <PCD_EP_ISR_Handler+0x6cc>
 8003e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2a:	785b      	ldrb	r3, [r3, #1]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d15d      	bne.n	8003eec <PCD_EP_ISR_Handler+0x6cc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	4413      	add	r3, r2
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	4413      	add	r3, r2
 8003e52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	e045      	b.n	8003eec <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d126      	bne.n	8003ebc <PCD_EP_ISR_Handler+0x69c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	4413      	add	r3, r2
 8003e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	011a      	lsls	r2, r3, #4
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8e:	4413      	add	r3, r2
 8003e90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e017      	b.n	8003eec <PCD_EP_ISR_Handler+0x6cc>
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d113      	bne.n	8003eec <PCD_EP_ISR_Handler+0x6cc>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed2:	4413      	add	r3, r2
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ede:	4413      	add	r3, r2
 8003ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee8:	2200      	movs	r2, #0
 8003eea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f005 fda3 	bl	8009a3e <HAL_PCD_DataInStageCallback>
 8003ef8:	e053      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003efa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d146      	bne.n	8003f94 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d907      	bls.n	8003f4e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	619a      	str	r2, [r3, #24]
 8003f4c:	e002      	b.n	8003f54 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f005 fd6b 	bl	8009a3e <HAL_PCD_DataInStageCallback>
 8003f68:	e01b      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f72:	441a      	add	r2, r3
 8003f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f76:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f80:	441a      	add	r2, r3
 8003f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 fb0d 	bl	80065ac <USB_EPStartXfer>
 8003f92:	e006      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f91b 	bl	80041d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	b21b      	sxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f6ff ac3b 	blt.w	800382a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3758      	adds	r7, #88	@ 0x58
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07e      	beq.n	80040d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3302      	adds	r3, #2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	8b7b      	ldrh	r3, [r7, #26]
 8004006:	429a      	cmp	r2, r3
 8004008:	d306      	bcc.n	8004018 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	8b7b      	ldrh	r3, [r7, #26]
 8004010:	1ad2      	subs	r2, r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	619a      	str	r2, [r3, #24]
 8004016:	e002      	b.n	800401e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d123      	bne.n	800406e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800403c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004040:	833b      	strh	r3, [r7, #24]
 8004042:	8b3b      	ldrh	r3, [r7, #24]
 8004044:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004048:	833b      	strh	r3, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	8b3b      	ldrh	r3, [r7, #24]
 800405a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406a:	b29b      	uxth	r3, r3
 800406c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	82fb      	strh	r3, [r7, #22]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	8afb      	ldrh	r3, [r7, #22]
 80040a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040b8:	8b7b      	ldrh	r3, [r7, #26]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8087 	beq.w	80041ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6959      	ldr	r1, [r3, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	891a      	ldrh	r2, [r3, #8]
 80040cc:	8b7b      	ldrh	r3, [r7, #26]
 80040ce:	f003 ffa1 	bl	8008014 <USB_ReadPMA>
 80040d2:	e07c      	b.n	80041ce <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	3306      	adds	r3, #6
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	8b7b      	ldrh	r3, [r7, #26]
 8004104:	429a      	cmp	r2, r3
 8004106:	d306      	bcc.n	8004116 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	8b7b      	ldrh	r3, [r7, #26]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	619a      	str	r2, [r3, #24]
 8004114:	e002      	b.n	800411c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d123      	bne.n	800416c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800413a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413e:	83fb      	strh	r3, [r7, #30]
 8004140:	8bfb      	ldrh	r3, [r7, #30]
 8004142:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004146:	83fb      	strh	r3, [r7, #30]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	8bfb      	ldrh	r3, [r7, #30]
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11f      	bne.n	80041b6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004190:	83bb      	strh	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	8bbb      	ldrh	r3, [r7, #28]
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041b6:	8b7b      	ldrh	r3, [r7, #26]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	895a      	ldrh	r2, [r3, #10]
 80041c8:	8b7b      	ldrh	r3, [r7, #26]
 80041ca:	f003 ff23 	bl	8008014 <USB_ReadPMA>
    }
  }

  return count;
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b0a4      	sub	sp, #144	@ 0x90
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 81dd 	beq.w	80045ac <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	3302      	adds	r3, #2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004226:	429a      	cmp	r2, r3
 8004228:	d907      	bls.n	800423a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	e002      	b.n	8004240 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f040 80b9 	bne.w	80043bc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d126      	bne.n	80042a0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	4413      	add	r3, r2
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	011a      	lsls	r2, r3, #4
 8004270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004272:	4413      	add	r3, r2
 8004274:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004284:	b29a      	uxth	r2, r3
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004298:	b29a      	uxth	r2, r3
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e01a      	b.n	80042d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d116      	bne.n	80042d6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042bc:	4413      	add	r3, r2
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	011a      	lsls	r2, r3, #4
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d126      	bne.n	8004332 <HAL_PCD_EP_DB_Transmit+0x15a>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	011a      	lsls	r2, r3, #4
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004316:	b29a      	uxth	r2, r3
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432a:	b29a      	uxth	r2, r3
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	801a      	strh	r2, [r3, #0]
 8004330:	e017      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d113      	bne.n	8004362 <HAL_PCD_EP_DB_Transmit+0x18a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	4413      	add	r3, r2
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	011a      	lsls	r2, r3, #4
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	4413      	add	r3, r2
 8004356:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2200      	movs	r2, #0
 8004360:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f005 fb68 	bl	8009a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 82fc 	beq.w	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004394:	82fb      	strh	r3, [r7, #22]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	8013      	strh	r3, [r2, #0]
 80043ba:	e2da      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d021      	beq.n	800440a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80043f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004406:	b29b      	uxth	r3, r3
 8004408:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004410:	2b01      	cmp	r3, #1
 8004412:	f040 82ae 	bne.w	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800441e:	441a      	add	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800442c:	441a      	add	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d30b      	bcc.n	8004456 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a1a      	ldr	r2, [r3, #32]
 800444a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	621a      	str	r2, [r3, #32]
 8004454:	e017      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800445e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800446e:	e00a      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d165      	bne.n	800455a <HAL_PCD_EP_DB_Transmit+0x382>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a2:	4413      	add	r3, r2
 80044a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	011a      	lsls	r2, r3, #4
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80044cc:	d91d      	bls.n	800450a <HAL_PCD_EP_DB_Transmit+0x332>
 80044ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x310>
 80044e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e4:	3b01      	subs	r3, #1
 80044e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004502:	b29a      	uxth	r2, r3
 8004504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	e044      	b.n	8004594 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <HAL_PCD_EP_DB_Transmit+0x350>
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004520:	b29a      	uxth	r2, r3
 8004522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e035      	b.n	8004594 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_PCD_EP_DB_Transmit+0x36a>
 800453c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453e:	3301      	adds	r3, #1
 8004540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29a      	uxth	r2, r3
 8004548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800454a:	b29b      	uxth	r3, r3
 800454c:	029b      	lsls	r3, r3, #10
 800454e:	b29b      	uxth	r3, r3
 8004550:	4313      	orrs	r3, r2
 8004552:	b29a      	uxth	r2, r3
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e01c      	b.n	8004594 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d118      	bne.n	8004594 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004576:	4413      	add	r3, r2
 8004578:	647b      	str	r3, [r7, #68]	@ 0x44
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	011a      	lsls	r2, r3, #4
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	4413      	add	r3, r2
 8004584:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004588:	643b      	str	r3, [r7, #64]	@ 0x40
 800458a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458e:	b29a      	uxth	r2, r3
 8004590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004592:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6959      	ldr	r1, [r3, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	891a      	ldrh	r2, [r3, #8]
 80045a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f003 fcf0 	bl	8007f8a <USB_WritePMA>
 80045aa:	e1e2      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	3306      	adds	r3, #6
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d307      	bcc.n	80045f4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045ec:	1ad2      	subs	r2, r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	619a      	str	r2, [r3, #24]
 80045f2:	e002      	b.n	80045fa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80c0 	bne.w	8004784 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d126      	bne.n	800465a <HAL_PCD_EP_DB_Transmit+0x482>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004620:	4413      	add	r3, r2
 8004622:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800462c:	4413      	add	r3, r2
 800462e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004632:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463e:	b29a      	uxth	r2, r3
 8004640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004652:	b29a      	uxth	r2, r3
 8004654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e01a      	b.n	8004690 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d116      	bne.n	8004690 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	667b      	str	r3, [r7, #100]	@ 0x64
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004676:	4413      	add	r3, r2
 8004678:	667b      	str	r3, [r7, #100]	@ 0x64
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	011a      	lsls	r2, r3, #4
 8004680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004682:	4413      	add	r3, r2
 8004684:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004688:	663b      	str	r3, [r7, #96]	@ 0x60
 800468a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468c:	2200      	movs	r2, #0
 800468e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	677b      	str	r3, [r7, #116]	@ 0x74
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d12b      	bne.n	80046f6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b2:	4413      	add	r3, r2
 80046b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	011a      	lsls	r2, r3, #4
 80046bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046be:	4413      	add	r3, r2
 80046c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	e017      	b.n	8004726 <HAL_PCD_EP_DB_Transmit+0x54e>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d113      	bne.n	8004726 <HAL_PCD_EP_DB_Transmit+0x54e>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004706:	b29b      	uxth	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470c:	4413      	add	r3, r2
 800470e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	011a      	lsls	r2, r3, #4
 8004716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004718:	4413      	add	r3, r2
 800471a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800471e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004722:	2200      	movs	r2, #0
 8004724:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f005 f986 	bl	8009a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	f040 811a 	bne.w	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004758:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800477a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
 8004782:	e0f6      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d121      	bne.n	80047d2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 80ca 	bne.w	8004972 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047e6:	441a      	add	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047f4:	441a      	add	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d30b      	bcc.n	800481e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	621a      	str	r2, [r3, #32]
 800481c:	e017      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800482a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004836:	e00a      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	657b      	str	r3, [r7, #84]	@ 0x54
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d165      	bne.n	8004928 <HAL_PCD_EP_DB_Transmit+0x750>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800486a:	b29b      	uxth	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004870:	4413      	add	r3, r2
 8004872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800487c:	4413      	add	r3, r2
 800487e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800488e:	b29a      	uxth	r2, r3
 8004890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004898:	2b3e      	cmp	r3, #62	@ 0x3e
 800489a:	d91d      	bls.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x700>
 800489c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80048b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b2:	3b01      	subs	r3, #1
 80048b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048be:	b29b      	uxth	r3, r3
 80048c0:	029b      	lsls	r3, r3, #10
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4313      	orrs	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e041      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x784>
 80048d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80048e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	e032      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x784>
 80048f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_PCD_EP_DB_Transmit+0x738>
 800490a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800490c:	3301      	adds	r3, #1
 800490e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29a      	uxth	r2, r3
 8004916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004918:	b29b      	uxth	r3, r3
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	b29b      	uxth	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b29a      	uxth	r2, r3
 8004922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e019      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x784>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d115      	bne.n	800495c <HAL_PCD_EP_DB_Transmit+0x784>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493e:	4413      	add	r3, r2
 8004940:	657b      	str	r3, [r7, #84]	@ 0x54
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494a:	4413      	add	r3, r2
 800494c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004950:	653b      	str	r3, [r7, #80]	@ 0x50
 8004952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004956:	b29a      	uxth	r2, r3
 8004958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800495a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6959      	ldr	r1, [r3, #20]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	895a      	ldrh	r2, [r3, #10]
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496c:	b29b      	uxth	r3, r3
 800496e:	f003 fb0c 	bl	8007f8a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800498c:	82bb      	strh	r3, [r7, #20]
 800498e:	8abb      	ldrh	r3, [r7, #20]
 8004990:	f083 0310 	eor.w	r3, r3, #16
 8004994:	82bb      	strh	r3, [r7, #20]
 8004996:	8abb      	ldrh	r3, [r7, #20]
 8004998:	f083 0320 	eor.w	r3, r3, #32
 800499c:	82bb      	strh	r3, [r7, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	8abb      	ldrh	r3, [r7, #20]
 80049ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049be:	b29b      	uxth	r3, r3
 80049c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3790      	adds	r7, #144	@ 0x90
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	460b      	mov	r3, r1
 80049d8:	817b      	strh	r3, [r7, #10]
 80049da:	4613      	mov	r3, r2
 80049dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049de:	897b      	ldrh	r3, [r7, #10]
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ea:	897b      	ldrh	r3, [r7, #10]
 80049ec:	f003 0207 	and.w	r2, r3, #7
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3310      	adds	r3, #16
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e009      	b.n	8004a16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a02:	897a      	ldrh	r2, [r7, #10]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	80da      	strh	r2, [r3, #6]
 8004a2a:	e00b      	b.n	8004a44 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e272      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a70:	4b92      	ldr	r3, [pc, #584]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d00c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d112      	bne.n	8004aae <HAL_RCC_OscConfig+0x5e>
 8004a88:	4b8c      	ldr	r3, [pc, #560]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a94:	d10b      	bne.n	8004aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a96:	4b89      	ldr	r3, [pc, #548]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d06c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x12c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d168      	bne.n	8004b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e24c      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x76>
 8004ab8:	4b80      	ldr	r3, [pc, #512]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7f      	ldr	r2, [pc, #508]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e02e      	b.n	8004b24 <HAL_RCC_OscConfig+0xd4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b7b      	ldr	r3, [pc, #492]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b78      	ldr	r3, [pc, #480]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a77      	ldr	r2, [pc, #476]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xd4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0xbc>
 8004af2:	4b72      	ldr	r3, [pc, #456]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a71      	ldr	r2, [pc, #452]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b6f      	ldr	r3, [pc, #444]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6e      	ldr	r2, [pc, #440]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xd4>
 8004b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6a      	ldr	r2, [pc, #424]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b68      	ldr	r3, [pc, #416]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a67      	ldr	r2, [pc, #412]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fa9a 	bl	8001064 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fc fa96 	bl	8001064 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	@ 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e200      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b5d      	ldr	r3, [pc, #372]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe4>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fc fa86 	bl	8001064 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fc fa82 	bl	8001064 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1ec      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x10c>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d063      	beq.n	8004c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b96:	4b49      	ldr	r3, [pc, #292]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x18c>
 8004ba2:	4b46      	ldr	r3, [pc, #280]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b43      	ldr	r3, [pc, #268]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x176>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1c0      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4939      	ldr	r1, [pc, #228]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e03a      	b.n	8004c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <HAL_RCC_OscConfig+0x270>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fc fa3b 	bl	8001064 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fc fa37 	bl	8001064 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1a1      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	4b2d      	ldr	r3, [pc, #180]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b2a      	ldr	r3, [pc, #168]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4927      	ldr	r1, [pc, #156]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b26      	ldr	r3, [pc, #152]	@ (8004cc0 <HAL_RCC_OscConfig+0x270>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fc fa1a 	bl	8001064 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fc fa16 	bl	8001064 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e180      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03a      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d019      	beq.n	8004c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c66:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <HAL_RCC_OscConfig+0x274>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6c:	f7fc f9fa 	bl	8001064 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fc f9f6 	bl	8001064 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e160      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <HAL_RCC_OscConfig+0x26c>)
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c92:	2001      	movs	r0, #1
 8004c94:	f000 face 	bl	8005234 <RCC_Delay>
 8004c98:	e01c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca0:	f7fc f9e0 	bl	8001064 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca6:	e00f      	b.n	8004cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca8:	f7fc f9dc 	bl	8001064 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d908      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e146      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	42420000 	.word	0x42420000
 8004cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	4b92      	ldr	r3, [pc, #584]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e9      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a6 	beq.w	8004e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf2:	4b88      	ldr	r3, [pc, #544]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4a87      	ldr	r2, [pc, #540]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cfc:	61d3      	str	r3, [r2, #28]
 8004cfe:	4b85      	ldr	r3, [pc, #532]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b82      	ldr	r3, [pc, #520]	@ (8004f18 <HAL_RCC_OscConfig+0x4c8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d118      	bne.n	8004d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f18 <HAL_RCC_OscConfig+0x4c8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f18 <HAL_RCC_OscConfig+0x4c8>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d26:	f7fc f99d 	bl	8001064 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fc f999 	bl	8001064 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	@ 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e103      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	4b75      	ldr	r3, [pc, #468]	@ (8004f18 <HAL_RCC_OscConfig+0x4c8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_OscConfig+0x312>
 8004d54:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4a6e      	ldr	r2, [pc, #440]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6213      	str	r3, [r2, #32]
 8004d60:	e02d      	b.n	8004dbe <HAL_RCC_OscConfig+0x36e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x334>
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4a69      	ldr	r2, [pc, #420]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	6213      	str	r3, [r2, #32]
 8004d76:	4b67      	ldr	r3, [pc, #412]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a66      	ldr	r2, [pc, #408]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	e01c      	b.n	8004dbe <HAL_RCC_OscConfig+0x36e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCC_OscConfig+0x356>
 8004d8c:	4b61      	ldr	r3, [pc, #388]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4a60      	ldr	r2, [pc, #384]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	6213      	str	r3, [r2, #32]
 8004d98:	4b5e      	ldr	r3, [pc, #376]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6213      	str	r3, [r2, #32]
 8004da4:	e00b      	b.n	8004dbe <HAL_RCC_OscConfig+0x36e>
 8004da6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4a5a      	ldr	r2, [pc, #360]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	6213      	str	r3, [r2, #32]
 8004db2:	4b58      	ldr	r3, [pc, #352]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a57      	ldr	r2, [pc, #348]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d015      	beq.n	8004df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fc f94d 	bl	8001064 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fc f949 	bl	8001064 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0b1      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ee      	beq.n	8004dce <HAL_RCC_OscConfig+0x37e>
 8004df0:	e014      	b.n	8004e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df2:	f7fc f937 	bl	8001064 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fc f933 	bl	8001064 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e09b      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ee      	bne.n	8004dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e22:	4b3c      	ldr	r3, [pc, #240]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4a3b      	ldr	r2, [pc, #236]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8087 	beq.w	8004f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e38:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d061      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d146      	bne.n	8004eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4c:	4b33      	ldr	r3, [pc, #204]	@ (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fc f907 	bl	8001064 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fc f903 	bl	8001064 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e06d      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6c:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e80:	d108      	bne.n	8004e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e82:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4921      	ldr	r1, [pc, #132]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e94:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a19      	ldr	r1, [r3, #32]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	491b      	ldr	r1, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eac:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fc f8d7 	bl	8001064 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fc f8d3 	bl	8001064 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e03d      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ecc:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x46a>
 8004ed8:	e035      	b.n	8004f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fc f8c0 	bl	8001064 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fc f8bc 	bl	8001064 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e026      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x498>
 8004f06:	e01e      	b.n	8004f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e019      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCC_OscConfig+0x500>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0d0      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b6a      	ldr	r3, [pc, #424]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d910      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b67      	ldr	r3, [pc, #412]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 0207 	bic.w	r2, r3, #7
 8004f7e:	4965      	ldr	r1, [pc, #404]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b63      	ldr	r3, [pc, #396]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0b8      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb0:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a58      	ldr	r2, [pc, #352]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc8:	4b53      	ldr	r3, [pc, #332]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a52      	ldr	r2, [pc, #328]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b50      	ldr	r3, [pc, #320]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	494d      	ldr	r1, [pc, #308]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d040      	beq.n	8005074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b47      	ldr	r3, [pc, #284]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d115      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e07f      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b41      	ldr	r3, [pc, #260]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e073      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005022:	4b3d      	ldr	r3, [pc, #244]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06b      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4936      	ldr	r1, [pc, #216]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005044:	f7fc f80e 	bl	8001064 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fc f80a 	bl	8001064 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e053      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d210      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	4922      	ldr	r1, [pc, #136]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b20      	ldr	r3, [pc, #128]	@ (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e032      	b.n	800510a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b0:	4b19      	ldr	r3, [pc, #100]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4916      	ldr	r1, [pc, #88]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	490e      	ldr	r1, [pc, #56]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050e2:	f000 f821 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	490a      	ldr	r1, [pc, #40]	@ (800511c <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	5ccb      	ldrb	r3, [r1, r3]
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x1cc>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050fe:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_ClockConfig+0x1d0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb ff6c 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40022000 	.word	0x40022000
 8005118:	40021000 	.word	0x40021000
 800511c:	08009f58 	.word	0x08009f58
 8005120:	20000000 	.word	0x20000000
 8005124:	20000004 	.word	0x20000004

08005128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005142:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b04      	cmp	r3, #4
 8005150:	d002      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x30>
 8005152:	2b08      	cmp	r3, #8
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x36>
 8005156:	e027      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005158:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800515a:	613b      	str	r3, [r7, #16]
      break;
 800515c:	e027      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	0c9b      	lsrs	r3, r3, #18
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005168:	5cd3      	ldrb	r3, [r2, r3]
 800516a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005176:	4b11      	ldr	r3, [pc, #68]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x94>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	0c5b      	lsrs	r3, r3, #17
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	4a11      	ldr	r2, [pc, #68]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a0d      	ldr	r2, [pc, #52]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800518a:	fb03 f202 	mul.w	r2, r3, r2
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e004      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0c      	ldr	r2, [pc, #48]	@ (80051cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	613b      	str	r3, [r7, #16]
      break;
 80051a6:	e002      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80051aa:	613b      	str	r3, [r7, #16]
      break;
 80051ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ae:	693b      	ldr	r3, [r7, #16]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000
 80051c0:	007a1200 	.word	0x007a1200
 80051c4:	08009f70 	.word	0x08009f70
 80051c8:	08009f80 	.word	0x08009f80
 80051cc:	003d0900 	.word	0x003d0900

080051d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b02      	ldr	r3, [pc, #8]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	20000000 	.word	0x20000000

080051e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e8:	f7ff fff2 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4903      	ldr	r1, [pc, #12]	@ (8005208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	08009f68 	.word	0x08009f68

0800520c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005210:	f7ff ffde 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	@ (800522c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	0adb      	lsrs	r3, r3, #11
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4903      	ldr	r1, [pc, #12]	@ (8005230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	08009f68 	.word	0x08009f68

08005234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800523c:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <RCC_Delay+0x34>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0a      	ldr	r2, [pc, #40]	@ (800526c <RCC_Delay+0x38>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	0a5b      	lsrs	r3, r3, #9
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005250:	bf00      	nop
  }
  while (Delay --);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	60fa      	str	r2, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f9      	bne.n	8005250 <RCC_Delay+0x1c>
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	20000000 	.word	0x20000000
 800526c:	10624dd3 	.word	0x10624dd3

08005270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d07d      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005290:	4b4f      	ldr	r3, [pc, #316]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529c:	4b4c      	ldr	r3, [pc, #304]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4a4b      	ldr	r2, [pc, #300]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	61d3      	str	r3, [r2, #28]
 80052a8:	4b49      	ldr	r3, [pc, #292]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	4b46      	ldr	r3, [pc, #280]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d118      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c4:	4b43      	ldr	r3, [pc, #268]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a42      	ldr	r2, [pc, #264]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d0:	f7fb fec8 	bl	8001064 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d6:	e008      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7fb fec4 	bl	8001064 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e06d      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b3a      	ldr	r3, [pc, #232]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052f6:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	429a      	cmp	r2, r3
 8005312:	d027      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005314:	4b2e      	ldr	r3, [pc, #184]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800531e:	4b2e      	ldr	r3, [pc, #184]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800532a:	4a29      	ldr	r2, [pc, #164]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d014      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533a:	f7fb fe93 	bl	8001064 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fb fe8f 	bl	8001064 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e036      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ee      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4917      	ldr	r1, [pc, #92]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	4313      	orrs	r3, r2
 8005374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d105      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537c:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	4a13      	ldr	r2, [pc, #76]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005394:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	490b      	ldr	r1, [pc, #44]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b2:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
 80053d8:	42420440 	.word	0x42420440

080053dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b10      	cmp	r3, #16
 8005402:	f200 808a 	bhi.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d045      	beq.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d075      	beq.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005412:	e082      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005414:	4b46      	ldr	r3, [pc, #280]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800541a:	4b45      	ldr	r3, [pc, #276]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d07b      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	0c9b      	lsrs	r3, r3, #18
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	4a41      	ldr	r2, [pc, #260]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d015      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800543e:	4b3c      	ldr	r3, [pc, #240]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0c5b      	lsrs	r3, r3, #17
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	4a3b      	ldr	r2, [pc, #236]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800544a:	5cd3      	ldrb	r3, [r2, r3]
 800544c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005458:	4a38      	ldr	r2, [pc, #224]	@ (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e004      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4a34      	ldr	r2, [pc, #208]	@ (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005474:	4b2e      	ldr	r3, [pc, #184]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005480:	d102      	bne.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	61bb      	str	r3, [r7, #24]
      break;
 8005486:	e04a      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4a2d      	ldr	r2, [pc, #180]	@ (8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	61bb      	str	r3, [r7, #24]
      break;
 8005496:	e042      	b.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a8:	d108      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80054b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e01f      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80054d4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e00f      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e6:	d11c      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054e8:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d016      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80054f4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80054f8:	61bb      	str	r3, [r7, #24]
      break;
 80054fa:	e012      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80054fc:	e011      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80054fe:	f7ff fe85 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	0b9b      	lsrs	r3, r3, #14
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	3301      	adds	r3, #1
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	61bb      	str	r3, [r7, #24]
      break;
 8005518:	e004      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005522:	bf00      	nop
    }
  }
  return (frequency);
 8005524:	69bb      	ldr	r3, [r7, #24]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	08009f84 	.word	0x08009f84
 8005538:	08009f94 	.word	0x08009f94
 800553c:	007a1200 	.word	0x007a1200
 8005540:	003d0900 	.word	0x003d0900
 8005544:	aaaaaaab 	.word	0xaaaaaaab

08005548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e093      	b.n	8005684 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fb fba7 	bl	8000cc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800558c:	f023 0307 	bic.w	r3, r3, #7
 8005590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 f903 	bl	80057a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	4313      	orrs	r3, r2
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055e8:	f023 030c 	bic.w	r3, r3, #12
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	4313      	orrs	r3, r2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	031b      	lsls	r3, r3, #12
 8005618:	4313      	orrs	r3, r2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4313      	orrs	r3, r2
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800569c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d102      	bne.n	80056c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c2:	7b7b      	ldrb	r3, [r7, #13]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d001      	beq.n	80056cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e069      	b.n	80057a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056dc:	e031      	b.n	8005742 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d110      	bne.n	8005706 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d102      	bne.n	80056f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ea:	7b3b      	ldrb	r3, [r7, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e055      	b.n	80057a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005704:	e01d      	b.n	8005742 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d108      	bne.n	800571e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005712:	7b7b      	ldrb	r3, [r7, #13]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d102      	bne.n	800571e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005718:	7b3b      	ldrb	r3, [r7, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e03e      	b.n	80057a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_TIM_Encoder_Start+0xc4>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d008      	beq.n	8005760 <HAL_TIM_Encoder_Start+0xd4>
 800574e:	e00f      	b.n	8005770 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f893 	bl	8005884 <TIM_CCxChannelCmd>
      break;
 800575e:	e016      	b.n	800578e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	2104      	movs	r1, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f88b 	bl	8005884 <TIM_CCxChannelCmd>
      break;
 800576e:	e00e      	b.n	800578e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2201      	movs	r2, #1
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f883 	bl	8005884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	2104      	movs	r1, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f87c 	bl	8005884 <TIM_CCxChannelCmd>
      break;
 800578c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005878 <TIM_Base_SetConfig+0xd0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <TIM_Base_SetConfig+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x30>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005880 <TIM_Base_SetConfig+0xd8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a22      	ldr	r2, [pc, #136]	@ (8005878 <TIM_Base_SetConfig+0xd0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d007      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1f      	ldr	r2, [pc, #124]	@ (800587c <TIM_Base_SetConfig+0xd4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_Base_SetConfig+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1e      	ldr	r2, [pc, #120]	@ (8005880 <TIM_Base_SetConfig+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a0d      	ldr	r2, [pc, #52]	@ (8005878 <TIM_Base_SetConfig+0xd0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d103      	bne.n	8005850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]
  }
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800

08005884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2201      	movs	r2, #1
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	401a      	ands	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e046      	b.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a16      	ldr	r2, [pc, #88]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00e      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005930:	d009      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10c      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800

08005988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	4638      	mov	r0, r7
 8005992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80059b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059d6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80059da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4013      	ands	r3, r2
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	4638      	mov	r0, r7
 8005a24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b09d      	sub	sp, #116	@ 0x74
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	78db      	ldrb	r3, [r3, #3]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d81f      	bhi.n	8005ac6 <USB_ActivateEndpoint+0x72>
 8005a86:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <USB_ActivateEndpoint+0x38>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005ab9 	.word	0x08005ab9
 8005a94:	08005acf 	.word	0x08005acf
 8005a98:	08005aab 	.word	0x08005aab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005aa8:	e012      	b.n	8005ad0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005aaa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005aae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005ab2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ab6:	e00b      	b.n	8005ad0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005abc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ac0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ac4:	e004      	b.n	8005ad0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005acc:	e000      	b.n	8005ad0 <USB_ActivateEndpoint+0x7c>
      break;
 8005ace:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	7b1b      	ldrb	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 8178 	bne.w	8005e30 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8084 	beq.w	8005c52 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	011a      	lsls	r2, r3, #4
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	88db      	ldrh	r3, [r3, #6]
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	827b      	strh	r3, [r7, #18]
 8005b8c:	8a7b      	ldrh	r3, [r7, #18]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01b      	beq.n	8005bce <USB_ActivateEndpoint+0x17a>
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bac:	823b      	strh	r3, [r7, #16]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	8a3b      	ldrh	r3, [r7, #16]
 8005bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d020      	beq.n	8005c18 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bec:	81bb      	strh	r3, [r7, #12]
 8005bee:	89bb      	ldrh	r3, [r7, #12]
 8005bf0:	f083 0320 	eor.w	r3, r3, #32
 8005bf4:	81bb      	strh	r3, [r7, #12]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	89bb      	ldrh	r3, [r7, #12]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]
 8005c16:	e2d5      	b.n	80061c4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2e:	81fb      	strh	r3, [r7, #14]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	441a      	add	r2, r3
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]
 8005c50:	e2b8      	b.n	80061c4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	4413      	add	r3, r2
 8005c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	011a      	lsls	r2, r3, #4
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	88db      	ldrh	r3, [r3, #6]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	4413      	add	r3, r2
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	011a      	lsls	r2, r3, #4
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cc0:	d91d      	bls.n	8005cfe <USB_ActivateEndpoint+0x2aa>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <USB_ActivateEndpoint+0x288>
 8005cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e026      	b.n	8005d4c <USB_ActivateEndpoint+0x2f8>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <USB_ActivateEndpoint+0x2c8>
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e017      	b.n	8005d4c <USB_ActivateEndpoint+0x2f8>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <USB_ActivateEndpoint+0x2e2>
 8005d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d32:	3301      	adds	r3, #1
 8005d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01b      	beq.n	8005d9c <USB_ActivateEndpoint+0x348>
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	843b      	strh	r3, [r7, #32]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	8c3b      	ldrh	r3, [r7, #32]
 8005d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d124      	bne.n	8005dee <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	83bb      	strh	r3, [r7, #28]
 8005dbc:	8bbb      	ldrh	r3, [r7, #28]
 8005dbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005dc2:	83bb      	strh	r3, [r7, #28]
 8005dc4:	8bbb      	ldrh	r3, [r7, #28]
 8005dc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005dca:	83bb      	strh	r3, [r7, #28]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	441a      	add	r2, r3
 8005dd6:	8bbb      	ldrh	r3, [r7, #28]
 8005dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	8013      	strh	r3, [r2, #0]
 8005dec:	e1ea      	b.n	80061c4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e04:	83fb      	strh	r3, [r7, #30]
 8005e06:	8bfb      	ldrh	r3, [r7, #30]
 8005e08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e0c:	83fb      	strh	r3, [r7, #30]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	8bfb      	ldrh	r3, [r7, #30]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
 8005e2e:	e1c9      	b.n	80061c4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d11e      	bne.n	8005e76 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
 8005e74:	e01d      	b.n	8005eb2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec2:	4413      	add	r3, r2
 8005ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	891b      	ldrh	r3, [r3, #8]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef6:	4413      	add	r3, r2
 8005ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	011a      	lsls	r2, r3, #4
 8005f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005f08:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f18:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 8093 	bne.w	800604a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <USB_ActivateEndpoint+0x524>
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005f86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01b      	beq.n	8005fc8 <USB_ActivateEndpoint+0x574>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005fe0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005fe2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005fe6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005fe8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005fea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006026:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e0bc      	b.n	80061c4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800605a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800605e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01d      	beq.n	80060a2 <USB_ActivateEndpoint+0x64e>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006096:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800609a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80060b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01d      	beq.n	80060fa <USB_ActivateEndpoint+0x6a6>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	78db      	ldrb	r3, [r3, #3]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d024      	beq.n	800614c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006118:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800611c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006120:	f083 0320 	eor.w	r3, r3, #32
 8006124:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	e01d      	b.n	8006188 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006162:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800617c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3774      	adds	r7, #116	@ 0x74
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b08d      	sub	sp, #52	@ 0x34
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	7b1b      	ldrb	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 808e 	bne.w	8006304 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d044      	beq.n	800627a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	81bb      	strh	r3, [r7, #12]
 80061fe:	89bb      	ldrh	r3, [r7, #12]
 8006200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <USB_DeactivateEndpoint+0x6c>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621e:	817b      	strh	r3, [r7, #10]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	897b      	ldrh	r3, [r7, #10]
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006238:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006256:	813b      	strh	r3, [r7, #8]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	893b      	ldrh	r3, [r7, #8]
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]
 8006278:	e192      	b.n	80065a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	827b      	strh	r3, [r7, #18]
 8006288:	8a7b      	ldrh	r3, [r7, #18]
 800628a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <USB_DeactivateEndpoint+0xf6>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a8:	823b      	strh	r3, [r7, #16]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	8a3b      	ldrh	r3, [r7, #16]
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e0:	81fb      	strh	r3, [r7, #14]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	441a      	add	r2, r3
 80062ec:	89fb      	ldrh	r3, [r7, #14]
 80062ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	8013      	strh	r3, [r2, #0]
 8006302:	e14d      	b.n	80065a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 80a5 	bne.w	8006458 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	843b      	strh	r3, [r7, #32]
 800631c:	8c3b      	ldrh	r3, [r7, #32]
 800631e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01b      	beq.n	800635e <USB_DeactivateEndpoint+0x18a>
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633c:	83fb      	strh	r3, [r7, #30]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	8bfb      	ldrh	r3, [r7, #30]
 800634a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006352:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635a:	b29b      	uxth	r3, r3
 800635c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	83bb      	strh	r3, [r7, #28]
 800636c:	8bbb      	ldrh	r3, [r7, #28]
 800636e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <USB_DeactivateEndpoint+0x1da>
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638c:	837b      	strh	r3, [r7, #26]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	8b7b      	ldrh	r3, [r7, #26]
 800639a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c4:	833b      	strh	r3, [r7, #24]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	441a      	add	r2, r3
 80063d0:	8b3b      	ldrh	r3, [r7, #24]
 80063d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fc:	82fb      	strh	r3, [r7, #22]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8afb      	ldrh	r3, [r7, #22]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006434:	82bb      	strh	r3, [r7, #20]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8abb      	ldrh	r3, [r7, #20]
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
 8006456:	e0a3      	b.n	80065a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006466:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01b      	beq.n	80064a8 <USB_DeactivateEndpoint+0x2d4>
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800649c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80064b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01b      	beq.n	80064f8 <USB_DeactivateEndpoint+0x324>
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80064e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006546:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3734      	adds	r7, #52	@ 0x34
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b0c2      	sub	sp, #264	@ 0x108
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ba:	6018      	str	r0, [r3, #0]
 80065bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	f040 86b7 	bne.w	8007346 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d908      	bls.n	8006606 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006604:	e007      	b.n	8006616 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	7b1b      	ldrb	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13a      	bne.n	800669c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6959      	ldr	r1, [r3, #20]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	88da      	ldrh	r2, [r3, #6]
 800663e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006642:	b29b      	uxth	r3, r3
 8006644:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006648:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800664c:	6800      	ldr	r0, [r0, #0]
 800664e:	f001 fc9c 	bl	8007f8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	011a      	lsls	r2, r3, #4
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	f000 be1f 	b.w	80072da <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	78db      	ldrb	r3, [r3, #3]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	f040 8462 	bne.w	8006f72 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f240 83df 	bls.w	8006e8a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 81c7 	beq.w	8006afc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800676e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d177      	bne.n	800687a <USB_EPStartXfer+0x2ce>
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	4413      	add	r3, r2
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	011a      	lsls	r2, r3, #4
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	4413      	add	r3, r2
 80067c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	2b3e      	cmp	r3, #62	@ 0x3e
 80067dc:	d921      	bls.n	8006822 <USB_EPStartXfer+0x276>
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <USB_EPStartXfer+0x252>
 80067f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067f8:	3b01      	subs	r3, #1
 80067fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006808:	b29b      	uxth	r3, r3
 800680a:	029b      	lsls	r3, r3, #10
 800680c:	b29b      	uxth	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e050      	b.n	80068c4 <USB_EPStartXfer+0x318>
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <USB_EPStartXfer+0x294>
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	e041      	b.n	80068c4 <USB_EPStartXfer+0x318>
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	085b      	lsrs	r3, r3, #1
 8006846:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <USB_EPStartXfer+0x2b4>
 8006856:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800685a:	3301      	adds	r3, #1
 800685c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800686a:	b29b      	uxth	r3, r3
 800686c:	029b      	lsls	r3, r3, #10
 800686e:	b29b      	uxth	r3, r3
 8006870:	4313      	orrs	r3, r2
 8006872:	b29a      	uxth	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e024      	b.n	80068c4 <USB_EPStartXfer+0x318>
 800687a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d11c      	bne.n	80068c4 <USB_EPStartXfer+0x318>
 800688a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006898:	b29b      	uxth	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	4413      	add	r3, r2
 80068a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	011a      	lsls	r2, r3, #4
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6959      	ldr	r1, [r3, #20]
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	f001 fb49 	bl	8007f8a <USB_WritePMA>
            ep->xfer_buff += len;
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	441a      	add	r2, r3
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	429a      	cmp	r2, r3
 8006930:	d90f      	bls.n	8006952 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6a1a      	ldr	r2, [r3, #32]
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	1ad2      	subs	r2, r2, r3
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	621a      	str	r2, [r3, #32]
 8006950:	e00e      	b.n	8006970 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2200      	movs	r2, #0
 800696e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d177      	bne.n	8006a70 <USB_EPStartXfer+0x4c4>
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006990:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800699a:	b29b      	uxth	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4413      	add	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80069d2:	d921      	bls.n	8006a18 <USB_EPStartXfer+0x46c>
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <USB_EPStartXfer+0x448>
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e056      	b.n	8006ac6 <USB_EPStartXfer+0x51a>
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <USB_EPStartXfer+0x48a>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e047      	b.n	8006ac6 <USB_EPStartXfer+0x51a>
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <USB_EPStartXfer+0x4aa>
 8006a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a50:	3301      	adds	r3, #1
 8006a52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e02a      	b.n	8006ac6 <USB_EPStartXfer+0x51a>
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d122      	bne.n	8006ac6 <USB_EPStartXfer+0x51a>
 8006a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	011a      	lsls	r2, r3, #4
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	891b      	ldrh	r3, [r3, #8]
 8006ad2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6959      	ldr	r1, [r3, #20]
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006aec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006af0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006af4:	6800      	ldr	r0, [r0, #0]
 8006af6:	f001 fa48 	bl	8007f8a <USB_WritePMA>
 8006afa:	e3ee      	b.n	80072da <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d177      	bne.n	8006bfc <USB_EPStartXfer+0x650>
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b2c:	4413      	add	r3, r2
 8006b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	011a      	lsls	r2, r3, #4
 8006b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b5e:	d921      	bls.n	8006ba4 <USB_EPStartXfer+0x5f8>
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d104      	bne.n	8006b80 <USB_EPStartXfer+0x5d4>
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e056      	b.n	8006c52 <USB_EPStartXfer+0x6a6>
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <USB_EPStartXfer+0x616>
 8006bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	e047      	b.n	8006c52 <USB_EPStartXfer+0x6a6>
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <USB_EPStartXfer+0x636>
 8006bd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e02a      	b.n	8006c52 <USB_EPStartXfer+0x6a6>
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d122      	bne.n	8006c52 <USB_EPStartXfer+0x6a6>
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c2c:	4413      	add	r3, r2
 8006c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	011a      	lsls	r2, r3, #4
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	891b      	ldrh	r3, [r3, #8]
 8006c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6959      	ldr	r1, [r3, #20]
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c80:	6800      	ldr	r0, [r0, #0]
 8006c82:	f001 f982 	bl	8007f8a <USB_WritePMA>
            ep->xfer_buff += len;
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	441a      	add	r2, r3
 8006c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d90f      	bls.n	8006ce0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	621a      	str	r2, [r3, #32]
 8006cde:	e00e      	b.n	8006cfe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d177      	bne.n	8006e0a <USB_EPStartXfer+0x85e>
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	4413      	add	r3, r2
 8006d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	011a      	lsls	r2, r3, #4
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	4413      	add	r3, r2
 8006d50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d6c:	d921      	bls.n	8006db2 <USB_EPStartXfer+0x806>
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USB_EPStartXfer+0x7e2>
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e050      	b.n	8006e54 <USB_EPStartXfer+0x8a8>
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <USB_EPStartXfer+0x824>
 8006dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e041      	b.n	8006e54 <USB_EPStartXfer+0x8a8>
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <USB_EPStartXfer+0x844>
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dea:	3301      	adds	r3, #1
 8006dec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4313      	orrs	r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	e024      	b.n	8006e54 <USB_EPStartXfer+0x8a8>
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d11c      	bne.n	8006e54 <USB_EPStartXfer+0x8a8>
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e2e:	4413      	add	r3, r2
 8006e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	011a      	lsls	r2, r3, #4
 8006e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e42:	4413      	add	r3, r2
 8006e44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	895b      	ldrh	r3, [r3, #10]
 8006e60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6959      	ldr	r1, [r3, #20]
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	f001 f881 	bl	8007f8a <USB_WritePMA>
 8006e88:	e227      	b.n	80072da <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f16:	4413      	add	r3, r2
 8006f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	011a      	lsls	r2, r3, #4
 8006f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	891b      	ldrh	r3, [r3, #8]
 8006f48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6959      	ldr	r1, [r3, #20]
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f62:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f66:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f001 f80d 	bl	8007f8a <USB_WritePMA>
 8006f70:	e1b3      	b.n	80072da <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80c6 	beq.w	8007144 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d177      	bne.n	80070c4 <USB_EPStartXfer+0xb18>
 8006fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ff4:	4413      	add	r3, r2
 8006ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007008:	4413      	add	r3, r2
 800700a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800700e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800701a:	b29a      	uxth	r2, r3
 800701c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	2b3e      	cmp	r3, #62	@ 0x3e
 8007026:	d921      	bls.n	800706c <USB_EPStartXfer+0xac0>
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <USB_EPStartXfer+0xa9c>
 800703e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007042:	3b01      	subs	r3, #1
 8007044:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29b      	uxth	r3, r3
 8007058:	4313      	orrs	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007064:	b29a      	uxth	r2, r3
 8007066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007068:	801a      	strh	r2, [r3, #0]
 800706a:	e050      	b.n	800710e <USB_EPStartXfer+0xb62>
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <USB_EPStartXfer+0xade>
 8007074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007082:	b29a      	uxth	r2, r3
 8007084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	e041      	b.n	800710e <USB_EPStartXfer+0xb62>
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <USB_EPStartXfer+0xafe>
 80070a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070a4:	3301      	adds	r3, #1
 80070a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	029b      	lsls	r3, r3, #10
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	e024      	b.n	800710e <USB_EPStartXfer+0xb62>
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11c      	bne.n	800710e <USB_EPStartXfer+0xb62>
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070e8:	4413      	add	r3, r2
 80070ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	b29a      	uxth	r2, r3
 800710a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800710c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	b29b      	uxth	r3, r3
 8007130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007134:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007138:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800713c:	6800      	ldr	r0, [r0, #0]
 800713e:	f000 ff24 	bl	8007f8a <USB_WritePMA>
 8007142:	e0ca      	b.n	80072da <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d177      	bne.n	8007244 <USB_EPStartXfer+0xc98>
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007174:	4413      	add	r3, r2
 8007176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	011a      	lsls	r2, r3, #4
 8007186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007188:	4413      	add	r3, r2
 800718a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800718e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800719a:	b29a      	uxth	r2, r3
 800719c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a6:	d921      	bls.n	80071ec <USB_EPStartXfer+0xc40>
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <USB_EPStartXfer+0xc1c>
 80071be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071c2:	3b01      	subs	r3, #1
 80071c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e05c      	b.n	80072a6 <USB_EPStartXfer+0xcfa>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <USB_EPStartXfer+0xc5e>
 80071f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e04d      	b.n	80072a6 <USB_EPStartXfer+0xcfa>
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0xc7e>
 8007220:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800722a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29a      	uxth	r2, r3
 8007230:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e030      	b.n	80072a6 <USB_EPStartXfer+0xcfa>
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d128      	bne.n	80072a6 <USB_EPStartXfer+0xcfa>
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007270:	b29b      	uxth	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007278:	4413      	add	r3, r2
 800727a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007290:	4413      	add	r3, r2
 8007292:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800729a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	891b      	ldrh	r3, [r3, #8]
 80072b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6959      	ldr	r1, [r3, #20]
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072d4:	6800      	ldr	r0, [r0, #0]
 80072d6:	f000 fe58 	bl	8007f8a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007300:	817b      	strh	r3, [r7, #10]
 8007302:	897b      	ldrh	r3, [r7, #10]
 8007304:	f083 0310 	eor.w	r3, r3, #16
 8007308:	817b      	strh	r3, [r7, #10]
 800730a:	897b      	ldrh	r3, [r7, #10]
 800730c:	f083 0320 	eor.w	r3, r3, #32
 8007310:	817b      	strh	r3, [r7, #10]
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	897b      	ldrh	r3, [r7, #10]
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800733a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
 8007342:	f000 bcde 	b.w	8007d02 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 80bb 	bne.w	80074ce <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	d917      	bls.n	80073a4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	1ad2      	subs	r2, r2, r3
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	619a      	str	r2, [r3, #24]
 80073a2:	e00e      	b.n	80073c2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073de:	b29b      	uxth	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073e6:	4413      	add	r3, r2
 80073e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	011a      	lsls	r2, r3, #4
 80073fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073fe:	4413      	add	r3, r2
 8007400:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007414:	b29a      	uxth	r2, r3
 8007416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	2b3e      	cmp	r3, #62	@ 0x3e
 8007422:	d924      	bls.n	800746e <USB_EPStartXfer+0xec2>
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800742e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	2b00      	cmp	r3, #0
 8007438:	d104      	bne.n	8007444 <USB_EPStartXfer+0xe98>
 800743a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800743e:	3b01      	subs	r3, #1
 8007440:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007450:	b29b      	uxth	r3, r3
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	b29b      	uxth	r3, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	b29b      	uxth	r3, r3
 800745a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	f000 bc10 	b.w	8007c8e <USB_EPStartXfer+0x16e2>
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10c      	bne.n	8007490 <USB_EPStartXfer+0xee4>
 8007476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007486:	b29a      	uxth	r2, r3
 8007488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	e3fe      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	085b      	lsrs	r3, r3, #1
 8007496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <USB_EPStartXfer+0xf04>
 80074a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074aa:	3301      	adds	r3, #1
 80074ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074bc:	b29b      	uxth	r3, r3
 80074be:	029b      	lsls	r3, r3, #10
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e3df      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	78db      	ldrb	r3, [r3, #3]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	f040 8218 	bne.w	8007910 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 809d 	bne.w	800762c <USB_EPStartXfer+0x1080>
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007516:	4413      	add	r3, r2
 8007518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011a      	lsls	r2, r3, #4
 800752a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800752e:	4413      	add	r3, r2
 8007530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b3e      	cmp	r3, #62	@ 0x3e
 800755a:	d92b      	bls.n	80075b4 <USB_EPStartXfer+0x1008>
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <USB_EPStartXfer+0xfe0>
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007586:	3b01      	subs	r3, #1
 8007588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800758c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007598:	b29b      	uxth	r3, r3
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	b29b      	uxth	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e070      	b.n	8007696 <USB_EPStartXfer+0x10ea>
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <USB_EPStartXfer+0x1032>
 80075c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e05b      	b.n	8007696 <USB_EPStartXfer+0x10ea>
 80075de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <USB_EPStartXfer+0x1062>
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007608:	3301      	adds	r3, #1
 800760a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800760e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e034      	b.n	8007696 <USB_EPStartXfer+0x10ea>
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d12c      	bne.n	8007696 <USB_EPStartXfer+0x10ea>
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007660:	4413      	add	r3, r2
 8007662:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	011a      	lsls	r2, r3, #4
 8007674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007678:	4413      	add	r3, r2
 800767a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800767e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	b29a      	uxth	r2, r3
 8007690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 809d 	bne.w	80077f0 <USB_EPStartXfer+0x1244>
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076da:	4413      	add	r3, r2
 80076dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	011a      	lsls	r2, r3, #4
 80076ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076f2:	4413      	add	r3, r2
 80076f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b3e      	cmp	r3, #62	@ 0x3e
 800771e:	d92b      	bls.n	8007778 <USB_EPStartXfer+0x11cc>
 8007720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <USB_EPStartXfer+0x11a4>
 8007746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774a:	3b01      	subs	r3, #1
 800774c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007750:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800775c:	b29b      	uxth	r3, r3
 800775e:	029b      	lsls	r3, r3, #10
 8007760:	b29b      	uxth	r3, r3
 8007762:	4313      	orrs	r3, r2
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29a      	uxth	r2, r3
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e069      	b.n	800784c <USB_EPStartXfer+0x12a0>
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <USB_EPStartXfer+0x11f6>
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007798:	b29a      	uxth	r2, r3
 800779a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e054      	b.n	800784c <USB_EPStartXfer+0x12a0>
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <USB_EPStartXfer+0x1226>
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077cc:	3301      	adds	r3, #1
 80077ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077de:	b29b      	uxth	r3, r3
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e02d      	b.n	800784c <USB_EPStartXfer+0x12a0>
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d125      	bne.n	800784c <USB_EPStartXfer+0x12a0>
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007816:	4413      	add	r3, r2
 8007818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800782e:	4413      	add	r3, r2
 8007830:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007834:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	b29a      	uxth	r2, r3
 8007846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800784a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8218 	beq.w	8007c8e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800787e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <USB_EPStartXfer+0x12ea>
 800788a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007896:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800789a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 81f5 	bne.w	8007c8e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 81ee 	bne.w	8007c8e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	441a      	add	r2, r3
 80078f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007906:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]
 800790e:	e1be      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	78db      	ldrb	r3, [r3, #3]
 800791c:	2b01      	cmp	r3, #1
 800791e:	f040 81b4 	bne.w	8007c8a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	d917      	bls.n	800796e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	619a      	str	r2, [r3, #24]
 800796c:	e00e      	b.n	800798c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800796e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800797e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2200      	movs	r2, #0
 800798a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 8085 	bne.w	8007aa8 <USB_EPStartXfer+0x14fc>
 800799e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079c2:	4413      	add	r3, r2
 80079c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	011a      	lsls	r2, r3, #4
 80079d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079da:	4413      	add	r3, r2
 80079dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80079fe:	d923      	bls.n	8007a48 <USB_EPStartXfer+0x149c>
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <USB_EPStartXfer+0x1474>
 8007a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	029b      	lsls	r3, r3, #10
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e060      	b.n	8007b0a <USB_EPStartXfer+0x155e>
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10c      	bne.n	8007a6a <USB_EPStartXfer+0x14be>
 8007a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e04f      	b.n	8007b0a <USB_EPStartXfer+0x155e>
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <USB_EPStartXfer+0x14de>
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a84:	3301      	adds	r3, #1
 8007a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e030      	b.n	8007b0a <USB_EPStartXfer+0x155e>
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d128      	bne.n	8007b0a <USB_EPStartXfer+0x155e>
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007adc:	4413      	add	r3, r2
 8007ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	011a      	lsls	r2, r3, #4
 8007af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007afa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 8085 	bne.w	8007c34 <USB_EPStartXfer+0x1688>
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b4e:	4413      	add	r3, r2
 8007b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	011a      	lsls	r2, r3, #4
 8007b62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b66:	4413      	add	r3, r2
 8007b68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b8a:	d923      	bls.n	8007bd4 <USB_EPStartXfer+0x1628>
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	f003 031f 	and.w	r3, r3, #31
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <USB_EPStartXfer+0x1600>
 8007ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	029b      	lsls	r3, r3, #10
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e05c      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10c      	bne.n	8007bf6 <USB_EPStartXfer+0x164a>
 8007bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e04b      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <USB_EPStartXfer+0x166a>
 8007c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	e02c      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
 8007c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d124      	bne.n	8007c8e <USB_EPStartXfer+0x16e2>
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	011a      	lsls	r2, r3, #4
 8007c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c72:	4413      	add	r3, r2
 8007c74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e001      	b.n	8007c8e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e03a      	b.n	8007d04 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007cc0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ccc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d020      	beq.n	8007d62 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d36:	81bb      	strh	r3, [r7, #12]
 8007d38:	89bb      	ldrh	r3, [r7, #12]
 8007d3a:	f083 0310 	eor.w	r3, r3, #16
 8007d3e:	81bb      	strh	r3, [r7, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	89bb      	ldrh	r3, [r7, #12]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e01f      	b.n	8007da2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d78:	81fb      	strh	r3, [r7, #14]
 8007d7a:	89fb      	ldrh	r3, [r7, #14]
 8007d7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d80:	81fb      	strh	r3, [r7, #14]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	89fb      	ldrh	r3, [r7, #14]
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b087      	sub	sp, #28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	7b1b      	ldrb	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 809d 	bne.w	8007efc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d04c      	beq.n	8007e64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	823b      	strh	r3, [r7, #16]
 8007dd8:	8a3b      	ldrh	r3, [r7, #16]
 8007dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01b      	beq.n	8007e1a <USB_EPClearStall+0x6c>
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df8:	81fb      	strh	r3, [r7, #14]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d06c      	beq.n	8007efc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e38:	81bb      	strh	r3, [r7, #12]
 8007e3a:	89bb      	ldrh	r3, [r7, #12]
 8007e3c:	f083 0320 	eor.w	r3, r3, #32
 8007e40:	81bb      	strh	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	89bb      	ldrh	r3, [r7, #12]
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]
 8007e62:	e04b      	b.n	8007efc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	82fb      	strh	r3, [r7, #22]
 8007e72:	8afb      	ldrh	r3, [r7, #22]
 8007e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01b      	beq.n	8007eb4 <USB_EPClearStall+0x106>
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e92:	82bb      	strh	r3, [r7, #20]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	8abb      	ldrh	r3, [r7, #20]
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	827b      	strh	r3, [r7, #18]
 8007ecc:	8a7b      	ldrh	r3, [r7, #18]
 8007ece:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ed2:	827b      	strh	r3, [r7, #18]
 8007ed4:	8a7b      	ldrh	r3, [r7, #18]
 8007ed6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007eda:	827b      	strh	r3, [r7, #18]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	8a7b      	ldrh	r3, [r7, #18]
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2280      	movs	r2, #128	@ 0x80
 8007f1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr

08007f2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr

08007f56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f68:	68fb      	ldr	r3, [r7, #12]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr

08007f74 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b08b      	sub	sp, #44	@ 0x2c
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	4611      	mov	r1, r2
 8007f96:	461a      	mov	r2, r3
 8007f98:	460b      	mov	r3, r1
 8007f9a:	80fb      	strh	r3, [r7, #6]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fa0:	88bb      	ldrh	r3, [r7, #4]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	005a      	lsls	r2, r3, #1
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc2:	e01e      	b.n	8008002 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b21a      	sxth	r2, r3
 8007fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	8a7a      	ldrh	r2, [r7, #18]
 8007fe2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	3302      	adds	r3, #2
 8007fe8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	3302      	adds	r3, #2
 8007fee:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	3b01      	subs	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1dd      	bne.n	8007fc4 <USB_WritePMA+0x3a>
  }
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	372c      	adds	r7, #44	@ 0x2c
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008014:	b480      	push	{r7}
 8008016:	b08b      	sub	sp, #44	@ 0x2c
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4611      	mov	r1, r2
 8008020:	461a      	mov	r2, r3
 8008022:	460b      	mov	r3, r1
 8008024:	80fb      	strh	r3, [r7, #6]
 8008026:	4613      	mov	r3, r2
 8008028:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800802a:	88bb      	ldrh	r3, [r7, #4]
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	b29b      	uxth	r3, r3
 8008030:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	005a      	lsls	r2, r3, #1
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008046:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
 800804c:	e01b      	b.n	8008086 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	3302      	adds	r3, #2
 800805a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	b2da      	uxtb	r2, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3301      	adds	r3, #1
 8008078:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	3302      	adds	r3, #2
 800807e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	3b01      	subs	r3, #1
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e0      	bne.n	800804e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800808c:	88bb      	ldrh	r3, [r7, #4]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	701a      	strb	r2, [r3, #0]
  }
}
 80080a8:	bf00      	nop
 80080aa:	372c      	adds	r7, #44	@ 0x2c
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <MCP23017_Init>:
#include <MCP23017.h>

void MCP23017_Init(I2C_HandleTypeDef *hi2c)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b088      	sub	sp, #32
 80080b6:	af04      	add	r7, sp, #16
 80080b8:	6078      	str	r0, [r7, #4]
    uint8_t iodir = 0xFF; // Tất cả chân input
 80080ba:	23ff      	movs	r3, #255	@ 0xff
 80080bc:	73fb      	strb	r3, [r7, #15]

    // Cấu hình cả PORTA và PORTB là input
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRA_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 80080be:	f04f 33ff 	mov.w	r3, #4294967295
 80080c2:	9302      	str	r3, [sp, #8]
 80080c4:	2301      	movs	r3, #1
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	f107 030f 	add.w	r3, r7, #15
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	2301      	movs	r3, #1
 80080d0:	2200      	movs	r2, #0
 80080d2:	2140      	movs	r1, #64	@ 0x40
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fa f851 	bl	800217c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRB_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	2301      	movs	r3, #1
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	f107 030f 	add.w	r3, r7, #15
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	2301      	movs	r3, #1
 80080ec:	2201      	movs	r2, #1
 80080ee:	2140      	movs	r1, #64	@ 0x40
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fa f843 	bl	800217c <HAL_I2C_Mem_Write>
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <MCP23017_Read_GPIOA>:

uint8_t MCP23017_Read_GPIOA(I2C_HandleTypeDef *hi2c)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af04      	add	r7, sp, #16
 8008104:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOA_REG, 1, &value, 1, HAL_MAX_DELAY);
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	2301      	movs	r3, #1
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	f107 030f 	add.w	r3, r7, #15
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	2301      	movs	r3, #1
 8008118:	2212      	movs	r2, #18
 800811a:	2140      	movs	r1, #64	@ 0x40
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fa f927 	bl	8002370 <HAL_I2C_Mem_Read>
    return value;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <MCP23017_Read_GPIOB>:

uint8_t MCP23017_Read_GPIOB(I2C_HandleTypeDef *hi2c)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af04      	add	r7, sp, #16
 8008132:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
 8008134:	f04f 33ff 	mov.w	r3, #4294967295
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	2301      	movs	r3, #1
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	f107 030f 	add.w	r3, r7, #15
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2301      	movs	r3, #1
 8008146:	2213      	movs	r2, #19
 8008148:	2140      	movs	r1, #64	@ 0x40
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fa f910 	bl	8002370 <HAL_I2C_Mem_Read>
    return value;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <MCP23017_WriteRegister>:

void MCP23017_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 800815a:	b580      	push	{r7, lr}
 800815c:	b086      	sub	sp, #24
 800815e:	af04      	add	r7, sp, #16
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
 8008166:	4613      	mov	r3, r2
 8008168:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b29a      	uxth	r2, r3
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	2301      	movs	r3, #1
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	1cbb      	adds	r3, r7, #2
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	2301      	movs	r3, #1
 800817e:	2140      	movs	r1, #64	@ 0x40
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7f9 fffb 	bl	800217c <HAL_I2C_Mem_Write>
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <MCP23017_EnablePullUps>:

void MCP23017_EnablePullUps(I2C_HandleTypeDef *hi2c) {
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
    MCP23017_WriteRegister(hi2c, 0x0C, 0xFF);
 8008196:	22ff      	movs	r2, #255	@ 0xff
 8008198:	210c      	movs	r1, #12
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff ffdd 	bl	800815a <MCP23017_WriteRegister>
    MCP23017_WriteRegister(hi2c, 0x0D, 0xFF);
 80081a0:	22ff      	movs	r2, #255	@ 0xff
 80081a2:	210d      	movs	r1, #13
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ffd8 	bl	800815a <MCP23017_WriteRegister>
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <TLC59116_Init>:
#include "TLC59116.h"

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b088      	sub	sp, #32
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 80081be:	2300      	movs	r3, #0
 80081c0:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	2301      	movs	r3, #1
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	f107 030f 	add.w	r3, r7, #15
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	2301      	movs	r3, #1
 80081d4:	2200      	movs	r2, #0
 80081d6:	21c0      	movs	r1, #192	@ 0xc0
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f9 ffcf 	bl	800217c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 80081de:	f04f 33ff 	mov.w	r3, #4294967295
 80081e2:	9302      	str	r3, [sp, #8]
 80081e4:	2301      	movs	r3, #1
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	f107 030e 	add.w	r3, r7, #14
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	2301      	movs	r3, #1
 80081f0:	2201      	movs	r2, #1
 80081f2:	21c0      	movs	r1, #192	@ 0xc0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7f9 ffc1 	bl	800217c <HAL_I2C_Mem_Write>
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af04      	add	r7, sp, #16
 8008208:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 800820a:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800820e:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008210:	f04f 33ff 	mov.w	r3, #4294967295
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	2304      	movs	r3, #4
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	2301      	movs	r3, #1
 8008222:	2214      	movs	r2, #20
 8008224:	21c0      	movs	r1, #192	@ 0xc0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f9 ffa8 	bl	800217c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 800822c:	f04f 33ff 	mov.w	r3, #4294967295
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	2304      	movs	r3, #4
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2301      	movs	r3, #1
 800823e:	2215      	movs	r2, #21
 8008240:	21c0      	movs	r1, #192	@ 0xc0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7f9 ff9a 	bl	800217c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008248:	f04f 33ff 	mov.w	r3, #4294967295
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	2304      	movs	r3, #4
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2301      	movs	r3, #1
 800825a:	2216      	movs	r2, #22
 800825c:	21c0      	movs	r1, #192	@ 0xc0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f9 ff8c 	bl	800217c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008264:	f04f 33ff 	mov.w	r3, #4294967295
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	2304      	movs	r3, #4
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2301      	movs	r3, #1
 8008276:	2217      	movs	r2, #23
 8008278:	21c0      	movs	r1, #192	@ 0xc0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 ff7e 	bl	800217c <HAL_I2C_Mem_Write>
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <TLC59116_Set_PWM>:

void TLC59116_Set_PWM(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af04      	add	r7, sp, #16
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
 8008294:	4613      	mov	r3, r2
 8008296:	70bb      	strb	r3, [r7, #2]
    if (channel > 15) return;
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d811      	bhi.n	80082c2 <TLC59116_Set_PWM+0x3a>
    uint8_t reg = 0x02 + channel;
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	3302      	adds	r3, #2
 80082a2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	2301      	movs	r3, #1
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	1cbb      	adds	r3, r7, #2
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	2301      	movs	r3, #1
 80082b8:	21c0      	movs	r1, #192	@ 0xc0
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7f9 ff5e 	bl	800217c <HAL_I2C_Mem_Write>
 80082c0:	e000      	b.n	80082c4 <TLC59116_Set_PWM+0x3c>
    if (channel > 15) return;
 80082c2:	bf00      	nop
}
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80082d6:	2304      	movs	r3, #4
 80082d8:	2203      	movs	r2, #3
 80082da:	2181      	movs	r1, #129	@ 0x81
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fc80 	bl	8009be2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80082e8:	2010      	movs	r0, #16
 80082ea:	f001 fd8d 	bl	8009e08 <USBD_static_malloc>
 80082ee:	4602      	mov	r2, r0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	e005      	b.n	8008310 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800830a:	2200      	movs	r2, #0
 800830c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008324:	2181      	movs	r1, #129	@ 0x81
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fc81 	bl	8009c2e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d009      	beq.n	8008350 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fd6c 	bl	8009e20 <USBD_static_free>
    pdev->pClassData = NULL;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800836c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008386:	2b00      	cmp	r3, #0
 8008388:	d045      	beq.n	8008416 <USBD_HID_Setup+0xba>
 800838a:	2b20      	cmp	r3, #32
 800838c:	f040 80d3 	bne.w	8008536 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	3b02      	subs	r3, #2
 8008396:	2b09      	cmp	r3, #9
 8008398:	d835      	bhi.n	8008406 <USBD_HID_Setup+0xaa>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <USBD_HID_Setup+0x44>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083f7 	.word	0x080083f7
 80083a4:	080083d7 	.word	0x080083d7
 80083a8:	08008407 	.word	0x08008407
 80083ac:	08008407 	.word	0x08008407
 80083b0:	08008407 	.word	0x08008407
 80083b4:	08008407 	.word	0x08008407
 80083b8:	08008407 	.word	0x08008407
 80083bc:	08008407 	.word	0x08008407
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083c9 	.word	0x080083c9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	885b      	ldrh	r3, [r3, #2]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	601a      	str	r2, [r3, #0]
          break;
 80083d4:	e01e      	b.n	8008414 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2201      	movs	r2, #1
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f941 	bl	8009664 <USBD_CtlSendData>
          break;
 80083e2:	e017      	b.n	8008414 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	885b      	ldrh	r3, [r3, #2]
 80083e8:	0a1b      	lsrs	r3, r3, #8
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	461a      	mov	r2, r3
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	605a      	str	r2, [r3, #4]
          break;
 80083f4:	e00e      	b.n	8008414 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3304      	adds	r3, #4
 80083fa:	2201      	movs	r2, #1
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f930 	bl	8009664 <USBD_CtlSendData>
          break;
 8008404:	e006      	b.n	8008414 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f8c1 	bl	8009590 <USBD_CtlError>
          ret = USBD_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	75fb      	strb	r3, [r7, #23]
          break;
 8008412:	bf00      	nop
      }
      break;
 8008414:	e096      	b.n	8008544 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b0b      	cmp	r3, #11
 800841c:	f200 8083 	bhi.w	8008526 <USBD_HID_Setup+0x1ca>
 8008420:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <USBD_HID_Setup+0xcc>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	08008459 	.word	0x08008459
 800842c:	08008527 	.word	0x08008527
 8008430:	08008527 	.word	0x08008527
 8008434:	08008527 	.word	0x08008527
 8008438:	08008527 	.word	0x08008527
 800843c:	08008527 	.word	0x08008527
 8008440:	08008481 	.word	0x08008481
 8008444:	08008527 	.word	0x08008527
 8008448:	08008527 	.word	0x08008527
 800844c:	08008527 	.word	0x08008527
 8008450:	080084d9 	.word	0x080084d9
 8008454:	08008501 	.word	0x08008501
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800845e:	2b03      	cmp	r3, #3
 8008460:	d107      	bne.n	8008472 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008462:	f107 030e 	add.w	r3, r7, #14
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f8fa 	bl	8009664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008470:	e060      	b.n	8008534 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f88b 	bl	8009590 <USBD_CtlError>
            ret = USBD_FAIL;
 800847a:	2302      	movs	r3, #2
 800847c:	75fb      	strb	r3, [r7, #23]
          break;
 800847e:	e059      	b.n	8008534 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	885b      	ldrh	r3, [r3, #2]
 8008484:	0a1b      	lsrs	r3, r3, #8
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b22      	cmp	r3, #34	@ 0x22
 800848a:	d108      	bne.n	800849e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	88db      	ldrh	r3, [r3, #6]
 8008490:	2b19      	cmp	r3, #25
 8008492:	bf28      	it	cs
 8008494:	2319      	movcs	r3, #25
 8008496:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008498:	4b2d      	ldr	r3, [pc, #180]	@ (8008550 <USBD_HID_Setup+0x1f4>)
 800849a:	61bb      	str	r3, [r7, #24]
 800849c:	e015      	b.n	80084ca <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	0a1b      	lsrs	r3, r3, #8
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b21      	cmp	r3, #33	@ 0x21
 80084a8:	d108      	bne.n	80084bc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80084aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008554 <USBD_HID_Setup+0x1f8>)
 80084ac:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	88db      	ldrh	r3, [r3, #6]
 80084b2:	2b09      	cmp	r3, #9
 80084b4:	bf28      	it	cs
 80084b6:	2309      	movcs	r3, #9
 80084b8:	83fb      	strh	r3, [r7, #30]
 80084ba:	e006      	b.n	80084ca <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 f866 	bl	8009590 <USBD_CtlError>
            ret = USBD_FAIL;
 80084c4:	2302      	movs	r3, #2
 80084c6:	75fb      	strb	r3, [r7, #23]
            break;
 80084c8:	e034      	b.n	8008534 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80084ca:	8bfb      	ldrh	r3, [r7, #30]
 80084cc:	461a      	mov	r2, r3
 80084ce:	69b9      	ldr	r1, [r7, #24]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 f8c7 	bl	8009664 <USBD_CtlSendData>
          break;
 80084d6:	e02d      	b.n	8008534 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d107      	bne.n	80084f2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3308      	adds	r3, #8
 80084e6:	2201      	movs	r2, #1
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 f8ba 	bl	8009664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084f0:	e020      	b.n	8008534 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f84b 	bl	8009590 <USBD_CtlError>
            ret = USBD_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	75fb      	strb	r3, [r7, #23]
          break;
 80084fe:	e019      	b.n	8008534 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008506:	2b03      	cmp	r3, #3
 8008508:	d106      	bne.n	8008518 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008516:	e00d      	b.n	8008534 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 f838 	bl	8009590 <USBD_CtlError>
            ret = USBD_FAIL;
 8008520:	2302      	movs	r3, #2
 8008522:	75fb      	strb	r3, [r7, #23]
          break;
 8008524:	e006      	b.n	8008534 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f831 	bl	8009590 <USBD_CtlError>
          ret = USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	75fb      	strb	r3, [r7, #23]
          break;
 8008532:	bf00      	nop
      }
      break;
 8008534:	e006      	b.n	8008544 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f829 	bl	8009590 <USBD_CtlError>
      ret = USBD_FAIL;
 800853e:	2302      	movs	r3, #2
 8008540:	75fb      	strb	r3, [r7, #23]
      break;
 8008542:	bf00      	nop
  }

  return ret;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200000c8 	.word	0x200000c8
 8008554:	200000b0 	.word	0x200000b0

08008558 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008574:	2b03      	cmp	r3, #3
 8008576:	d10c      	bne.n	8008592 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	7b1b      	ldrb	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d108      	bne.n	8008592 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2201      	movs	r2, #1
 8008584:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	2181      	movs	r1, #129	@ 0x81
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f001 fbf5 	bl	8009d7c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2222      	movs	r2, #34	@ 0x22
 80085a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80085aa:	4b03      	ldr	r3, [pc, #12]	@ (80085b8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20000044 	.word	0x20000044

080085bc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2222      	movs	r2, #34	@ 0x22
 80085c8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80085ca:	4b03      	ldr	r3, [pc, #12]	@ (80085d8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	20000068 	.word	0x20000068

080085dc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2222      	movs	r2, #34	@ 0x22
 80085e8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80085ea:	4b03      	ldr	r3, [pc, #12]	@ (80085f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	2000008c 	.word	0x2000008c

080085fc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800860e:	2200      	movs	r2, #0
 8008610:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr
	...

08008620 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220a      	movs	r2, #10
 800862c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	@ (800863c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	200000bc 	.word	0x200000bc

08008640 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008654:	2302      	movs	r3, #2
 8008656:	e01a      	b.n	800868e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	79fa      	ldrb	r2, [r7, #7]
 8008684:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f001 fa48 	bl	8009b1c <USBD_LL_Init>

  return USBD_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d006      	beq.n	80086b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
 80086b6:	e001      	b.n	80086bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80086b8:	2302      	movs	r3, #2
 80086ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f001 fa6b 	bl	8009bac <USBD_LL_Start>

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008700:	2302      	movs	r3, #2
 8008702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	4611      	mov	r1, r2
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3

  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fed7 	bl	800951e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2b02      	cmp	r3, #2
 8008792:	d016      	beq.n	80087c2 <USBD_LL_SetupStage+0x6a>
 8008794:	2b02      	cmp	r3, #2
 8008796:	d81c      	bhi.n	80087d2 <USBD_LL_SetupStage+0x7a>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBD_LL_SetupStage+0x4a>
 800879c:	2b01      	cmp	r3, #1
 800879e:	d008      	beq.n	80087b2 <USBD_LL_SetupStage+0x5a>
 80087a0:	e017      	b.n	80087d2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9ca 	bl	8008b44 <USBD_StdDevReq>
      break;
 80087b0:	e01a      	b.n	80087e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa2c 	bl	8008c18 <USBD_StdItfReq>
      break;
 80087c0:	e012      	b.n	80087e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa6c 	bl	8008ca8 <USBD_StdEPReq>
      break;
 80087d0:	e00a      	b.n	80087e8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80087d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 fa43 	bl	8009c6c <USBD_LL_StallEP>
      break;
 80087e6:	bf00      	nop
  }

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b086      	sub	sp, #24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	460b      	mov	r3, r1
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d14b      	bne.n	800889e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800880c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008814:	2b03      	cmp	r3, #3
 8008816:	d134      	bne.n	8008882 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d919      	bls.n	8008858 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	1ad2      	subs	r2, r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800883a:	429a      	cmp	r2, r3
 800883c:	d203      	bcs.n	8008846 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008842:	b29b      	uxth	r3, r3
 8008844:	e002      	b.n	800884c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800884a:	b29b      	uxth	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 ff35 	bl	80096c0 <USBD_CtlContinueRx>
 8008856:	e038      	b.n	80088ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800886a:	2b03      	cmp	r3, #3
 800886c:	d105      	bne.n	800887a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 ff32 	bl	80096e4 <USBD_CtlSendStatus>
 8008880:	e023      	b.n	80088ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008888:	2b05      	cmp	r3, #5
 800888a:	d11e      	bne.n	80088ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008894:	2100      	movs	r1, #0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f001 f9e8 	bl	8009c6c <USBD_LL_StallEP>
 800889c:	e015      	b.n	80088ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d108      	bne.n	80088c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	7afa      	ldrb	r2, [r7, #11]
 80088be:	4611      	mov	r1, r2
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	4798      	blx	r3
 80088c4:	e001      	b.n	80088ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088c6:	2302      	movs	r3, #2
 80088c8:	e000      	b.n	80088cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	460b      	mov	r3, r1
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d17f      	bne.n	80089e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3314      	adds	r3, #20
 80088ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d15c      	bne.n	80089b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	429a      	cmp	r2, r3
 8008902:	d915      	bls.n	8008930 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	1ad2      	subs	r2, r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	b29b      	uxth	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 febd 	bl	800969c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fa4a 	bl	8009dc2 <USBD_LL_PrepareReceive>
 800892e:	e04e      	b.n	80089ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	6912      	ldr	r2, [r2, #16]
 8008938:	fbb3 f1f2 	udiv	r1, r3, r2
 800893c:	fb01 f202 	mul.w	r2, r1, r2
 8008940:	1a9b      	subs	r3, r3, r2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11c      	bne.n	8008980 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800894e:	429a      	cmp	r2, r3
 8008950:	d316      	bcc.n	8008980 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800895c:	429a      	cmp	r2, r3
 800895e:	d20f      	bcs.n	8008980 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fe99 	bl	800969c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f001 fa22 	bl	8009dc2 <USBD_LL_PrepareReceive>
 800897e:	e026      	b.n	80089ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008992:	2b03      	cmp	r3, #3
 8008994:	d105      	bne.n	80089a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80089a2:	2180      	movs	r1, #128	@ 0x80
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f001 f961 	bl	8009c6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fead 	bl	800970a <USBD_CtlReceiveStatus>
 80089b0:	e00d      	b.n	80089ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d004      	beq.n	80089c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089c6:	2180      	movs	r1, #128	@ 0x80
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f001 f94f 	bl	8009c6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d11d      	bne.n	8008a14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fe81 	bl	80086e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80089e6:	e015      	b.n	8008a14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00d      	beq.n	8008a10 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d108      	bne.n	8008a10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	7afa      	ldrb	r2, [r7, #11]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	4798      	blx	r3
 8008a0e:	e001      	b.n	8008a14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e000      	b.n	8008a16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a26:	2340      	movs	r3, #64	@ 0x40
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f8d8 	bl	8009be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2240      	movs	r2, #64	@ 0x40
 8008a3e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a42:	2340      	movs	r3, #64	@ 0x40
 8008a44:	2200      	movs	r2, #0
 8008a46:	2180      	movs	r1, #128	@ 0x80
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f8ca 	bl	8009be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2240      	movs	r2, #64	@ 0x40
 8008a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6852      	ldr	r2, [r2, #4]
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	4611      	mov	r1, r2
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
  }

  return USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr

08008abe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr

08008ae6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	d105      	bne.n	8008b04 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr

08008b10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d10b      	bne.n	8008b3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d005      	beq.n	8008b6a <USBD_StdDevReq+0x26>
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d84f      	bhi.n	8008c02 <USBD_StdDevReq+0xbe>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <USBD_StdDevReq+0x36>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d14b      	bne.n	8008c02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
      break;
 8008b78:	e048      	b.n	8008c0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d839      	bhi.n	8008bf6 <USBD_StdDevReq+0xb2>
 8008b82:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <USBD_StdDevReq+0x44>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	08008bf7 	.word	0x08008bf7
 8008b94:	08008be3 	.word	0x08008be3
 8008b98:	08008bf7 	.word	0x08008bf7
 8008b9c:	08008bbb 	.word	0x08008bbb
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bf7 	.word	0x08008bf7
 8008ba8:	08008bcf 	.word	0x08008bcf
 8008bac:	08008bc5 	.word	0x08008bc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9dc 	bl	8008f70 <USBD_GetDescriptor>
          break;
 8008bb8:	e022      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fb3f 	bl	8009240 <USBD_SetAddress>
          break;
 8008bc2:	e01d      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fb7e 	bl	80092c8 <USBD_SetConfig>
          break;
 8008bcc:	e018      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc07 	bl	80093e4 <USBD_GetConfig>
          break;
 8008bd6:	e013      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fc37 	bl	800944e <USBD_GetStatus>
          break;
 8008be0:	e00e      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc65 	bl	80094b4 <USBD_SetFeature>
          break;
 8008bea:	e009      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc74 	bl	80094dc <USBD_ClrFeature>
          break;
 8008bf4:	e004      	b.n	8008c00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fcc9 	bl	8009590 <USBD_CtlError>
          break;
 8008bfe:	bf00      	nop
      }
      break;
 8008c00:	e004      	b.n	8008c0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fcc3 	bl	8009590 <USBD_CtlError>
      break;
 8008c0a:	bf00      	nop
  }

  return ret;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop

08008c18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c2e:	2b40      	cmp	r3, #64	@ 0x40
 8008c30:	d005      	beq.n	8008c3e <USBD_StdItfReq+0x26>
 8008c32:	2b40      	cmp	r3, #64	@ 0x40
 8008c34:	d82e      	bhi.n	8008c94 <USBD_StdItfReq+0x7c>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <USBD_StdItfReq+0x26>
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d12a      	bne.n	8008c94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c44:	3b01      	subs	r3, #1
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d81d      	bhi.n	8008c86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d813      	bhi.n	8008c7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d110      	bne.n	8008c90 <USBD_StdItfReq+0x78>
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10d      	bne.n	8008c90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fd35 	bl	80096e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c7a:	e009      	b.n	8008c90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc86 	bl	8009590 <USBD_CtlError>
          break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc81 	bl	8009590 <USBD_CtlError>
          break;
 8008c8e:	e000      	b.n	8008c92 <USBD_StdItfReq+0x7a>
          break;
 8008c90:	bf00      	nop
      }
      break;
 8008c92:	e004      	b.n	8008c9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fc7a 	bl	8009590 <USBD_CtlError>
      break;
 8008c9c:	bf00      	nop
  }

  return USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	889b      	ldrh	r3, [r3, #4]
 8008cba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cc4:	2b40      	cmp	r3, #64	@ 0x40
 8008cc6:	d007      	beq.n	8008cd8 <USBD_StdEPReq+0x30>
 8008cc8:	2b40      	cmp	r3, #64	@ 0x40
 8008cca:	f200 8146 	bhi.w	8008f5a <USBD_StdEPReq+0x2b2>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <USBD_StdEPReq+0x40>
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	f040 8141 	bne.w	8008f5a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
      break;
 8008ce6:	e13d      	b.n	8008f64 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d10a      	bne.n	8008d0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	e12d      	b.n	8008f66 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d007      	beq.n	8008d22 <USBD_StdEPReq+0x7a>
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	f300 811b 	bgt.w	8008f4e <USBD_StdEPReq+0x2a6>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d072      	beq.n	8008e02 <USBD_StdEPReq+0x15a>
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d03a      	beq.n	8008d96 <USBD_StdEPReq+0xee>
 8008d20:	e115      	b.n	8008f4e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d002      	beq.n	8008d32 <USBD_StdEPReq+0x8a>
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d015      	beq.n	8008d5c <USBD_StdEPReq+0xb4>
 8008d30:	e02b      	b.n	8008d8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <USBD_StdEPReq+0xaa>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d009      	beq.n	8008d52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 ff92 	bl	8009c6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d48:	2180      	movs	r1, #128	@ 0x80
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 ff8e 	bl	8009c6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d50:	e020      	b.n	8008d94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fc1b 	bl	8009590 <USBD_CtlError>
              break;
 8008d5a:	e01b      	b.n	8008d94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885b      	ldrh	r3, [r3, #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10e      	bne.n	8008d82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <USBD_StdEPReq+0xda>
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b80      	cmp	r3, #128	@ 0x80
 8008d6e:	d008      	beq.n	8008d82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	88db      	ldrh	r3, [r3, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 ff75 	bl	8009c6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fcae 	bl	80096e4 <USBD_CtlSendStatus>

              break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fbff 	bl	8009590 <USBD_CtlError>
              break;
 8008d92:	bf00      	nop
          }
          break;
 8008d94:	e0e0      	b.n	8008f58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d002      	beq.n	8008da6 <USBD_StdEPReq+0xfe>
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d015      	beq.n	8008dd0 <USBD_StdEPReq+0x128>
 8008da4:	e026      	b.n	8008df4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00c      	beq.n	8008dc6 <USBD_StdEPReq+0x11e>
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b80      	cmp	r3, #128	@ 0x80
 8008db0:	d009      	beq.n	8008dc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 ff58 	bl	8009c6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008dbc:	2180      	movs	r1, #128	@ 0x80
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 ff54 	bl	8009c6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dc4:	e01c      	b.n	8008e00 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbe1 	bl	8009590 <USBD_CtlError>
              break;
 8008dce:	e017      	b.n	8008e00 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	885b      	ldrh	r3, [r3, #2]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d112      	bne.n	8008dfe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 ff5f 	bl	8009caa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fc79 	bl	80096e4 <USBD_CtlSendStatus>
              }
              break;
 8008df2:	e004      	b.n	8008dfe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fbca 	bl	8009590 <USBD_CtlError>
              break;
 8008dfc:	e000      	b.n	8008e00 <USBD_StdEPReq+0x158>
              break;
 8008dfe:	bf00      	nop
          }
          break;
 8008e00:	e0aa      	b.n	8008f58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d002      	beq.n	8008e12 <USBD_StdEPReq+0x16a>
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d032      	beq.n	8008e76 <USBD_StdEPReq+0x1ce>
 8008e10:	e097      	b.n	8008f42 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <USBD_StdEPReq+0x180>
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b80      	cmp	r3, #128	@ 0x80
 8008e1c:	d004      	beq.n	8008e28 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fbb5 	bl	8009590 <USBD_CtlError>
                break;
 8008e26:	e091      	b.n	8008f4c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da0b      	bge.n	8008e48 <USBD_StdEPReq+0x1a0>
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	3310      	adds	r3, #16
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4413      	add	r3, r2
 8008e44:	3304      	adds	r3, #4
 8008e46:	e00b      	b.n	8008e60 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fbf8 	bl	8009664 <USBD_CtlSendData>
              break;
 8008e74:	e06a      	b.n	8008f4c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da11      	bge.n	8008ea2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3318      	adds	r3, #24
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d117      	bne.n	8008ec8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fb78 	bl	8009590 <USBD_CtlError>
                  break;
 8008ea0:	e054      	b.n	8008f4c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d104      	bne.n	8008ec8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fb65 	bl	8009590 <USBD_CtlError>
                  break;
 8008ec6:	e041      	b.n	8008f4c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	da0b      	bge.n	8008ee8 <USBD_StdEPReq+0x240>
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3310      	adds	r3, #16
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	e00b      	b.n	8008f00 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	3304      	adds	r3, #4
 8008f00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <USBD_StdEPReq+0x266>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b80      	cmp	r3, #128	@ 0x80
 8008f0c:	d103      	bne.n	8008f16 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e00e      	b.n	8008f34 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fee4 	bl	8009ce8 <USBD_LL_IsStallEP>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	e002      	b.n	8008f34 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2202      	movs	r2, #2
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb92 	bl	8009664 <USBD_CtlSendData>
              break;
 8008f40:	e004      	b.n	8008f4c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb23 	bl	8009590 <USBD_CtlError>
              break;
 8008f4a:	bf00      	nop
          }
          break;
 8008f4c:	e004      	b.n	8008f58 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fb1d 	bl	8009590 <USBD_CtlError>
          break;
 8008f56:	bf00      	nop
      }
      break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fb17 	bl	8009590 <USBD_CtlError>
      break;
 8008f62:	bf00      	nop
  }

  return ret;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	885b      	ldrh	r3, [r3, #2]
 8008f8a:	0a1b      	lsrs	r3, r3, #8
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	2b06      	cmp	r3, #6
 8008f92:	f200 8128 	bhi.w	80091e6 <USBD_GetDescriptor+0x276>
 8008f96:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <USBD_GetDescriptor+0x2c>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	08008fd1 	.word	0x08008fd1
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	080091e7 	.word	0x080091e7
 8008fac:	080091e7 	.word	0x080091e7
 8008fb0:	08009187 	.word	0x08009187
 8008fb4:	080091b3 	.word	0x080091b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
      break;
 8008fce:	e112      	b.n	80091f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7c1b      	ldrb	r3, [r3, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10d      	bne.n	8008ff4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	f107 0208 	add.w	r2, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	2202      	movs	r2, #2
 8008ff0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ff2:	e100      	b.n	80091f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	f107 0208 	add.w	r2, r7, #8
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	2202      	movs	r2, #2
 800900c:	701a      	strb	r2, [r3, #0]
      break;
 800900e:	e0f2      	b.n	80091f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	885b      	ldrh	r3, [r3, #2]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b05      	cmp	r3, #5
 8009018:	f200 80ac 	bhi.w	8009174 <USBD_GetDescriptor+0x204>
 800901c:	a201      	add	r2, pc, #4	@ (adr r2, 8009024 <USBD_GetDescriptor+0xb4>)
 800901e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009022:	bf00      	nop
 8009024:	0800903d 	.word	0x0800903d
 8009028:	08009071 	.word	0x08009071
 800902c:	080090a5 	.word	0x080090a5
 8009030:	080090d9 	.word	0x080090d9
 8009034:	0800910d 	.word	0x0800910d
 8009038:	08009141 	.word	0x08009141
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905e:	e091      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa94 	bl	8009590 <USBD_CtlError>
            err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
          break;
 800906e:	e089      	b.n	8009184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7c12      	ldrb	r2, [r2, #16]
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009092:	e077      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa7a 	bl	8009590 <USBD_CtlError>
            err++;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	3301      	adds	r3, #1
 80090a0:	72fb      	strb	r3, [r7, #11]
          break;
 80090a2:	e06f      	b.n	8009184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	7c12      	ldrb	r2, [r2, #16]
 80090bc:	f107 0108 	add.w	r1, r7, #8
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
 80090c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c6:	e05d      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa60 	bl	8009590 <USBD_CtlError>
            err++;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	3301      	adds	r3, #1
 80090d4:	72fb      	strb	r3, [r7, #11]
          break;
 80090d6:	e055      	b.n	8009184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	7c12      	ldrb	r2, [r2, #16]
 80090f0:	f107 0108 	add.w	r1, r7, #8
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
 80090f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fa:	e043      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa46 	bl	8009590 <USBD_CtlError>
            err++;
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	3301      	adds	r3, #1
 8009108:	72fb      	strb	r3, [r7, #11]
          break;
 800910a:	e03b      	b.n	8009184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	7c12      	ldrb	r2, [r2, #16]
 8009124:	f107 0108 	add.w	r1, r7, #8
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
 800912c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800912e:	e029      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa2c 	bl	8009590 <USBD_CtlError>
            err++;
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	3301      	adds	r3, #1
 800913c:	72fb      	strb	r3, [r7, #11]
          break;
 800913e:	e021      	b.n	8009184 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	7c12      	ldrb	r2, [r2, #16]
 8009158:	f107 0108 	add.w	r1, r7, #8
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009162:	e00f      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa12 	bl	8009590 <USBD_CtlError>
            err++;
 800916c:	7afb      	ldrb	r3, [r7, #11]
 800916e:	3301      	adds	r3, #1
 8009170:	72fb      	strb	r3, [r7, #11]
          break;
 8009172:	e007      	b.n	8009184 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa0a 	bl	8009590 <USBD_CtlError>
          err++;
 800917c:	7afb      	ldrb	r3, [r7, #11]
 800917e:	3301      	adds	r3, #1
 8009180:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009182:	e038      	b.n	80091f6 <USBD_GetDescriptor+0x286>
 8009184:	e037      	b.n	80091f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	7c1b      	ldrb	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009196:	f107 0208 	add.w	r2, r7, #8
 800919a:	4610      	mov	r0, r2
 800919c:	4798      	blx	r3
 800919e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a0:	e029      	b.n	80091f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9f3 	bl	8009590 <USBD_CtlError>
        err++;
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	3301      	adds	r3, #1
 80091ae:	72fb      	strb	r3, [r7, #11]
      break;
 80091b0:	e021      	b.n	80091f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7c1b      	ldrb	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10d      	bne.n	80091d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	f107 0208 	add.w	r2, r7, #8
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
 80091ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3301      	adds	r3, #1
 80091d0:	2207      	movs	r2, #7
 80091d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091d4:	e00f      	b.n	80091f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9d9 	bl	8009590 <USBD_CtlError>
        err++;
 80091de:	7afb      	ldrb	r3, [r7, #11]
 80091e0:	3301      	adds	r3, #1
 80091e2:	72fb      	strb	r3, [r7, #11]
      break;
 80091e4:	e007      	b.n	80091f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f9d1 	bl	8009590 <USBD_CtlError>
      err++;
 80091ee:	7afb      	ldrb	r3, [r7, #11]
 80091f0:	3301      	adds	r3, #1
 80091f2:	72fb      	strb	r3, [r7, #11]
      break;
 80091f4:	bf00      	nop
  }

  if (err != 0U)
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11c      	bne.n	8009236 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091fc:	893b      	ldrh	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d011      	beq.n	8009226 <USBD_GetDescriptor+0x2b6>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00d      	beq.n	8009226 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	88da      	ldrh	r2, [r3, #6]
 800920e:	893b      	ldrh	r3, [r7, #8]
 8009210:	4293      	cmp	r3, r2
 8009212:	bf28      	it	cs
 8009214:	4613      	movcs	r3, r2
 8009216:	b29b      	uxth	r3, r3
 8009218:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800921a:	893b      	ldrh	r3, [r7, #8]
 800921c:	461a      	mov	r2, r3
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fa1f 	bl	8009664 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa58 	bl	80096e4 <USBD_CtlSendStatus>
 8009234:	e000      	b.n	8009238 <USBD_GetDescriptor+0x2c8>
    return;
 8009236:	bf00      	nop
    }
  }
}
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop

08009240 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d130      	bne.n	80092b4 <USBD_SetAddress+0x74>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d12c      	bne.n	80092b4 <USBD_SetAddress+0x74>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	885b      	ldrh	r3, [r3, #2]
 800925e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009260:	d828      	bhi.n	80092b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800926c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009274:	2b03      	cmp	r3, #3
 8009276:	d104      	bne.n	8009282 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f988 	bl	8009590 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009280:	e01d      	b.n	80092be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7bfa      	ldrb	r2, [r7, #15]
 8009286:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fd55 	bl	8009d3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa25 	bl	80096e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a8:	e009      	b.n	80092be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b2:	e004      	b.n	80092be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f96a 	bl	8009590 <USBD_CtlError>
  }
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	4b41      	ldr	r3, [pc, #260]	@ (80093e0 <USBD_SetConfig+0x118>)
 80092da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092dc:	4b40      	ldr	r3, [pc, #256]	@ (80093e0 <USBD_SetConfig+0x118>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d904      	bls.n	80092ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f952 	bl	8009590 <USBD_CtlError>
 80092ec:	e075      	b.n	80093da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d002      	beq.n	80092fe <USBD_SetConfig+0x36>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d023      	beq.n	8009344 <USBD_SetConfig+0x7c>
 80092fc:	e062      	b.n	80093c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092fe:	4b38      	ldr	r3, [pc, #224]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01a      	beq.n	800933c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009306:	4b36      	ldr	r3, [pc, #216]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2203      	movs	r2, #3
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009318:	4b31      	ldr	r3, [pc, #196]	@ (80093e0 <USBD_SetConfig+0x118>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff f9e8 	bl	80086f4 <USBD_SetClassConfig>
 8009324:	4603      	mov	r3, r0
 8009326:	2b02      	cmp	r3, #2
 8009328:	d104      	bne.n	8009334 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f92f 	bl	8009590 <USBD_CtlError>
            return;
 8009332:	e052      	b.n	80093da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9d5 	bl	80096e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800933a:	e04e      	b.n	80093da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f9d1 	bl	80096e4 <USBD_CtlSendStatus>
        break;
 8009342:	e04a      	b.n	80093da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009344:	4b26      	ldr	r3, [pc, #152]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d112      	bne.n	8009372 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009354:	4b22      	ldr	r3, [pc, #136]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800935e:	4b20      	ldr	r3, [pc, #128]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff f9e4 	bl	8008732 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f9ba 	bl	80096e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009370:	e033      	b.n	80093da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009372:	4b1b      	ldr	r3, [pc, #108]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d01d      	beq.n	80093bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff f9d2 	bl	8008732 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800938e:	4b14      	ldr	r3, [pc, #80]	@ (80093e0 <USBD_SetConfig+0x118>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009398:	4b11      	ldr	r3, [pc, #68]	@ (80093e0 <USBD_SetConfig+0x118>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff f9a8 	bl	80086f4 <USBD_SetClassConfig>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d104      	bne.n	80093b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8ef 	bl	8009590 <USBD_CtlError>
            return;
 80093b2:	e012      	b.n	80093da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f995 	bl	80096e4 <USBD_CtlSendStatus>
        break;
 80093ba:	e00e      	b.n	80093da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f991 	bl	80096e4 <USBD_CtlSendStatus>
        break;
 80093c2:	e00a      	b.n	80093da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8e2 	bl	8009590 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80093cc:	4b04      	ldr	r3, [pc, #16]	@ (80093e0 <USBD_SetConfig+0x118>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff f9ad 	bl	8008732 <USBD_ClrClassConfig>
        break;
 80093d8:	bf00      	nop
    }
  }
}
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000350 	.word	0x20000350

080093e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	88db      	ldrh	r3, [r3, #6]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d004      	beq.n	8009400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8c9 	bl	8009590 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093fe:	e022      	b.n	8009446 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009406:	2b02      	cmp	r3, #2
 8009408:	dc02      	bgt.n	8009410 <USBD_GetConfig+0x2c>
 800940a:	2b00      	cmp	r3, #0
 800940c:	dc03      	bgt.n	8009416 <USBD_GetConfig+0x32>
 800940e:	e015      	b.n	800943c <USBD_GetConfig+0x58>
 8009410:	2b03      	cmp	r3, #3
 8009412:	d00b      	beq.n	800942c <USBD_GetConfig+0x48>
 8009414:	e012      	b.n	800943c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3308      	adds	r3, #8
 8009420:	2201      	movs	r2, #1
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f91d 	bl	8009664 <USBD_CtlSendData>
        break;
 800942a:	e00c      	b.n	8009446 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	2201      	movs	r2, #1
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f915 	bl	8009664 <USBD_CtlSendData>
        break;
 800943a:	e004      	b.n	8009446 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8a6 	bl	8009590 <USBD_CtlError>
        break;
 8009444:	bf00      	nop
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945e:	3b01      	subs	r3, #1
 8009460:	2b02      	cmp	r3, #2
 8009462:	d81e      	bhi.n	80094a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d004      	beq.n	8009476 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f88e 	bl	8009590 <USBD_CtlError>
        break;
 8009474:	e01a      	b.n	80094ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f043 0202 	orr.w	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	330c      	adds	r3, #12
 8009496:	2202      	movs	r2, #2
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8e2 	bl	8009664 <USBD_CtlSendData>
      break;
 80094a0:	e004      	b.n	80094ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f873 	bl	8009590 <USBD_CtlError>
      break;
 80094aa:	bf00      	nop
  }
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	885b      	ldrh	r3, [r3, #2]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d106      	bne.n	80094d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f908 	bl	80096e4 <USBD_CtlSendStatus>
  }
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ec:	3b01      	subs	r3, #1
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d80b      	bhi.n	800950a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d10c      	bne.n	8009514 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f8ee 	bl	80096e4 <USBD_CtlSendStatus>
      }
      break;
 8009508:	e004      	b.n	8009514 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f83f 	bl	8009590 <USBD_CtlError>
      break;
 8009512:	e000      	b.n	8009516 <USBD_ClrFeature+0x3a>
      break;
 8009514:	bf00      	nop
  }
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	785a      	ldrb	r2, [r3, #1]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	3302      	adds	r3, #2
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	3303      	adds	r3, #3
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	b29b      	uxth	r3, r3
 800954a:	4413      	add	r3, r2
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	3304      	adds	r3, #4
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	3305      	adds	r3, #5
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	b29b      	uxth	r3, r3
 8009564:	4413      	add	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	3306      	adds	r3, #6
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	3307      	adds	r3, #7
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	b29b      	uxth	r3, r3
 800957e:	4413      	add	r3, r2
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	80da      	strh	r2, [r3, #6]

}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr

08009590 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800959a:	2180      	movs	r1, #128	@ 0x80
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb65 	bl	8009c6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80095a2:	2100      	movs	r1, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fb61 	bl	8009c6c <USBD_LL_StallEP>
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d032      	beq.n	800962e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f834 	bl	8009636 <USBD_GetLen>
 80095ce:	4603      	mov	r3, r0
 80095d0:	3301      	adds	r3, #1
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	75fa      	strb	r2, [r7, #23]
 80095e2:	461a      	mov	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4413      	add	r3, r2
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	75fa      	strb	r2, [r7, #23]
 80095f4:	461a      	mov	r2, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4413      	add	r3, r2
 80095fa:	2203      	movs	r2, #3
 80095fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095fe:	e012      	b.n	8009626 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	60fa      	str	r2, [r7, #12]
 8009606:	7dfa      	ldrb	r2, [r7, #23]
 8009608:	1c51      	adds	r1, r2, #1
 800960a:	75f9      	strb	r1, [r7, #23]
 800960c:	4611      	mov	r1, r2
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	440a      	add	r2, r1
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	75fa      	strb	r2, [r7, #23]
 800961c:	461a      	mov	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e8      	bne.n	8009600 <USBD_GetString+0x4e>
    }
  }
}
 800962e:	bf00      	nop
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009642:	e005      	b.n	8009650 <USBD_GetLen+0x1a>
  {
    len++;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	3301      	adds	r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]
    buf++;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3301      	adds	r3, #1
 800964e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f5      	bne.n	8009644 <USBD_GetLen+0xe>
  }

  return len;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2202      	movs	r2, #2
 8009676:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800967a:	88fa      	ldrh	r2, [r7, #6]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009680:	88fa      	ldrh	r2, [r7, #6]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	2100      	movs	r1, #0
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fb75 	bl	8009d7c <USBD_LL_Transmit>

  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	2100      	movs	r1, #0
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fb63 	bl	8009d7c <USBD_LL_Transmit>

  return USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096ce:	88fb      	ldrh	r3, [r7, #6]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	2100      	movs	r1, #0
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fb74 	bl	8009dc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2204      	movs	r2, #4
 80096f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096f4:	2300      	movs	r3, #0
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fb3e 	bl	8009d7c <USBD_LL_Transmit>

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2205      	movs	r2, #5
 8009716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800971a:	2300      	movs	r3, #0
 800971c:	2200      	movs	r2, #0
 800971e:	2100      	movs	r1, #0
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fb4e 	bl	8009dc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009734:	2200      	movs	r2, #0
 8009736:	490e      	ldr	r1, [pc, #56]	@ (8009770 <MX_USB_DEVICE_Init+0x40>)
 8009738:	480e      	ldr	r0, [pc, #56]	@ (8009774 <MX_USB_DEVICE_Init+0x44>)
 800973a:	f7fe ff81 	bl	8008640 <USBD_Init>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009744:	f7f7 f9e0 	bl	8000b08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009748:	490b      	ldr	r1, [pc, #44]	@ (8009778 <MX_USB_DEVICE_Init+0x48>)
 800974a:	480a      	ldr	r0, [pc, #40]	@ (8009774 <MX_USB_DEVICE_Init+0x44>)
 800974c:	f7fe ffa3 	bl	8008696 <USBD_RegisterClass>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009756:	f7f7 f9d7 	bl	8000b08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800975a:	4806      	ldr	r0, [pc, #24]	@ (8009774 <MX_USB_DEVICE_Init+0x44>)
 800975c:	f7fe ffb4 	bl	80086c8 <USBD_Start>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009766:	f7f7 f9cf 	bl	8000b08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800976a:	bf00      	nop
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200000e4 	.word	0x200000e4
 8009774:	20000354 	.word	0x20000354
 8009778:	2000000c 	.word	0x2000000c

0800977c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2212      	movs	r2, #18
 800978c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800978e:	4b03      	ldr	r3, [pc, #12]	@ (800979c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000100 	.word	0x20000100

080097a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2204      	movs	r2, #4
 80097b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097b2:	4b03      	ldr	r3, [pc, #12]	@ (80097c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20000114 	.word	0x20000114

080097c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4907      	ldr	r1, [pc, #28]	@ (80097f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80097da:	4808      	ldr	r0, [pc, #32]	@ (80097fc <USBD_FS_ProductStrDescriptor+0x38>)
 80097dc:	f7ff fee9 	bl	80095b2 <USBD_GetString>
 80097e0:	e004      	b.n	80097ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4904      	ldr	r1, [pc, #16]	@ (80097f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80097e6:	4805      	ldr	r0, [pc, #20]	@ (80097fc <USBD_FS_ProductStrDescriptor+0x38>)
 80097e8:	f7ff fee3 	bl	80095b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097ec:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000618 	.word	0x20000618
 80097fc:	08009f10 	.word	0x08009f10

08009800 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	4904      	ldr	r1, [pc, #16]	@ (8009820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009810:	4804      	ldr	r0, [pc, #16]	@ (8009824 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009812:	f7ff fece 	bl	80095b2 <USBD_GetString>
  return USBD_StrDesc;
 8009816:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000618 	.word	0x20000618
 8009824:	08009f28 	.word	0x08009f28

08009828 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	221a      	movs	r2, #26
 8009838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800983a:	f000 f843 	bl	80098c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800983e:	4b02      	ldr	r3, [pc, #8]	@ (8009848 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000118 	.word	0x20000118

0800984c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	4907      	ldr	r1, [pc, #28]	@ (8009880 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009862:	4808      	ldr	r0, [pc, #32]	@ (8009884 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009864:	f7ff fea5 	bl	80095b2 <USBD_GetString>
 8009868:	e004      	b.n	8009874 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4904      	ldr	r1, [pc, #16]	@ (8009880 <USBD_FS_ConfigStrDescriptor+0x34>)
 800986e:	4805      	ldr	r0, [pc, #20]	@ (8009884 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009870:	f7ff fe9f 	bl	80095b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	@ (8009880 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000618 	.word	0x20000618
 8009884:	08009f3c 	.word	0x08009f3c

08009888 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d105      	bne.n	80098a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4907      	ldr	r1, [pc, #28]	@ (80098bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800989e:	4808      	ldr	r0, [pc, #32]	@ (80098c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098a0:	f7ff fe87 	bl	80095b2 <USBD_GetString>
 80098a4:	e004      	b.n	80098b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	4904      	ldr	r1, [pc, #16]	@ (80098bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098aa:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098ac:	f7ff fe81 	bl	80095b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b0:	4b02      	ldr	r3, [pc, #8]	@ (80098bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000618 	.word	0x20000618
 80098c0:	08009f48 	.word	0x08009f48

080098c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <Get_SerialNum+0x44>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098d0:	4b0e      	ldr	r3, [pc, #56]	@ (800990c <Get_SerialNum+0x48>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <Get_SerialNum+0x4c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4413      	add	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d009      	beq.n	80098fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098ea:	2208      	movs	r2, #8
 80098ec:	4909      	ldr	r1, [pc, #36]	@ (8009914 <Get_SerialNum+0x50>)
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f814 	bl	800991c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098f4:	2204      	movs	r2, #4
 80098f6:	4908      	ldr	r1, [pc, #32]	@ (8009918 <Get_SerialNum+0x54>)
 80098f8:	68b8      	ldr	r0, [r7, #8]
 80098fa:	f000 f80f 	bl	800991c <IntToUnicode>
  }
}
 80098fe:	bf00      	nop
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	1ffff7e8 	.word	0x1ffff7e8
 800990c:	1ffff7ec 	.word	0x1ffff7ec
 8009910:	1ffff7f0 	.word	0x1ffff7f0
 8009914:	2000011a 	.word	0x2000011a
 8009918:	2000012a 	.word	0x2000012a

0800991c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	4613      	mov	r3, r2
 8009928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]
 8009932:	e027      	b.n	8009984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	0f1b      	lsrs	r3, r3, #28
 8009938:	2b09      	cmp	r3, #9
 800993a:	d80b      	bhi.n	8009954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	0f1b      	lsrs	r3, r3, #28
 8009940:	b2da      	uxtb	r2, r3
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4619      	mov	r1, r3
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	440b      	add	r3, r1
 800994c:	3230      	adds	r2, #48	@ 0x30
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	e00a      	b.n	800996a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	0f1b      	lsrs	r3, r3, #28
 8009958:	b2da      	uxtb	r2, r3
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4619      	mov	r1, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	440b      	add	r3, r1
 8009964:	3237      	adds	r2, #55	@ 0x37
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	3301      	adds	r3, #1
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	3301      	adds	r3, #1
 8009982:	75fb      	strb	r3, [r7, #23]
 8009984:	7dfa      	ldrb	r2, [r7, #23]
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	429a      	cmp	r2, r3
 800998a:	d3d3      	bcc.n	8009934 <IntToUnicode+0x18>
  }
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr

08009998 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a0d      	ldr	r2, [pc, #52]	@ (80099dc <HAL_PCD_MspInit+0x44>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d113      	bne.n	80099d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099aa:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <HAL_PCD_MspInit+0x48>)
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4a0c      	ldr	r2, [pc, #48]	@ (80099e0 <HAL_PCD_MspInit+0x48>)
 80099b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099b4:	61d3      	str	r3, [r2, #28]
 80099b6:	4b0a      	ldr	r3, [pc, #40]	@ (80099e0 <HAL_PCD_MspInit+0x48>)
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80099c2:	2200      	movs	r2, #0
 80099c4:	2100      	movs	r1, #0
 80099c6:	2014      	movs	r0, #20
 80099c8:	f7f8 f8a9 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80099cc:	2014      	movs	r0, #20
 80099ce:	f7f8 f8c2 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	40005c00 	.word	0x40005c00
 80099e0:	40021000 	.word	0x40021000

080099e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80099f8:	4619      	mov	r1, r3
 80099fa:	4610      	mov	r0, r2
 80099fc:	f7fe feac 	bl	8008758 <USBD_LL_SetupStage>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	440b      	add	r3, r1
 8009a28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7fe fede 	bl	80087f2 <USBD_LL_DataOutStage>
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	440b      	add	r3, r1
 8009a5e:	3324      	adds	r3, #36	@ 0x24
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	4619      	mov	r1, r3
 8009a66:	f7fe ff35 	bl	80088d4 <USBD_LL_DataInStage>
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff f845 	bl	8008b10 <USBD_LL_SOF>
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a96:	2301      	movs	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	799b      	ldrb	r3, [r3, #6]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d001      	beq.n	8009aa6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009aa2:	f7f7 f831 	bl	8000b08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aac:	7bfa      	ldrb	r2, [r7, #15]
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fff5 	bl	8008aa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe ffae 	bl	8008a1e <USBD_LL_Reset>
}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe ffef 	bl	8008abe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7a9b      	ldrb	r3, [r3, #10]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ae8:	4b04      	ldr	r3, [pc, #16]	@ (8009afc <HAL_PCD_SuspendCallback+0x30>)
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	4a03      	ldr	r2, [pc, #12]	@ (8009afc <HAL_PCD_SuspendCallback+0x30>)
 8009aee:	f043 0306 	orr.w	r3, r3, #6
 8009af2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed00 	.word	0xe000ed00

08009b00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe ffe9 	bl	8008ae6 <USBD_LL_Resume>
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b24:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b30:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b34:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b36:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba8 <USBD_LL_Init+0x8c>)
 8009b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b40:	4b18      	ldr	r3, [pc, #96]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b42:	2202      	movs	r2, #2
 8009b44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b46:	4b17      	ldr	r3, [pc, #92]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b4c:	4b15      	ldr	r3, [pc, #84]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b52:	4b14      	ldr	r3, [pc, #80]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b58:	4812      	ldr	r0, [pc, #72]	@ (8009ba4 <USBD_LL_Init+0x88>)
 8009b5a:	f7f9 fa30 	bl	8002fbe <HAL_PCD_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b64:	f7f6 ffd0 	bl	8000b08 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b6e:	2318      	movs	r3, #24
 8009b70:	2200      	movs	r2, #0
 8009b72:	2100      	movs	r1, #0
 8009b74:	f7fa ff2a 	bl	80049cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b7e:	2358      	movs	r3, #88	@ 0x58
 8009b80:	2200      	movs	r2, #0
 8009b82:	2180      	movs	r1, #128	@ 0x80
 8009b84:	f7fa ff22 	bl	80049cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b92:	2200      	movs	r2, #0
 8009b94:	2181      	movs	r1, #129	@ 0x81
 8009b96:	f7fa ff19 	bl	80049cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000818 	.word	0x20000818
 8009ba8:	40005c00 	.word	0x40005c00

08009bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7f9 faf1 	bl	80031aa <HAL_PCD_Start>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f93a 	bl	8009e48 <USBD_Get_USB_Status>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	4608      	mov	r0, r1
 8009bec:	4611      	mov	r1, r2
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	70fb      	strb	r3, [r7, #3]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70bb      	strb	r3, [r7, #2]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c0a:	78bb      	ldrb	r3, [r7, #2]
 8009c0c:	883a      	ldrh	r2, [r7, #0]
 8009c0e:	78f9      	ldrb	r1, [r7, #3]
 8009c10:	f7f9 fc45 	bl	800349e <HAL_PCD_EP_Open>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 f914 	bl	8009e48 <USBD_Get_USB_Status>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7f9 fc83 	bl	8003558 <HAL_PCD_EP_Close>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 f8f5 	bl	8009e48 <USBD_Get_USB_Status>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	4611      	mov	r1, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7f9 fd14 	bl	80036b8 <HAL_PCD_EP_SetStall>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f8d6 	bl	8009e48 <USBD_Get_USB_Status>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7f9 fd55 	bl	8003778 <HAL_PCD_EP_ClrStall>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 f8b7 	bl	8009e48 <USBD_Get_USB_Status>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da0b      	bge.n	8009d1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d0a:	68f9      	ldr	r1, [r7, #12]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	440b      	add	r3, r1
 8009d16:	3312      	adds	r3, #18
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	e00b      	b.n	8009d34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009d32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr

08009d3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7f9 fb7a 	bl	8003456 <HAL_PCD_SetAddress>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 f86d 	bl	8009e48 <USBD_Get_USB_Status>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	461a      	mov	r2, r3
 8009d88:	460b      	mov	r3, r1
 8009d8a:	72fb      	strb	r3, [r7, #11]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d9e:	893b      	ldrh	r3, [r7, #8]
 8009da0:	7af9      	ldrb	r1, [r7, #11]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	f7f9 fc51 	bl	800364a <HAL_PCD_EP_Transmit>
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f84a 	bl	8009e48 <USBD_Get_USB_Status>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009db8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b086      	sub	sp, #24
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	460b      	mov	r3, r1
 8009dd0:	72fb      	strb	r3, [r7, #11]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009de4:	893b      	ldrh	r3, [r7, #8]
 8009de6:	7af9      	ldrb	r1, [r7, #11]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	f7f9 fbfd 	bl	80035e8 <HAL_PCD_EP_Receive>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f827 	bl	8009e48 <USBD_Get_USB_Status>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e10:	4b02      	ldr	r3, [pc, #8]	@ (8009e1c <USBD_static_malloc+0x14>)
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bc80      	pop	{r7}
 8009e1a:	4770      	bx	lr
 8009e1c:	20000af0 	.word	0x20000af0

08009e20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr

08009e32 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr

08009e48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d817      	bhi.n	8009e8c <USBD_Get_USB_Status+0x44>
 8009e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <USBD_Get_USB_Status+0x1c>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e75 	.word	0x08009e75
 8009e68:	08009e7b 	.word	0x08009e7b
 8009e6c:	08009e81 	.word	0x08009e81
 8009e70:	08009e87 	.word	0x08009e87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
    break;
 8009e78:	e00b      	b.n	8009e92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7e:	e008      	b.n	8009e92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e80:	2301      	movs	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
    break;
 8009e84:	e005      	b.n	8009e92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e86:	2302      	movs	r3, #2
 8009e88:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8a:	e002      	b.n	8009e92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e90:	bf00      	nop
  }
  return usb_status;
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop

08009ea0 <memset>:
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	4402      	add	r2, r0
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d100      	bne.n	8009eaa <memset+0xa>
 8009ea8:	4770      	bx	lr
 8009eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009eae:	e7f9      	b.n	8009ea4 <memset+0x4>

08009eb0 <__libc_init_array>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	4d0c      	ldr	r5, [pc, #48]	@ (8009ee8 <__libc_init_array+0x38>)
 8009eb6:	4c0d      	ldr	r4, [pc, #52]	@ (8009eec <__libc_init_array+0x3c>)
 8009eb8:	1b64      	subs	r4, r4, r5
 8009eba:	10a4      	asrs	r4, r4, #2
 8009ebc:	42a6      	cmp	r6, r4
 8009ebe:	d109      	bne.n	8009ed4 <__libc_init_array+0x24>
 8009ec0:	f000 f81a 	bl	8009ef8 <_init>
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	4d0a      	ldr	r5, [pc, #40]	@ (8009ef0 <__libc_init_array+0x40>)
 8009ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8009ef4 <__libc_init_array+0x44>)
 8009eca:	1b64      	subs	r4, r4, r5
 8009ecc:	10a4      	asrs	r4, r4, #2
 8009ece:	42a6      	cmp	r6, r4
 8009ed0:	d105      	bne.n	8009ede <__libc_init_array+0x2e>
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed8:	4798      	blx	r3
 8009eda:	3601      	adds	r6, #1
 8009edc:	e7ee      	b.n	8009ebc <__libc_init_array+0xc>
 8009ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee2:	4798      	blx	r3
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	e7f2      	b.n	8009ece <__libc_init_array+0x1e>
 8009ee8:	08009f98 	.word	0x08009f98
 8009eec:	08009f98 	.word	0x08009f98
 8009ef0:	08009f98 	.word	0x08009f98
 8009ef4:	08009f9c 	.word	0x08009f9c

08009ef8 <_init>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	bf00      	nop
 8009efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efe:	bc08      	pop	{r3}
 8009f00:	469e      	mov	lr, r3
 8009f02:	4770      	bx	lr

08009f04 <_fini>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	bf00      	nop
 8009f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0a:	bc08      	pop	{r3}
 8009f0c:	469e      	mov	lr, r3
 8009f0e:	4770      	bx	lr
