
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009714  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  0000b164  2**0
                  CONTENTS
  4 .ARM          00000000  08009884  08009884  0000b164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009884  08009884  0000b164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009884  08009884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009888  08009888  0000a888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800988c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  20000164  080099f0  0000b164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  080099f0  0000bad0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fad  00000000  00000000  0000b18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c4  00000000  00000000  0001f13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00022400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f02  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa54  00000000  00000000  0002467a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018285  00000000  00000000  0003f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f9c  00000000  00000000  00057353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb2ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  000eb334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f04dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08009808 	.word	0x08009808

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08009808 	.word	0x08009808

0800014c <MCP23017_Init>:
volatile short pulse2=0;

uint8_t click_report[REPORT_SIZE] = {0};

void MCP23017_Init()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
    uint8_t iodir = 0xFF; // Tất cả chân input
 8000152:	23ff      	movs	r3, #255	@ 0xff
 8000154:	71fb      	strb	r3, [r7, #7]

    // Cấu hình cả PORTA và PORTB là input
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, IODIRA_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	9302      	str	r3, [sp, #8]
 800015c:	2301      	movs	r3, #1
 800015e:	9301      	str	r3, [sp, #4]
 8000160:	1dfb      	adds	r3, r7, #7
 8000162:	9300      	str	r3, [sp, #0]
 8000164:	2301      	movs	r3, #1
 8000166:	2200      	movs	r2, #0
 8000168:	2140      	movs	r1, #64	@ 0x40
 800016a:	480a      	ldr	r0, [pc, #40]	@ (8000194 <MCP23017_Init+0x48>)
 800016c:	f001 fc16 	bl	800199c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, IODIRB_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 8000170:	f04f 33ff 	mov.w	r3, #4294967295
 8000174:	9302      	str	r3, [sp, #8]
 8000176:	2301      	movs	r3, #1
 8000178:	9301      	str	r3, [sp, #4]
 800017a:	1dfb      	adds	r3, r7, #7
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2301      	movs	r3, #1
 8000180:	2201      	movs	r2, #1
 8000182:	2140      	movs	r1, #64	@ 0x40
 8000184:	4803      	ldr	r0, [pc, #12]	@ (8000194 <MCP23017_Init+0x48>)
 8000186:	f001 fc09 	bl	800199c <HAL_I2C_Mem_Write>
}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	200001e0 	.word	0x200001e0

08000198 <MCP23017_WriteRegister>:
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
    return value;
}

void MCP23017_WriteRegister(uint8_t reg, uint8_t value) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af04      	add	r7, sp, #16
 800019e:	4603      	mov	r3, r0
 80001a0:	460a      	mov	r2, r1
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	4613      	mov	r3, r2
 80001a6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	9302      	str	r3, [sp, #8]
 80001b2:	2301      	movs	r3, #1
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	1dbb      	adds	r3, r7, #6
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2301      	movs	r3, #1
 80001bc:	2140      	movs	r1, #64	@ 0x40
 80001be:	4803      	ldr	r0, [pc, #12]	@ (80001cc <MCP23017_WriteRegister+0x34>)
 80001c0:	f001 fbec 	bl	800199c <HAL_I2C_Mem_Write>
}
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200001e0 	.word	0x200001e0

080001d0 <MCP23017_EnablePullUps>:

void MCP23017_EnablePullUps() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    MCP23017_WriteRegister(0x0C, 0xFF); // GPPUA - bật pull-up cho tất cả chân A
 80001d4:	21ff      	movs	r1, #255	@ 0xff
 80001d6:	200c      	movs	r0, #12
 80001d8:	f7ff ffde 	bl	8000198 <MCP23017_WriteRegister>
    MCP23017_WriteRegister(0x0D, 0xFF); // GPPUB - bật pull-up cho tất cả chân B
 80001dc:	21ff      	movs	r1, #255	@ 0xff
 80001de:	200d      	movs	r0, #13
 80001e0:	f7ff ffda 	bl	8000198 <MCP23017_WriteRegister>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 fd50 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f0:	f000 f88a 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f4:	f000 fada 	bl	80007ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80001f8:	f000 f960 	bl	80004bc <MX_I2C1_Init>
  MX_ADC1_Init();
 80001fc:	f000 f8e2 	bl	80003c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000200:	f000 f91e 	bl	8000440 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000204:	f000 f988 	bl	8000518 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000208:	f008 ff1a 	bl	8009040 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800020c:	f000 fa26 	bl	800065c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000210:	f000 fa78 	bl	8000704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MCP23017_Init();
 8000214:	f7ff ff9a 	bl	800014c <MCP23017_Init>
  MCP23017_EnablePullUps(&hi2c1);
 8000218:	4833      	ldr	r0, [pc, #204]	@ (80002e8 <main+0x100>)
 800021a:	f7ff ffd9 	bl	80001d0 <MCP23017_EnablePullUps>
  //mode digital
//  TLC59116_Init(&hi2c1);

  //mode pwm
//  TLC59116_Set_All_PWM_Mode(&hi2c1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800021e:	2104      	movs	r1, #4
 8000220:	4832      	ldr	r0, [pc, #200]	@ (80002ec <main+0x104>)
 8000222:	f004 f9c7 	bl	80045b4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000226:	2104      	movs	r1, #4
 8000228:	4830      	ldr	r0, [pc, #192]	@ (80002ec <main+0x104>)
 800022a:	f004 ffcf 	bl	80051cc <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800022e:	2104      	movs	r1, #4
 8000230:	482f      	ldr	r0, [pc, #188]	@ (80002f0 <main+0x108>)
 8000232:	f004 fb03 	bl	800483c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000236:	2104      	movs	r1, #4
 8000238:	482e      	ldr	r0, [pc, #184]	@ (80002f4 <main+0x10c>)
 800023a:	f004 faff 	bl	800483c <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	pulse1 = __HAL_TIM_GET_COUNTER(&htim2);
 800023e:	4b2c      	ldr	r3, [pc, #176]	@ (80002f0 <main+0x108>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000244:	b21a      	sxth	r2, r3
 8000246:	4b2c      	ldr	r3, [pc, #176]	@ (80002f8 <main+0x110>)
 8000248:	801a      	strh	r2, [r3, #0]
	pulse2 = __HAL_TIM_GET_COUNTER(&htim3);
 800024a:	4b2a      	ldr	r3, [pc, #168]	@ (80002f4 <main+0x10c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000250:	b21a      	sxth	r2, r3
 8000252:	4b2a      	ldr	r3, [pc, #168]	@ (80002fc <main+0x114>)
 8000254:	801a      	strh	r2, [r3, #0]
	if(pulse1 > 0){
 8000256:	4b28      	ldr	r3, [pc, #160]	@ (80002f8 <main+0x110>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	b21b      	sxth	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	dd1a      	ble.n	8000296 <main+0xae>
		click_report[0] = 1; //click
 8000260:	4b27      	ldr	r3, [pc, #156]	@ (8000300 <main+0x118>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
		click_report[1] = pulse1;			//x
 8000266:	4b24      	ldr	r3, [pc, #144]	@ (80002f8 <main+0x110>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	b21b      	sxth	r3, r3
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b24      	ldr	r3, [pc, #144]	@ (8000300 <main+0x118>)
 8000270:	705a      	strb	r2, [r3, #1]
		click_report[2] = pulse2;			//y
 8000272:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <main+0x114>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	b21b      	sxth	r3, r3
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <main+0x118>)
 800027c:	709a      	strb	r2, [r3, #2]
		click_report[3] = 0;			//wheel
 800027e:	4b20      	ldr	r3, [pc, #128]	@ (8000300 <main+0x118>)
 8000280:	2200      	movs	r2, #0
 8000282:	70da      	strb	r2, [r3, #3]
		click_report[4] = 0;			//motion wakeup
 8000284:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <main+0x118>)
 8000286:	2200      	movs	r2, #0
 8000288:	711a      	strb	r2, [r3, #4]
		pulse1 = 0;
 800028a:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <main+0x110>)
 800028c:	2200      	movs	r2, #0
 800028e:	801a      	strh	r2, [r3, #0]
		pulse2 = 0;
 8000290:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <main+0x114>)
 8000292:	2200      	movs	r2, #0
 8000294:	801a      	strh	r2, [r3, #0]
	}
	if(pulse2 > 0){
 8000296:	4b19      	ldr	r3, [pc, #100]	@ (80002fc <main+0x114>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	b21b      	sxth	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	dd1a      	ble.n	80002d6 <main+0xee>
		click_report[0] = 2; //click
 80002a0:	4b17      	ldr	r3, [pc, #92]	@ (8000300 <main+0x118>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	701a      	strb	r2, [r3, #0]
		click_report[1] = pulse1;			//x
 80002a6:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <main+0x110>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	b21b      	sxth	r3, r3
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <main+0x118>)
 80002b0:	705a      	strb	r2, [r3, #1]
		click_report[2] = pulse2;			//y
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <main+0x114>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <main+0x118>)
 80002bc:	709a      	strb	r2, [r3, #2]
		click_report[3] = 0;			//wheel
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <main+0x118>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	70da      	strb	r2, [r3, #3]
		click_report[4] = 0;			//motion wakeup
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <main+0x118>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	711a      	strb	r2, [r3, #4]
		pulse2 = 0;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <main+0x114>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]
		pulse1 = 0;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0x110>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	801a      	strh	r2, [r3, #0]
	}



	HAL_Delay(100);
 80002d6:	2064      	movs	r0, #100	@ 0x64
 80002d8:	f000 fd3c 	bl	8000d54 <HAL_Delay>
	USBD_HID_SendReport(&hUsbDeviceFS,click_report,5);
 80002dc:	2205      	movs	r2, #5
 80002de:	4908      	ldr	r1, [pc, #32]	@ (8000300 <main+0x118>)
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x11c>)
 80002e2:	f007 fdc1 	bl	8007e68 <USBD_HID_SendReport>
	pulse1 = __HAL_TIM_GET_COUNTER(&htim2);
 80002e6:	e7aa      	b.n	800023e <main+0x56>
 80002e8:	200001e0 	.word	0x200001e0
 80002ec:	20000234 	.word	0x20000234
 80002f0:	2000027c 	.word	0x2000027c
 80002f4:	200002c4 	.word	0x200002c4
 80002f8:	2000030c 	.word	0x2000030c
 80002fc:	2000030e 	.word	0x2000030e
 8000300:	20000310 	.word	0x20000310
 8000304:	20000320 	.word	0x20000320

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f009 fa4a 	bl	80097b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000352:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000354:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000358:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fbce 	bl	8003b00 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800036a:	f000 fa69 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f003 fe3a 	bl	8004004 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000396:	f000 fa53 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800039a:	2312      	movs	r3, #18
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800039e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 ffa4 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003b6:	f000 fa43 	bl	8000840 <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3750      	adds	r7, #80	@ 0x50
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d4:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003d6:	4a19      	ldr	r2, [pc, #100]	@ (800043c <MX_ADC1_Init+0x78>)
 80003d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003da:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_ADC1_Init+0x74>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <MX_ADC1_Init+0x74>)
 8000402:	f000 fccb 	bl	8000d9c <HAL_ADC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 fa18 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000410:	2300      	movs	r3, #0
 8000412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000414:	2301      	movs	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000418:	2307      	movs	r3, #7
 800041a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_ADC1_Init+0x74>)
 8000422:	f000 fd93 	bl	8000f4c <HAL_ADC_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800042c:	f000 fa08 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000180 	.word	0x20000180
 800043c:	40012400 	.word	0x40012400

08000440 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_ADC2_Init+0x74>)
 8000452:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <MX_ADC2_Init+0x78>)
 8000454:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_ADC2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_ADC2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_ADC2_Init+0x74>)
 800046a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800046e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000470:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <MX_ADC2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_ADC2_Init+0x74>)
 8000478:	2201      	movs	r2, #1
 800047a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <MX_ADC2_Init+0x74>)
 800047e:	f000 fc8d 	bl	8000d9c <HAL_ADC_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000488:	f000 f9da 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048c:	2301      	movs	r3, #1
 800048e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	2301      	movs	r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000494:	2307      	movs	r3, #7
 8000496:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_ADC2_Init+0x74>)
 800049e:	f000 fd55 	bl	8000f4c <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80004a8:	f000 f9ca 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200001b0 	.word	0x200001b0
 80004b8:	40012800 	.word	0x40012800

080004bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_I2C1_Init+0x50>)
 80004c2:	4a13      	ldr	r2, [pc, #76]	@ (8000510 <MX_I2C1_Init+0x54>)
 80004c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_I2C1_Init+0x50>)
 80004c8:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <MX_I2C1_Init+0x58>)
 80004ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_I2C1_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_I2C1_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_I2C1_Init+0x50>)
 80004da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_I2C1_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_I2C1_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <MX_I2C1_Init+0x50>)
 80004fa:	f001 f90b 	bl	8001714 <HAL_I2C_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000504:	f000 f99c 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200001e0 	.word	0x200001e0
 8000510:	40005400 	.word	0x40005400
 8000514:	000186a0 	.word	0x000186a0

08000518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	@ 0x58
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f009 f92d 	bl	80097b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000556:	4b3f      	ldr	r3, [pc, #252]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000558:	4a3f      	ldr	r2, [pc, #252]	@ (8000658 <MX_TIM1_Init+0x140>)
 800055a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 599;
 800055c:	4b3d      	ldr	r3, [pc, #244]	@ (8000654 <MX_TIM1_Init+0x13c>)
 800055e:	f240 2257 	movw	r2, #599	@ 0x257
 8000562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000564:	4b3b      	ldr	r3, [pc, #236]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800056a:	4b3a      	ldr	r3, [pc, #232]	@ (8000654 <MX_TIM1_Init+0x13c>)
 800056c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000572:	4b38      	ldr	r3, [pc, #224]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000578:	4b36      	ldr	r3, [pc, #216]	@ (8000654 <MX_TIM1_Init+0x13c>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800057e:	4b35      	ldr	r3, [pc, #212]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000584:	4833      	ldr	r0, [pc, #204]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000586:	f003 ff6d 	bl	8004464 <HAL_TIM_Base_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000590:	f000 f956 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800059a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800059e:	4619      	mov	r1, r3
 80005a0:	482c      	ldr	r0, [pc, #176]	@ (8000654 <MX_TIM1_Init+0x13c>)
 80005a2:	f004 fa9b 	bl	8004adc <HAL_TIM_ConfigClockSource>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005ac:	f000 f948 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005b0:	4828      	ldr	r0, [pc, #160]	@ (8000654 <MX_TIM1_Init+0x13c>)
 80005b2:	f003 ffa6 	bl	8004502 <HAL_TIM_PWM_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005bc:	f000 f940 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005cc:	4619      	mov	r1, r3
 80005ce:	4821      	ldr	r0, [pc, #132]	@ (8000654 <MX_TIM1_Init+0x13c>)
 80005d0:	f004 fe9a 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80005da:	f000 f931 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005de:	2360      	movs	r3, #96	@ 0x60
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25;
 80005e2:	2319      	movs	r3, #25
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005fe:	2204      	movs	r2, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000604:	f004 f9a8 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800060e:	f000 f917 	bl	8000840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4807      	ldr	r0, [pc, #28]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000636:	f004 fec5 	bl	80053c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000640:	f000 f8fe 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <MX_TIM1_Init+0x13c>)
 8000646:	f000 fa8d 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	@ 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000234 	.word	0x20000234
 8000658:	40012c00 	.word	0x40012c00

0800065c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2224      	movs	r2, #36	@ 0x24
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f009 f8a0 	bl	80097b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <MX_TIM2_Init+0xa4>)
 800067a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800067e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_TIM2_Init+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_TIM2_Init+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800068c:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_TIM2_Init+0xa4>)
 800068e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_TIM2_Init+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_TIM2_Init+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_TIM2_Init+0xa4>)
 80006cc:	f004 f814 	bl	80046f8 <HAL_TIM_Encoder_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006d6:	f000 f8b3 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <MX_TIM2_Init+0xa4>)
 80006e8:	f004 fe0e 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006f2:	f000 f8a5 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3730      	adds	r7, #48	@ 0x30
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000027c 	.word	0x2000027c

08000704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2224      	movs	r2, #36	@ 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 f84c 	bl	80097b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 8000722:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <MX_TIM3_Init+0xa4>)
 8000724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 8000734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000746:	2303      	movs	r3, #3
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 8000772:	f003 ffc1 	bl	80046f8 <HAL_TIM_Encoder_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f860 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_TIM3_Init+0xa0>)
 800078e:	f004 fdbb 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000798:	f000 f852 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3730      	adds	r7, #48	@ 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200002c4 	.word	0x200002c4
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_GPIO_Init+0x8c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2102      	movs	r1, #2
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0x90>)
 800080e:	f000 ff69 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_GPIO_Init+0x90>)
 800082a:	f000 fdd7 	bl	80013dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40010c00 	.word	0x40010c00

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <HAL_MspInit+0x5c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <HAL_MspInit+0x5c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_MspInit+0x60>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_MspInit+0x60>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010000 	.word	0x40010000

080008b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a28      	ldr	r2, [pc, #160]	@ (800096c <HAL_ADC_MspInit+0xbc>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d122      	bne.n	8000916 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d0:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a26      	ldr	r2, [pc, #152]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a20      	ldr	r2, [pc, #128]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000904:	2303      	movs	r3, #3
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	4619      	mov	r1, r3
 800090e:	4819      	ldr	r0, [pc, #100]	@ (8000974 <HAL_ADC_MspInit+0xc4>)
 8000910:	f000 fd64 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000914:	e026      	b.n	8000964 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_ADC_MspInit+0xc8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d121      	bne.n	8000964 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_ADC_MspInit+0xc0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000954:	2303      	movs	r3, #3
 8000956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_ADC_MspInit+0xc4>)
 8000960:	f000 fd3c 	bl	80013dc <HAL_GPIO_Init>
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800
 8000978:	40012800 	.word	0x40012800

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <HAL_I2C_MspInit+0x70>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d123      	bne.n	80009e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b4:	23c0      	movs	r3, #192	@ 0xc0
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <HAL_I2C_MspInit+0x78>)
 80009c8:	f000 fd08 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 80009d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009d6:	61d3      	str	r3, [r2, #28]
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_I2C_MspInit+0x74>)
 80009da:	69db      	ldr	r3, [r3, #28]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <HAL_TIM_Base_MspInit+0x34>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a52:	d14f      	bne.n	8000af4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a54:	4b3e      	ldr	r3, [pc, #248]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a3d      	ldr	r2, [pc, #244]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2f      	ldr	r3, [pc, #188]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4828      	ldr	r0, [pc, #160]	@ (8000b54 <HAL_TIM_Encoder_MspInit+0x120>)
 8000ab2:	f000 fc93 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4823      	ldr	r0, [pc, #140]	@ (8000b58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000aca:	f000 fc87 	bl	80013dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000ace:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <HAL_TIM_Encoder_MspInit+0x128>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ade:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aec:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <HAL_TIM_Encoder_MspInit+0x128>)
 8000aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af2:	e028      	b.n	8000b46 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d123      	bne.n	8000b46 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2e:	23c0      	movs	r3, #192	@ 0xc0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <HAL_TIM_Encoder_MspInit+0x120>)
 8000b42:	f000 fc4b 	bl	80013dc <HAL_GPIO_Init>
}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	@ 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	40000400 	.word	0x40000400

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_TIM_MspPostInit+0x5c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d118      	bne.n	8000bb6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_TIM_MspPostInit+0x60>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <HAL_TIM_MspPostInit+0x60>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_TIM_MspPostInit+0x60>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_TIM_MspPostInit+0x64>)
 8000bb2:	f000 fc13 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40012c00 	.word	0x40012c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f87e 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c2a:	f001 fb3b 	bl	80022a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200007e4 	.word	0x200007e4

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff fff8 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c4a:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c60:	4c09      	ldr	r4, [pc, #36]	@ (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f008 fda7 	bl	80097c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c72:	f7ff fab9 	bl	80001e8 <main>
  bx lr
 8000c76:	4770      	bx	lr
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000c80:	0800988c 	.word	0x0800988c
  ldr r2, =_sbss
 8000c84:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000c88:	20000ad0 	.word	0x20000ad0

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_Init+0x28>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 fb59 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fdce 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fb71 	bl	80013c2 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 fb39 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000318 	.word	0x20000318

08000d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b02      	ldr	r3, [pc, #8]	@ (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000318 	.word	0x20000318

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff fff0 	bl	8000d40 <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffe0 	bl	8000d40 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e0be      	b.n	8000f3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fd68 	bl	80008b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f9ab 	bl	800113c <ADC_ConversionStop_Disable>
 8000de6:	4603      	mov	r3, r0
 8000de8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8099 	bne.w	8000f2a <HAL_ADC_Init+0x18e>
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8095 	bne.w	8000f2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e08:	f023 0302 	bic.w	r3, r3, #2
 8000e0c:	f043 0202 	orr.w	r2, r3, #2
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7b1b      	ldrb	r3, [r3, #12]
 8000e22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e34:	d003      	beq.n	8000e3e <HAL_ADC_Init+0xa2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_ADC_Init+0xa8>
 8000e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e42:	e000      	b.n	8000e46 <HAL_ADC_Init+0xaa>
 8000e44:	2300      	movs	r3, #0
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7d1b      	ldrb	r3, [r3, #20]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d119      	bne.n	8000e88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b1b      	ldrb	r3, [r3, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d109      	bne.n	8000e70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	035a      	lsls	r2, r3, #13
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	e00b      	b.n	8000e88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e74:	f043 0220 	orr.w	r2, r3, #32
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e80:	f043 0201 	orr.w	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <HAL_ADC_Init+0x1a8>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000eb8:	d003      	beq.n	8000ec2 <HAL_ADC_Init+0x126>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d104      	bne.n	8000ecc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	051b      	lsls	r3, r3, #20
 8000eca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_ADC_Init+0x1ac>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d10b      	bne.n	8000f08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efa:	f023 0303 	bic.w	r3, r3, #3
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f06:	e018      	b.n	8000f3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0c:	f023 0312 	bic.w	r3, r3, #18
 8000f10:	f043 0210 	orr.w	r2, r3, #16
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f28:	e007      	b.n	8000f3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2e:	f043 0210 	orr.w	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	ffe1f7fd 	.word	0xffe1f7fd
 8000f48:	ff1f0efe 	.word	0xff1f0efe

08000f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x20>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e0dc      	b.n	8001126 <HAL_ADC_ConfigChannel+0x1da>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b06      	cmp	r3, #6
 8000f7a:	d81c      	bhi.n	8000fb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b05      	subs	r3, #5
 8000f8e:	221f      	movs	r2, #31
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4019      	ands	r1, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3b05      	subs	r3, #5
 8000fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb4:	e03c      	b.n	8001030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d81c      	bhi.n	8000ff8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	3b23      	subs	r3, #35	@ 0x23
 8000fd0:	221f      	movs	r2, #31
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4019      	ands	r1, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b23      	subs	r3, #35	@ 0x23
 8000fea:	fa00 f203 	lsl.w	r2, r0, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ff6:	e01b      	b.n	8001030 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	3b41      	subs	r3, #65	@ 0x41
 800100a:	221f      	movs	r2, #31
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	4019      	ands	r1, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	3b41      	subs	r3, #65	@ 0x41
 8001024:	fa00 f203 	lsl.w	r2, r0, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b09      	cmp	r3, #9
 8001036:	d91c      	bls.n	8001072 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68d9      	ldr	r1, [r3, #12]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	3b1e      	subs	r3, #30
 800104a:	2207      	movs	r2, #7
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	4019      	ands	r1, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6898      	ldr	r0, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	3b1e      	subs	r3, #30
 8001064:	fa00 f203 	lsl.w	r2, r0, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	e019      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6919      	ldr	r1, [r3, #16]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	2207      	movs	r2, #7
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d003      	beq.n	80010b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010b2:	2b11      	cmp	r3, #17
 80010b4:	d132      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <HAL_ADC_ConfigChannel+0x1e4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d125      	bne.n	800110c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d126      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d11a      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_ADC_ConfigChannel+0x1e8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <HAL_ADC_ConfigChannel+0x1ec>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	0c9a      	lsrs	r2, r3, #18
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fc:	e002      	b.n	8001104 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3b01      	subs	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f9      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x1b2>
 800110a:	e007      	b.n	800111c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	f043 0220 	orr.w	r2, r3, #32
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40012400 	.word	0x40012400
 8001134:	20000000 	.word	0x20000000
 8001138:	431bde83 	.word	0x431bde83

0800113c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d12e      	bne.n	80011b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001166:	f7ff fdeb 	bl	8000d40 <HAL_GetTick>
 800116a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800116c:	e01b      	b.n	80011a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800116e:	f7ff fde7 	bl	8000d40 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d914      	bls.n	80011a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10d      	bne.n	80011a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118e:	f043 0210 	orr.w	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e007      	b.n	80011b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d0dc      	beq.n	800116e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4906      	ldr	r1, [pc, #24]	@ (8001258 <__NVIC_EnableIRQ+0x34>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff2d 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff42 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff35 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b08b      	sub	sp, #44	@ 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	e169      	b.n	80016c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f0:	2201      	movs	r2, #1
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8158 	bne.w	80016be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a9a      	ldr	r2, [pc, #616]	@ (800167c <HAL_GPIO_Init+0x2a0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d05e      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001418:	4a98      	ldr	r2, [pc, #608]	@ (800167c <HAL_GPIO_Init+0x2a0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d875      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800141e:	4a98      	ldr	r2, [pc, #608]	@ (8001680 <HAL_GPIO_Init+0x2a4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d058      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001424:	4a96      	ldr	r2, [pc, #600]	@ (8001680 <HAL_GPIO_Init+0x2a4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d86f      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800142a:	4a96      	ldr	r2, [pc, #600]	@ (8001684 <HAL_GPIO_Init+0x2a8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d052      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001430:	4a94      	ldr	r2, [pc, #592]	@ (8001684 <HAL_GPIO_Init+0x2a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d869      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001436:	4a94      	ldr	r2, [pc, #592]	@ (8001688 <HAL_GPIO_Init+0x2ac>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d04c      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 800143c:	4a92      	ldr	r2, [pc, #584]	@ (8001688 <HAL_GPIO_Init+0x2ac>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d863      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001442:	4a92      	ldr	r2, [pc, #584]	@ (800168c <HAL_GPIO_Init+0x2b0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d046      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001448:	4a90      	ldr	r2, [pc, #576]	@ (800168c <HAL_GPIO_Init+0x2b0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d85d      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d82a      	bhi.n	80014a8 <HAL_GPIO_Init+0xcc>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d859      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001456:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <HAL_GPIO_Init+0x80>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014b1 	.word	0x080014b1
 8001464:	080014c3 	.word	0x080014c3
 8001468:	08001505 	.word	0x08001505
 800146c:	0800150b 	.word	0x0800150b
 8001470:	0800150b 	.word	0x0800150b
 8001474:	0800150b 	.word	0x0800150b
 8001478:	0800150b 	.word	0x0800150b
 800147c:	0800150b 	.word	0x0800150b
 8001480:	0800150b 	.word	0x0800150b
 8001484:	0800150b 	.word	0x0800150b
 8001488:	0800150b 	.word	0x0800150b
 800148c:	0800150b 	.word	0x0800150b
 8001490:	0800150b 	.word	0x0800150b
 8001494:	0800150b 	.word	0x0800150b
 8001498:	0800150b 	.word	0x0800150b
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	4a79      	ldr	r2, [pc, #484]	@ (8001690 <HAL_GPIO_Init+0x2b4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ae:	e02c      	b.n	800150a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e029      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e024      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	3308      	adds	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e01f      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	330c      	adds	r3, #12
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e01a      	b.n	800150c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014de:	2304      	movs	r3, #4
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e013      	b.n	800150c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
          break;
 80014f6:	e009      	b.n	800150c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
          break;
 8001502:	e003      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x130>
          break;
 800150a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2bff      	cmp	r3, #255	@ 0xff
 8001510:	d801      	bhi.n	8001516 <HAL_GPIO_Init+0x13a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	e001      	b.n	800151a <HAL_GPIO_Init+0x13e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2bff      	cmp	r3, #255	@ 0xff
 8001520:	d802      	bhi.n	8001528 <HAL_GPIO_Init+0x14c>
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x152>
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	3b08      	subs	r3, #8
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	210f      	movs	r1, #15
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80b1 	beq.w	80016be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800155c:	4b4d      	ldr	r3, [pc, #308]	@ (8001694 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a4c      	ldr	r2, [pc, #304]	@ (8001694 <HAL_GPIO_Init+0x2b8>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001574:	4a48      	ldr	r2, [pc, #288]	@ (8001698 <HAL_GPIO_Init+0x2bc>)
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a40      	ldr	r2, [pc, #256]	@ (800169c <HAL_GPIO_Init+0x2c0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1ec>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3f      	ldr	r2, [pc, #252]	@ (80016a0 <HAL_GPIO_Init+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1e8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3e      	ldr	r2, [pc, #248]	@ (80016a4 <HAL_GPIO_Init+0x2c8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3d      	ldr	r2, [pc, #244]	@ (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1e0>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015bc:	2304      	movs	r3, #4
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c8:	2300      	movs	r3, #0
 80015ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015da:	492f      	ldr	r1, [pc, #188]	@ (8001698 <HAL_GPIO_Init+0x2bc>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	492c      	ldr	r1, [pc, #176]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4928      	ldr	r1, [pc, #160]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	4922      	ldr	r1, [pc, #136]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	491e      	ldr	r1, [pc, #120]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4918      	ldr	r1, [pc, #96]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4914      	ldr	r1, [pc, #80]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d021      	beq.n	80016b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	490e      	ldr	r1, [pc, #56]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e021      	b.n	80016be <HAL_GPIO_Init+0x2e2>
 800167a:	bf00      	nop
 800167c:	10320000 	.word	0x10320000
 8001680:	10310000 	.word	0x10310000
 8001684:	10220000 	.word	0x10220000
 8001688:	10210000 	.word	0x10210000
 800168c:	10120000 	.word	0x10120000
 8001690:	10110000 	.word	0x10110000
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	40010800 	.word	0x40010800
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40011000 	.word	0x40011000
 80016a8:	40011400 	.word	0x40011400
 80016ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4909      	ldr	r1, [pc, #36]	@ (80016e0 <HAL_GPIO_Init+0x304>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae8e 	bne.w	80013f0 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	372c      	adds	r7, #44	@ 0x2c
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e12b      	b.n	800197e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff f91e 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2224      	movs	r2, #36	@ 0x24
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001778:	f002 fd8c 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a81      	ldr	r2, [pc, #516]	@ (8001988 <HAL_I2C_Init+0x274>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d807      	bhi.n	8001798 <HAL_I2C_Init+0x84>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4a80      	ldr	r2, [pc, #512]	@ (800198c <HAL_I2C_Init+0x278>)
 800178c:	4293      	cmp	r3, r2
 800178e:	bf94      	ite	ls
 8001790:	2301      	movls	r3, #1
 8001792:	2300      	movhi	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	e006      	b.n	80017a6 <HAL_I2C_Init+0x92>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a7d      	ldr	r2, [pc, #500]	@ (8001990 <HAL_I2C_Init+0x27c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	bf94      	ite	ls
 80017a0:	2301      	movls	r3, #1
 80017a2:	2300      	movhi	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0e7      	b.n	800197e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4a78      	ldr	r2, [pc, #480]	@ (8001994 <HAL_I2C_Init+0x280>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0c9b      	lsrs	r3, r3, #18
 80017b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001988 <HAL_I2C_Init+0x274>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d802      	bhi.n	80017e8 <HAL_I2C_Init+0xd4>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3301      	adds	r3, #1
 80017e6:	e009      	b.n	80017fc <HAL_I2C_Init+0xe8>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	4a69      	ldr	r2, [pc, #420]	@ (8001998 <HAL_I2C_Init+0x284>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	3301      	adds	r3, #1
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800180e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	495c      	ldr	r1, [pc, #368]	@ (8001988 <HAL_I2C_Init+0x274>)
 8001818:	428b      	cmp	r3, r1
 800181a:	d819      	bhi.n	8001850 <HAL_I2C_Init+0x13c>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e59      	subs	r1, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fbb1 f3f3 	udiv	r3, r1, r3
 800182a:	1c59      	adds	r1, r3, #1
 800182c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001830:	400b      	ands	r3, r1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00a      	beq.n	800184c <HAL_I2C_Init+0x138>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e59      	subs	r1, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fbb1 f3f3 	udiv	r3, r1, r3
 8001844:	3301      	adds	r3, #1
 8001846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184a:	e051      	b.n	80018f0 <HAL_I2C_Init+0x1dc>
 800184c:	2304      	movs	r3, #4
 800184e:	e04f      	b.n	80018f0 <HAL_I2C_Init+0x1dc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d111      	bne.n	800187c <HAL_I2C_Init+0x168>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	440b      	add	r3, r1
 8001866:	fbb0 f3f3 	udiv	r3, r0, r3
 800186a:	3301      	adds	r3, #1
 800186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e012      	b.n	80018a2 <HAL_I2C_Init+0x18e>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	0099      	lsls	r1, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Init+0x196>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e022      	b.n	80018f0 <HAL_I2C_Init+0x1dc>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10e      	bne.n	80018d0 <HAL_I2C_Init+0x1bc>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e58      	subs	r0, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	440b      	add	r3, r1
 80018c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ce:	e00f      	b.n	80018f0 <HAL_I2C_Init+0x1dc>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	6809      	ldr	r1, [r1, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800191e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6911      	ldr	r1, [r2, #16]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	430b      	orrs	r3, r1
 8001932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	000186a0 	.word	0x000186a0
 800198c:	001e847f 	.word	0x001e847f
 8001990:	003d08ff 	.word	0x003d08ff
 8001994:	431bde83 	.word	0x431bde83
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	817b      	strh	r3, [r7, #10]
 80019ae:	460b      	mov	r3, r1
 80019b0:	813b      	strh	r3, [r7, #8]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019b6:	f7ff f9c3 	bl	8000d40 <HAL_GetTick>
 80019ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	f040 80d9 	bne.w	8001b7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2319      	movs	r3, #25
 80019d0:	2201      	movs	r2, #1
 80019d2:	496d      	ldr	r1, [pc, #436]	@ (8001b88 <HAL_I2C_Mem_Write+0x1ec>)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f971 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0cc      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_Mem_Write+0x56>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0c5      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2221      	movs	r2, #33	@ 0x21
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2240      	movs	r2, #64	@ 0x40
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a4d      	ldr	r2, [pc, #308]	@ (8001b8c <HAL_I2C_Mem_Write+0x1f0>)
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5a:	88f8      	ldrh	r0, [r7, #6]
 8001a5c:	893a      	ldrh	r2, [r7, #8]
 8001a5e:	8979      	ldrh	r1, [r7, #10]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4603      	mov	r3, r0
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f890 	bl	8001b90 <I2C_RequestMemoryWrite>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d052      	beq.n	8001b1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e081      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fa36 	bl	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00d      	beq.n	8001aa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06b      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d11b      	bne.n	8001b1c <HAL_I2C_Mem_Write+0x180>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d017      	beq.n	8001b1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1aa      	bne.n	8001a7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fa29 	bl	8001f80 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d107      	bne.n	8001b4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e016      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	00100002 	.word	0x00100002
 8001b8c:	ffff0000 	.word	0xffff0000

08001b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	817b      	strh	r3, [r7, #10]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	813b      	strh	r3, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f878 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be0:	d103      	bne.n	8001bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e05f      	b.n	8001cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	492d      	ldr	r1, [pc, #180]	@ (8001cb8 <I2C_RequestMemoryWrite+0x128>)
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f8d3 	bl	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04c      	b.n	8001cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2c:	6a39      	ldr	r1, [r7, #32]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f95e 	bl	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d107      	bne.n	8001c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02b      	b.n	8001cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c5c:	893b      	ldrh	r3, [r7, #8]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	e021      	b.n	8001cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c68:	893b      	ldrh	r3, [r7, #8]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f938 	bl	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d107      	bne.n	8001c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e005      	b.n	8001cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca2:	893b      	ldrh	r3, [r7, #8]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	00010002 	.word	0x00010002

08001cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ccc:	e048      	b.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d044      	beq.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd6:	f7ff f833 	bl	8000d40 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d302      	bcc.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d139      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10d      	bne.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	e00c      	b.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d116      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e023      	b.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10d      	bne.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	43da      	mvns	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4013      	ands	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	e00c      	b.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d093      	beq.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dbe:	e071      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dce:	d123      	bne.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001de8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e067      	b.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d041      	beq.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e20:	f7fe ff8e 	bl	8000d40 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d302      	bcc.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d136      	bne.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10c      	bne.n	8001e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	e00b      	b.n	8001e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e021      	b.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10c      	bne.n	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e00b      	b.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f af6d 	bne.w	8001dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efc:	e034      	b.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f886 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e034      	b.n	8001f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d028      	beq.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f16:	f7fe ff13 	bl	8000d40 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d302      	bcc.n	8001f2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11d      	bne.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	2b80      	cmp	r3, #128	@ 0x80
 8001f38:	d016      	beq.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e007      	b.n	8001f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	2b80      	cmp	r3, #128	@ 0x80
 8001f74:	d1c3      	bne.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f8c:	e034      	b.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f83e 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e034      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d028      	beq.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7fe fecb 	bl	8000d40 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d016      	beq.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e007      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d1c3      	bne.n	8001f8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	d11b      	bne.n	8002060 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002030:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0e8      	b.n	8002250 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f007 f908 	bl	80092a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fa22 	bl	80054f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	f003 f9f8 	bl	80054ae <USB_CoreInit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0bf      	b.n	8002250 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fa26 	bl	8005528 <USB_SetCurrentMode>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0b0      	b.n	8002250 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e03e      	b.n	8002172 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3311      	adds	r3, #17
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3310      	adds	r3, #16
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3313      	adds	r3, #19
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	3320      	adds	r3, #32
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	3324      	adds	r3, #36	@ 0x24
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3301      	adds	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3bb      	bcc.n	80020f4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e044      	b.n	800220c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3b5      	bcc.n	8002182 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	f003 f98e 	bl	8005540 <USB_DevInit>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00c      	b.n	8002250 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f005 fc0e 	bl	8007a6a <USB_DevDisconnect>

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_Start+0x16>
 800226a:	2302      	movs	r3, #2
 800226c:	e016      	b.n	800229c <HAL_PCD_Start+0x44>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f924 	bl	80054c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002280:	2101      	movs	r1, #1
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f007 fa5d 	bl	8009742 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f005 fbe2 	bl	8007a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fbe4 	bl	8007a7e <USB_ReadInterrupts>
 80022b6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fb03 	bl	80028ce <PCD_EP_ISR_Handler>

    return;
 80022c8:	e119      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e6:	b292      	uxth	r2, r2
 80022e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 f856 	bl	800939e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022f2:	2100      	movs	r1, #0
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f905 	bl	8002504 <HAL_PCD_SetAddress>

    return;
 80022fa:	e100      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002318:	b292      	uxth	r2, r2
 800231a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800231e:	e0ee      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002332:	b29a      	uxth	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800233c:	b292      	uxth	r2, r2
 800233e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002342:	e0dc      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d027      	beq.n	800239e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0204 	bic.w	r2, r2, #4
 8002360:	b292      	uxth	r2, r2
 8002362:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	b292      	uxth	r2, r2
 800237a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f007 f846 	bl	8009410 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002396:	b292      	uxth	r2, r2
 8002398:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800239c:	e0af      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8083 	beq.w	80024b0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	77fb      	strb	r3, [r7, #31]
 80023ae:	e010      	b.n	80023d2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	7ffb      	ldrb	r3, [r7, #31]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	b292      	uxth	r2, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	3320      	adds	r3, #32
 80023c6:	443b      	add	r3, r7
 80023c8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	3301      	adds	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	d9eb      	bls.n	80023b0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	b292      	uxth	r2, r2
 80023ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	b292      	uxth	r2, r2
 8002404:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002408:	bf00      	nop
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002412:	b29b      	uxth	r3, r3
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f6      	beq.n	800240a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	e00f      	b.n	800245a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	7ffa      	ldrb	r2, [r7, #31]
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	440a      	add	r2, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	3320      	adds	r3, #32
 800244c:	443b      	add	r3, r7
 800244e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002452:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002454:	7ffb      	ldrb	r3, [r7, #31]
 8002456:	3301      	adds	r3, #1
 8002458:	77fb      	strb	r3, [r7, #31]
 800245a:	7ffb      	ldrb	r3, [r7, #31]
 800245c:	2b07      	cmp	r3, #7
 800245e:	d9ec      	bls.n	800243a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0208 	orr.w	r2, r2, #8
 8002472:	b292      	uxth	r2, r2
 8002474:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248a:	b292      	uxth	r2, r2
 800248c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002498:	b29a      	uxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0204 	orr.w	r2, r2, #4
 80024a2:	b292      	uxth	r2, r2
 80024a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f006 ff97 	bl	80093dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024ae:	e026      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00f      	beq.n	80024da <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024cc:	b292      	uxth	r2, r2
 80024ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f006 ff55 	bl	8009382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024d8:	e011      	b.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f6:	b292      	uxth	r2, r2
 80024f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024fc:	bf00      	nop
  }
}
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_PCD_SetAddress+0x1a>
 800251a:	2302      	movs	r3, #2
 800251c:	e012      	b.n	8002544 <HAL_PCD_SetAddress+0x40>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f005 fa7b 	bl	8007a30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4603      	mov	r3, r0
 800255c:	70fb      	strb	r3, [r7, #3]
 800255e:	460b      	mov	r3, r1
 8002560:	803b      	strh	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800256a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	da0e      	bge.n	8002590 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 0207 	and.w	r2, r3, #7
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	3310      	adds	r3, #16
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	705a      	strb	r2, [r3, #1]
 800258e:	e00e      	b.n	80025ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 0207 	and.w	r2, r3, #7
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025ba:	883a      	ldrh	r2, [r7, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	78ba      	ldrb	r2, [r7, #2]
 80025c4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025c6:	78bb      	ldrb	r3, [r7, #2]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d102      	bne.n	80025d2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_PCD_EP_Open+0x94>
 80025dc:	2302      	movs	r3, #2
 80025de:	e00e      	b.n	80025fe <HAL_PCD_EP_Open+0xb2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 ffc4 	bl	800557c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80025fc:	7afb      	ldrb	r3, [r7, #11]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da0e      	bge.n	8002638 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 0207 	and.w	r2, r3, #7
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	3310      	adds	r3, #16
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	705a      	strb	r2, [r3, #1]
 8002636:	e00e      	b.n	8002656 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 0207 	and.w	r2, r3, #7
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_PCD_EP_Close+0x6a>
 800266c:	2302      	movs	r3, #2
 800266e:	e00e      	b.n	800268e <HAL_PCD_EP_Close+0x88>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fb3c 	bl	8005cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	460b      	mov	r3, r1
 80026a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	f003 0207 	and.w	r2, r3, #7
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fcf3 	bl	80060d4 <USB_EPStartXfer>

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	f003 0207 	and.w	r2, r3, #7
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	3310      	adds	r3, #16
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2201      	movs	r2, #1
 8002742:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	b2da      	uxtb	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fcbc 	bl	80060d4 <USB_EPStartXfer>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	7912      	ldrb	r2, [r2, #4]
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04c      	b.n	800281e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da0e      	bge.n	80027aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 0207 	and.w	r2, r3, #7
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	3310      	adds	r3, #16
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	705a      	strb	r2, [r3, #1]
 80027a8:	e00c      	b.n	80027c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_EP_SetStall+0x7e>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e01c      	b.n	800281e <HAL_PCD_EP_SetStall+0xb8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 f81f 	bl	8007836 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f005 f944 	bl	8007a9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	460b      	mov	r3, r1
 8002830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	7912      	ldrb	r2, [r2, #4]
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e040      	b.n	80028c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da0e      	bge.n	800286a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	3310      	adds	r3, #16
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	705a      	strb	r2, [r3, #1]
 8002868:	e00e      	b.n	8002888 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_PCD_EP_ClrStall+0x82>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e00e      	b.n	80028c6 <HAL_PCD_EP_ClrStall+0xa0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 f80d 	bl	80078d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b096      	sub	sp, #88	@ 0x58
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028d6:	e3bb      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80028e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80028f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8175 	bne.w	8002be6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d14e      	bne.n	80029a6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3310      	adds	r3, #16
 8002930:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	3302      	adds	r3, #2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800295e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	441a      	add	r2, r3
 8002968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f006 fced 	bl	800934e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7b5b      	ldrb	r3, [r3, #13]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8368 	beq.w	8003050 <PCD_EP_ISR_Handler+0x782>
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 8363 	bne.w	8003050 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7b5b      	ldrb	r3, [r3, #13]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002994:	b2da      	uxtb	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	735a      	strb	r2, [r3, #13]
 80029a4:	e354      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d034      	beq.n	8002a2e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	3306      	adds	r3, #6
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f005 f89a 	bl	8007b3c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a14:	4013      	ands	r3, r2
 8002a16:	823b      	strh	r3, [r7, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	8a3a      	ldrh	r2, [r7, #16]
 8002a1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f006 fc64 	bl	80092f4 <HAL_PCD_SetupStageCallback>
 8002a2c:	e310      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a2e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f280 830c 	bge.w	8003050 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a44:	4013      	ands	r3, r2
 8002a46:	83fb      	strh	r3, [r7, #30]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	8bfa      	ldrh	r2, [r7, #30]
 8002a4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a52:	b292      	uxth	r2, r2
 8002a54:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3306      	adds	r3, #6
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d019      	beq.n	8002abe <PCD_EP_ISR_Handler+0x1f0>
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a98:	6959      	ldr	r1, [r3, #20]
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f005 f84a 	bl	8007b3c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	441a      	add	r2, r3
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f006 fc2d 	bl	8009318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002ac8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 82bd 	bne.w	8003050 <PCD_EP_ISR_Handler+0x782>
 8002ad6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ada:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ade:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ae2:	f000 82b5 	beq.w	8003050 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b1c:	d91d      	bls.n	8002b5a <PCD_EP_ISR_Handler+0x28c>
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <PCD_EP_ISR_Handler+0x26a>
 8002b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b34:	3b01      	subs	r3, #1
 8002b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	029b      	lsls	r3, r3, #10
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	e026      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x2da>
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <PCD_EP_ISR_Handler+0x2aa>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	e017      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x2da>
 8002b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <PCD_EP_ISR_Handler+0x2c4>
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b8e:	3301      	adds	r3, #1
 8002b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb8:	827b      	strh	r3, [r7, #18]
 8002bba:	8a7b      	ldrh	r3, [r7, #18]
 8002bbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002bc0:	827b      	strh	r3, [r7, #18]
 8002bc2:	8a7b      	ldrh	r3, [r7, #18]
 8002bc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002bc8:	827b      	strh	r3, [r7, #18]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	8a7b      	ldrh	r3, [r7, #18]
 8002bd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8013      	strh	r3, [r2, #0]
 8002be4:	e234      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bfa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f280 80fc 	bge.w	8002dfc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c36:	b292      	uxth	r2, r2
 8002c38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c3a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d125      	bne.n	8002ca4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002c84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8092 	beq.w	8002db2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	6959      	ldr	r1, [r3, #20]
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	88da      	ldrh	r2, [r3, #6]
 8002c9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c9e:	f004 ff4d 	bl	8007b3c <USB_ReadPMA>
 8002ca2:	e086      	b.n	8002db2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca6:	78db      	ldrb	r3, [r3, #3]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d10a      	bne.n	8002cc2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9d9 	bl	800306c <HAL_PCD_EP_DB_Receive>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002cc0:	e077      	b.n	8002db2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cdc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d024      	beq.n	8002d6a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	3302      	adds	r3, #2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d48:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02e      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	891a      	ldrh	r2, [r3, #8]
 8002d60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d64:	f004 feea 	bl	8007b3c <USB_ReadPMA>
 8002d68:	e023      	b.n	8002db2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3306      	adds	r3, #6
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da4:	6959      	ldr	r1, [r3, #20]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	895a      	ldrh	r2, [r3, #10]
 8002daa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dae:	f004 fec5 	bl	8007b3c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dba:	441a      	add	r2, r3
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dc8:	441a      	add	r2, r3
 8002dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dcc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <PCD_EP_ISR_Handler+0x514>
 8002dd6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d206      	bcs.n	8002df0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f006 fa95 	bl	8009318 <HAL_PCD_DataOutStageCallback>
 8002dee:	e005      	b.n	8002dfc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 f96c 	bl	80060d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8123 	beq.w	8003050 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e0a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	3310      	adds	r3, #16
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80a2 	bne.w	8002fa8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	7b1b      	ldrb	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8093 	beq.w	8002f9a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d046      	beq.n	8002f0e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d126      	bne.n	8002ed6 <PCD_EP_ISR_Handler+0x608>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	4413      	add	r3, r2
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	011a      	lsls	r2, r3, #4
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e061      	b.n	8002f9a <PCD_EP_ISR_Handler+0x6cc>
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d15d      	bne.n	8002f9a <PCD_EP_ISR_Handler+0x6cc>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef2:	4413      	add	r3, r2
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	011a      	lsls	r2, r3, #4
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efe:	4413      	add	r3, r2
 8002f00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e045      	b.n	8002f9a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d126      	bne.n	8002f6a <PCD_EP_ISR_Handler+0x69c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	4413      	add	r3, r2
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	011a      	lsls	r2, r3, #4
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	e017      	b.n	8002f9a <PCD_EP_ISR_Handler+0x6cc>
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d113      	bne.n	8002f9a <PCD_EP_ISR_Handler+0x6cc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f80:	4413      	add	r3, r2
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	011a      	lsls	r2, r3, #4
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	2200      	movs	r2, #0
 8002f98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f006 f9d4 	bl	800934e <HAL_PCD_DataInStageCallback>
 8002fa6:	e053      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d146      	bne.n	8003042 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d907      	bls.n	8002ffc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ff4:	1ad2      	subs	r2, r2, r3
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e002      	b.n	8003002 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffe:	2200      	movs	r2, #0
 8003000:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f006 f99c 	bl	800934e <HAL_PCD_DataInStageCallback>
 8003016:	e01b      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003020:	441a      	add	r2, r3
 8003022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003024:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800302e:	441a      	add	r2, r3
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800303a:	4618      	mov	r0, r3
 800303c:	f003 f84a 	bl	80060d4 <USB_EPStartXfer>
 8003040:	e006      	b.n	8003050 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003046:	461a      	mov	r2, r3
 8003048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f91b 	bl	8003286 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003058:	b29b      	uxth	r3, r3
 800305a:	b21b      	sxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	f6ff ac3b 	blt.w	80028d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3758      	adds	r7, #88	@ 0x58
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d07e      	beq.n	8003182 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	3302      	adds	r3, #2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	8b7b      	ldrh	r3, [r7, #26]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d306      	bcc.n	80030c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	8b7b      	ldrh	r3, [r7, #26]
 80030be:	1ad2      	subs	r2, r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	619a      	str	r2, [r3, #24]
 80030c4:	e002      	b.n	80030cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d123      	bne.n	800311c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	833b      	strh	r3, [r7, #24]
 80030f0:	8b3b      	ldrh	r3, [r7, #24]
 80030f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030f6:	833b      	strh	r3, [r7, #24]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	8b3b      	ldrh	r3, [r7, #24]
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01f      	beq.n	8003166 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800313c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003140:	82fb      	strh	r3, [r7, #22]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800315e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003166:	8b7b      	ldrh	r3, [r7, #26]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8087 	beq.w	800327c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6959      	ldr	r1, [r3, #20]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	891a      	ldrh	r2, [r3, #8]
 800317a:	8b7b      	ldrh	r3, [r7, #26]
 800317c:	f004 fcde 	bl	8007b3c <USB_ReadPMA>
 8003180:	e07c      	b.n	800327c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	3306      	adds	r3, #6
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	8b7b      	ldrh	r3, [r7, #26]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d306      	bcc.n	80031c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	8b7b      	ldrh	r3, [r7, #26]
 80031bc:	1ad2      	subs	r2, r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	619a      	str	r2, [r3, #24]
 80031c2:	e002      	b.n	80031ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d123      	bne.n	800321a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ec:	83fb      	strh	r3, [r7, #30]
 80031ee:	8bfb      	ldrh	r3, [r7, #30]
 80031f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031f4:	83fb      	strh	r3, [r7, #30]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	8bfb      	ldrh	r3, [r7, #30]
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11f      	bne.n	8003264 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800323a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323e:	83bb      	strh	r3, [r7, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	8bbb      	ldrh	r3, [r7, #28]
 8003250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800325c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003260:	b29b      	uxth	r3, r3
 8003262:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6959      	ldr	r1, [r3, #20]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	895a      	ldrh	r2, [r3, #10]
 8003276:	8b7b      	ldrh	r3, [r7, #26]
 8003278:	f004 fc60 	bl	8007b3c <USB_ReadPMA>
    }
  }

  return count;
 800327c:	8b7b      	ldrh	r3, [r7, #26]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b0a4      	sub	sp, #144	@ 0x90
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 81dd 	beq.w	800365a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	3302      	adds	r3, #2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d907      	bls.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80032e0:	1ad2      	subs	r2, r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	619a      	str	r2, [r3, #24]
 80032e6:	e002      	b.n	80032ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 80b9 	bne.w	800346a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d126      	bne.n	800334e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	4413      	add	r3, r2
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	011a      	lsls	r2, r3, #4
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	4413      	add	r3, r2
 8003322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	b29a      	uxth	r2, r3
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003346:	b29a      	uxth	r2, r3
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	e01a      	b.n	8003384 <HAL_PCD_EP_DB_Transmit+0xfe>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d116      	bne.n	8003384 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	4413      	add	r3, r2
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	011a      	lsls	r2, r3, #4
 8003374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003376:	4413      	add	r3, r2
 8003378:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	2200      	movs	r2, #0
 8003382:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d126      	bne.n	80033e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	011a      	lsls	r2, r3, #4
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e017      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x18a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d113      	bne.n	8003410 <HAL_PCD_EP_DB_Transmit+0x18a>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	4413      	add	r3, r2
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	011a      	lsls	r2, r3, #4
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	4413      	add	r3, r2
 8003404:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2200      	movs	r2, #0
 800340e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f005 ff99 	bl	800934e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 82fc 	beq.w	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800343e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003442:	82fb      	strh	r3, [r7, #22]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	8afb      	ldrh	r3, [r7, #22]
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800345c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]
 8003468:	e2da      	b.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d021      	beq.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034be:	2b01      	cmp	r3, #1
 80034c0:	f040 82ae 	bne.w	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034cc:	441a      	add	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034da:	441a      	add	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d30b      	bcc.n	8003504 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fc:	1ad2      	subs	r2, r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	621a      	str	r2, [r3, #32]
 8003502:	e017      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d108      	bne.n	800351e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800350c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800351c:	e00a      	b.n	8003534 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d165      	bne.n	8003608 <HAL_PCD_EP_DB_Transmit+0x382>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003550:	4413      	add	r3, r2
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	011a      	lsls	r2, r3, #4
 800355a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355c:	4413      	add	r3, r2
 800355e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356e:	b29a      	uxth	r2, r3
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003578:	2b3e      	cmp	r3, #62	@ 0x3e
 800357a:	d91d      	bls.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x332>
 800357c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x310>
 8003590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003592:	3b01      	subs	r3, #1
 8003594:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29a      	uxth	r2, r3
 800359c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359e:	b29b      	uxth	r3, r3
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e044      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_PCD_EP_DB_Transmit+0x350>
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e035      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80035ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ec:	3301      	adds	r3, #1
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b29a      	uxth	r2, r3
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	e01c      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d118      	bne.n	8003642 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003624:	4413      	add	r3, r2
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	011a      	lsls	r2, r3, #4
 800362e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003630:	4413      	add	r3, r2
 8003632:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003636:	643b      	str	r3, [r7, #64]	@ 0x40
 8003638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363c:	b29a      	uxth	r2, r3
 800363e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003640:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6959      	ldr	r1, [r3, #20]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	891a      	ldrh	r2, [r3, #8]
 800364e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003652:	b29b      	uxth	r3, r3
 8003654:	f004 fa2d 	bl	8007ab2 <USB_WritePMA>
 8003658:	e1e2      	b.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	3306      	adds	r3, #6
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003682:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800368e:	429a      	cmp	r2, r3
 8003690:	d307      	bcc.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800369a:	1ad2      	subs	r2, r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	619a      	str	r2, [r3, #24]
 80036a0:	e002      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f040 80c0 	bne.w	8003832 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d126      	bne.n	8003708 <HAL_PCD_EP_DB_Transmit+0x482>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ce:	4413      	add	r3, r2
 80036d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	011a      	lsls	r2, r3, #4
 80036d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036da:	4413      	add	r3, r2
 80036dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003700:	b29a      	uxth	r2, r3
 8003702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	e01a      	b.n	800373e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d116      	bne.n	800373e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	667b      	str	r3, [r7, #100]	@ 0x64
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003724:	4413      	add	r3, r2
 8003726:	667b      	str	r3, [r7, #100]	@ 0x64
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	011a      	lsls	r2, r3, #4
 800372e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003730:	4413      	add	r3, r2
 8003732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003736:	663b      	str	r3, [r7, #96]	@ 0x60
 8003738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800373a:	2200      	movs	r2, #0
 800373c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	677b      	str	r3, [r7, #116]	@ 0x74
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d12b      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003760:	4413      	add	r3, r2
 8003762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	011a      	lsls	r2, r3, #4
 800376a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376c:	4413      	add	r3, r2
 800376e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003776:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003782:	b29a      	uxth	r2, r3
 8003784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379a:	b29a      	uxth	r2, r3
 800379c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	e017      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d113      	bne.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ba:	4413      	add	r3, r2
 80037bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	011a      	lsls	r2, r3, #4
 80037c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80037ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037d0:	2200      	movs	r2, #0
 80037d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f005 fdb7 	bl	800934e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 811a 	bne.w	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	441a      	add	r2, r3
 8003818:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800381c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800382c:	b29b      	uxth	r3, r3
 800382e:	8013      	strh	r3, [r2, #0]
 8003830:	e0f6      	b.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d121      	bne.n	8003880 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800386c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800387c:	b29b      	uxth	r3, r3
 800387e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003886:	2b01      	cmp	r3, #1
 8003888:	f040 80ca 	bne.w	8003a20 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003894:	441a      	add	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038a2:	441a      	add	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d30b      	bcc.n	80038cc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038c4:	1ad2      	subs	r2, r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	621a      	str	r2, [r3, #32]
 80038ca:	e017      	b.n	80038fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80038d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038e4:	e00a      	b.n	80038fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	657b      	str	r3, [r7, #84]	@ 0x54
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d165      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x750>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003918:	b29b      	uxth	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800391e:	4413      	add	r3, r2
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	011a      	lsls	r2, r3, #4
 8003928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392a:	4413      	add	r3, r2
 800392c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003930:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393c:	b29a      	uxth	r2, r3
 800393e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003946:	2b3e      	cmp	r3, #62	@ 0x3e
 8003948:	d91d      	bls.n	8003986 <HAL_PCD_EP_DB_Transmit+0x700>
 800394a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_PCD_EP_DB_Transmit+0x6de>
 800395e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003960:	3b01      	subs	r3, #1
 8003962:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
 800396a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800396c:	b29b      	uxth	r3, r3
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	b29b      	uxth	r3, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29a      	uxth	r2, r3
 8003980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e041      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x784>
 8003986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x71e>
 800398e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800399c:	b29a      	uxth	r2, r3
 800399e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	e032      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x784>
 80039a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_PCD_EP_DB_Transmit+0x738>
 80039b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ba:	3301      	adds	r3, #1
 80039bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	e019      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x784>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d115      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x784>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ec:	4413      	add	r3, r2
 80039ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	011a      	lsls	r2, r3, #4
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a08:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6959      	ldr	r1, [r3, #20]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	895a      	ldrh	r2, [r3, #10]
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f004 f849 	bl	8007ab2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a3a:	82bb      	strh	r3, [r7, #20]
 8003a3c:	8abb      	ldrh	r3, [r7, #20]
 8003a3e:	f083 0310 	eor.w	r3, r3, #16
 8003a42:	82bb      	strh	r3, [r7, #20]
 8003a44:	8abb      	ldrh	r3, [r7, #20]
 8003a46:	f083 0320 	eor.w	r3, r3, #32
 8003a4a:	82bb      	strh	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	8abb      	ldrh	r3, [r7, #20]
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3790      	adds	r7, #144	@ 0x90
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	817b      	strh	r3, [r7, #10]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a98:	897b      	ldrh	r3, [r7, #10]
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	e009      	b.n	8003ac4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ab0:	897a      	ldrh	r2, [r7, #10]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	80da      	strh	r2, [r3, #6]
 8003ad8:	e00b      	b.n	8003af2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2201      	movs	r2, #1
 8003ade:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e272      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8087 	beq.w	8003c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	4b92      	ldr	r3, [pc, #584]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d112      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5e>
 8003b38:	4b8c      	ldr	r3, [pc, #560]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4b89      	ldr	r3, [pc, #548]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d06c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x12c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d168      	bne.n	8003c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e24c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x76>
 8003b68:	4b80      	ldr	r3, [pc, #512]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e02e      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x98>
 8003b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7a      	ldr	r2, [pc, #488]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b78      	ldr	r3, [pc, #480]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a77      	ldr	r2, [pc, #476]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0xbc>
 8003ba2:	4b72      	ldr	r3, [pc, #456]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a71      	ldr	r2, [pc, #452]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b6f      	ldr	r3, [pc, #444]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b68      	ldr	r3, [pc, #416]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a67      	ldr	r2, [pc, #412]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd f8b0 	bl	8000d40 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd f8ac 	bl	8000d40 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e200      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe4>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fd f89c 	bl	8000d40 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd f898 	bl	8000d40 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1ec      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b53      	ldr	r3, [pc, #332]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x10c>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c46:	4b49      	ldr	r3, [pc, #292]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x18c>
 8003c52:	4b46      	ldr	r3, [pc, #280]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b43      	ldr	r3, [pc, #268]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x176>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1c0      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b3d      	ldr	r3, [pc, #244]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4939      	ldr	r1, [pc, #228]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e03a      	b.n	8003d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fd f851 	bl	8000d40 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fd f84d 	bl	8000d40 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1a1      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4927      	ldr	r1, [pc, #156]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fd f830 	bl	8000d40 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd f82c 	bl	8000d40 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e180      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d03a      	beq.n	8003d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d019      	beq.n	8003d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b17      	ldr	r3, [pc, #92]	@ (8003d74 <HAL_RCC_OscConfig+0x274>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd f810 	bl	8000d40 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fd f80c 	bl	8000d40 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e160      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d42:	2001      	movs	r0, #1
 8003d44:	f000 faba 	bl	80042bc <RCC_Delay>
 8003d48:	e01c      	b.n	8003d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d50:	f7fc fff6 	bl	8000d40 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d56:	e00f      	b.n	8003d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d58:	f7fc fff2 	bl	8000d40 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d908      	bls.n	8003d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e146      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	42420000 	.word	0x42420000
 8003d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	4b92      	ldr	r3, [pc, #584]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e9      	bne.n	8003d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80a6 	beq.w	8003ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d96:	4b8b      	ldr	r3, [pc, #556]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	4b88      	ldr	r3, [pc, #544]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4a87      	ldr	r2, [pc, #540]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	61d3      	str	r3, [r2, #28]
 8003dae:	4b85      	ldr	r3, [pc, #532]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b82      	ldr	r3, [pc, #520]	@ (8003fc8 <HAL_RCC_OscConfig+0x4c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc8 <HAL_RCC_OscConfig+0x4c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc8 <HAL_RCC_OscConfig+0x4c8>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fc ffb3 	bl	8000d40 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fc ffaf 	bl	8000d40 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b64      	cmp	r3, #100	@ 0x64
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e103      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b75      	ldr	r3, [pc, #468]	@ (8003fc8 <HAL_RCC_OscConfig+0x4c8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x312>
 8003e04:	4b6f      	ldr	r3, [pc, #444]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6213      	str	r3, [r2, #32]
 8003e10:	e02d      	b.n	8003e6e <HAL_RCC_OscConfig+0x36e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x334>
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a69      	ldr	r2, [pc, #420]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	4b67      	ldr	r3, [pc, #412]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a66      	ldr	r2, [pc, #408]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	e01c      	b.n	8003e6e <HAL_RCC_OscConfig+0x36e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCC_OscConfig+0x356>
 8003e3c:	4b61      	ldr	r3, [pc, #388]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a60      	ldr	r2, [pc, #384]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6213      	str	r3, [r2, #32]
 8003e54:	e00b      	b.n	8003e6e <HAL_RCC_OscConfig+0x36e>
 8003e56:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6213      	str	r3, [r2, #32]
 8003e62:	4b58      	ldr	r3, [pc, #352]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a57      	ldr	r2, [pc, #348]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d015      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fc ff63 	bl	8000d40 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fc ff5f 	bl	8000d40 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0b1      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ee      	beq.n	8003e7e <HAL_RCC_OscConfig+0x37e>
 8003ea0:	e014      	b.n	8003ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fc ff4d 	bl	8000d40 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fc ff49 	bl	8000d40 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e09b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec0:	4b40      	ldr	r3, [pc, #256]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ee      	bne.n	8003eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8087 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee8:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d061      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d146      	bne.n	8003f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efc:	4b33      	ldr	r3, [pc, #204]	@ (8003fcc <HAL_RCC_OscConfig+0x4cc>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fc ff1d 	bl	8000d40 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fc ff19 	bl	8000d40 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e06d      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1c:	4b29      	ldr	r3, [pc, #164]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d108      	bne.n	8003f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f32:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4921      	ldr	r1, [pc, #132]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f44:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a19      	ldr	r1, [r3, #32]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	430b      	orrs	r3, r1
 8003f56:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fc feed 	bl	8000d40 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fc fee9 	bl	8000d40 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e03d      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f7c:	4b11      	ldr	r3, [pc, #68]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x46a>
 8003f88:	e035      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x4cc>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fc fed6 	bl	8000d40 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fc fed2 	bl	8000d40 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e026      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x498>
 8003fb6:	e01e      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e019      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_OscConfig+0x500>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d0      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b67      	ldr	r3, [pc, #412]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 0207 	bic.w	r2, r3, #7
 800402e:	4965      	ldr	r1, [pc, #404]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800406a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a52      	ldr	r2, [pc, #328]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d115      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e073      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b3d      	ldr	r3, [pc, #244]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b39      	ldr	r3, [pc, #228]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4936      	ldr	r1, [pc, #216]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f4:	f7fc fe24 	bl	8000d40 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fc fe20 	bl	8000d40 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e053      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d210      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 0207 	bic.w	r2, r3, #7
 800413a:	4922      	ldr	r1, [pc, #136]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1cc>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x1d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc fd82 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
 80041cc:	08009858 	.word	0x08009858
 80041d0:	20000000 	.word	0x20000000
 80041d4:	20000004 	.word	0x20000004

080041d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041f2:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <HAL_RCC_GetSysClockFreq+0x94>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d002      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x30>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d003      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x36>
 8004206:	e027      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x98>)
 800420a:	613b      	str	r3, [r7, #16]
      break;
 800420c:	e027      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	0c9b      	lsrs	r3, r3, #18
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a17      	ldr	r2, [pc, #92]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <HAL_RCC_GetSysClockFreq+0x94>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	0c5b      	lsrs	r3, r3, #17
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	4a11      	ldr	r2, [pc, #68]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a0d      	ldr	r2, [pc, #52]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x98>)
 800423a:	fb03 f202 	mul.w	r2, r3, r2
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e004      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a0c      	ldr	r2, [pc, #48]	@ (800427c <HAL_RCC_GetSysClockFreq+0xa4>)
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	613b      	str	r3, [r7, #16]
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x98>)
 800425a:	613b      	str	r3, [r7, #16]
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	693b      	ldr	r3, [r7, #16]
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	007a1200 	.word	0x007a1200
 8004274:	08009870 	.word	0x08009870
 8004278:	08009880 	.word	0x08009880
 800427c:	003d0900 	.word	0x003d0900

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b02      	ldr	r3, [pc, #8]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x10>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff2 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08009868 	.word	0x08009868

080042bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <RCC_Delay+0x34>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <RCC_Delay+0x38>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0a5b      	lsrs	r3, r3, #9
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042d8:	bf00      	nop
  }
  while (Delay --);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	60fa      	str	r2, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f9      	bne.n	80042d8 <RCC_Delay+0x1c>
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000000 	.word	0x20000000
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d07d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004318:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	4b4c      	ldr	r3, [pc, #304]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432e:	61d3      	str	r3, [r2, #28]
 8004330:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b46      	ldr	r3, [pc, #280]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d118      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434c:	4b43      	ldr	r3, [pc, #268]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a42      	ldr	r2, [pc, #264]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004358:	f7fc fcf2 	bl	8000d40 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fc fcee 	bl	8000d40 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e06d      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b3a      	ldr	r3, [pc, #232]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437e:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d027      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800439c:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043b2:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d014      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fc fcbd 	bl	8000d40 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fc fcb9 	bl	8000d40 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e036      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4917      	ldr	r1, [pc, #92]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004404:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441c:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	490b      	ldr	r1, [pc, #44]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	40007000 	.word	0x40007000
 8004460:	42420440 	.word	0x42420440

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fab4 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fbe2 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e041      	b.n	8004598 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f839 	bl	80045a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fb93 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x24>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e022      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d109      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x3e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e015      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x58>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e008      	b.n	800461e <HAL_TIM_PWM_Start+0x6a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e05e      	b.n	80046e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0x82>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	e013      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0x92>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	e00b      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004654:	e003      	b.n	800465e <HAL_TIM_PWM_Start+0xaa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fd8c 	bl	8005184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_TIM_PWM_Start+0x138>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d107      	bne.n	8004686 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_TIM_PWM_Start+0x138>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_TIM_PWM_Start+0xfa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d009      	beq.n	80046ae <HAL_TIM_PWM_Start+0xfa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <HAL_TIM_PWM_Start+0x13c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIM_PWM_Start+0xfa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a12      	ldr	r2, [pc, #72]	@ (80046f4 <HAL_TIM_PWM_Start+0x140>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d010      	beq.n	80046e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	e007      	b.n	80046e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800

080046f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e093      	b.n	8004834 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d106      	bne.n	8004726 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fc f987 	bl	8000a34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 fa8d 	bl	8004c6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	4313      	orrs	r3, r2
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004798:	f023 030c 	bic.w	r3, r3, #12
 800479c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	4313      	orrs	r3, r2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	011a      	lsls	r2, r3, #4
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	031b      	lsls	r3, r3, #12
 80047c8:	4313      	orrs	r3, r2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	4313      	orrs	r3, r2
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004854:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800485c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004864:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d110      	bne.n	800488e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d102      	bne.n	8004878 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004872:	7b7b      	ldrb	r3, [r7, #13]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e069      	b.n	8004950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800488c:	e031      	b.n	80048f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d110      	bne.n	80048b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800489a:	7b3b      	ldrb	r3, [r7, #12]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e055      	b.n	8004950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b4:	e01d      	b.n	80048f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d108      	bne.n	80048ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	7b7b      	ldrb	r3, [r7, #13]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048c8:	7b3b      	ldrb	r3, [r7, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e03e      	b.n	8004950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_TIM_Encoder_Start+0xc4>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d008      	beq.n	8004910 <HAL_TIM_Encoder_Start+0xd4>
 80048fe:	e00f      	b.n	8004920 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fc3b 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 800490e:	e016      	b.n	800493e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	2104      	movs	r1, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fc33 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 800491e:	e00e      	b.n	800493e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fc2b 	bl	8005184 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	2104      	movs	r1, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fc24 	bl	8005184 <TIM_CCxChannelCmd>
      break;
 800493c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004972:	2302      	movs	r3, #2
 8004974:	e0ae      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	f200 809f 	bhi.w	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049c1 	.word	0x080049c1
 8004990:	08004ac5 	.word	0x08004ac5
 8004994:	08004ac5 	.word	0x08004ac5
 8004998:	08004ac5 	.word	0x08004ac5
 800499c:	08004a01 	.word	0x08004a01
 80049a0:	08004ac5 	.word	0x08004ac5
 80049a4:	08004ac5 	.word	0x08004ac5
 80049a8:	08004ac5 	.word	0x08004ac5
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004ac5 	.word	0x08004ac5
 80049b4:	08004ac5 	.word	0x08004ac5
 80049b8:	08004ac5 	.word	0x08004ac5
 80049bc:	08004a83 	.word	0x08004a83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f9be 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0204 	bic.w	r2, r2, #4
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
      break;
 80049fe:	e064      	b.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa04 	bl	8004e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]
      break;
 8004a40:	e043      	b.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fa4d 	bl	8004ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0208 	orr.w	r2, r2, #8
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	61da      	str	r2, [r3, #28]
      break;
 8004a80:	e023      	b.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fa97 	bl	8004fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	61da      	str	r2, [r3, #28]
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_ConfigClockSource+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e0b4      	b.n	8004c62 <HAL_TIM_ConfigClockSource+0x186>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b30:	d03e      	beq.n	8004bb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b36:	f200 8087 	bhi.w	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3e:	f000 8086 	beq.w	8004c4e <HAL_TIM_ConfigClockSource+0x172>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	d87f      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b70      	cmp	r3, #112	@ 0x70
 8004b4a:	d01a      	beq.n	8004b82 <HAL_TIM_ConfigClockSource+0xa6>
 8004b4c:	2b70      	cmp	r3, #112	@ 0x70
 8004b4e:	d87b      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b60      	cmp	r3, #96	@ 0x60
 8004b52:	d050      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b54:	2b60      	cmp	r3, #96	@ 0x60
 8004b56:	d877      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b50      	cmp	r3, #80	@ 0x50
 8004b5a:	d03c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b5c:	2b50      	cmp	r3, #80	@ 0x50
 8004b5e:	d873      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d058      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x13a>
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d86f      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b30      	cmp	r3, #48	@ 0x30
 8004b6a:	d064      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b30      	cmp	r3, #48	@ 0x30
 8004b6e:	d86b      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d060      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d867      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d05c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d05a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	e062      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b92:	f000 fad8 	bl	8005146 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ba4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
      break;
 8004bae:	e04f      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc0:	f000 fac1 	bl	8005146 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bd2:	609a      	str	r2, [r3, #8]
      break;
 8004bd4:	e03c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 fa38 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2150      	movs	r1, #80	@ 0x50
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fa8f 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004bf4:	e02c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	461a      	mov	r2, r3
 8004c04:	f000 fa56 	bl	80050b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2160      	movs	r1, #96	@ 0x60
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fa7f 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004c14:	e01c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	461a      	mov	r2, r3
 8004c24:	f000 fa18 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2140      	movs	r1, #64	@ 0x40
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa6f 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004c34:	e00c      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f000 fa66 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d3c <TIM_Base_SetConfig+0xd0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x30>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x30>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d40 <TIM_Base_SetConfig+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x30>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a2b      	ldr	r2, [pc, #172]	@ (8004d44 <TIM_Base_SetConfig+0xd8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	@ (8004d3c <TIM_Base_SetConfig+0xd0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x62>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x62>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <TIM_Base_SetConfig+0xd4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x62>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <TIM_Base_SetConfig+0xd8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0d      	ldr	r2, [pc, #52]	@ (8004d3c <TIM_Base_SetConfig+0xd0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]
  }
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f023 0201 	bic.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10c      	bne.n	8004dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0308 	bic.w	r3, r3, #8
 8004daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0304 	bic.w	r3, r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <TIM_OC1_SetConfig+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0210 	bic.w	r2, r3, #16
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0320 	bic.w	r3, r3, #32
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a14      	ldr	r2, [pc, #80]	@ (8004ee4 <TIM_OC2_SetConfig+0xd0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d113      	bne.n	8004ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00

08004ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10d      	bne.n	8004f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00

08004fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	@ (8005054 <TIM_OC4_SetConfig+0x98>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0210 	bic.w	r2, r3, #16
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	031b      	lsls	r3, r3, #12
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 0307 	orr.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005146:	b480      	push	{r7}
 8005148:	b087      	sub	sp, #28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	431a      	orrs	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	609a      	str	r2, [r3, #8]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_TIMEx_PWMN_Start+0x24>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e022      	b.n	8005236 <HAL_TIMEx_PWMN_Start+0x6a>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d109      	bne.n	800520a <HAL_TIMEx_PWMN_Start+0x3e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e015      	b.n	8005236 <HAL_TIMEx_PWMN_Start+0x6a>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d109      	bne.n	8005224 <HAL_TIMEx_PWMN_Start+0x58>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e008      	b.n	8005236 <HAL_TIMEx_PWMN_Start+0x6a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e059      	b.n	80052f2 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_TIMEx_PWMN_Start+0x82>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524c:	e013      	b.n	8005276 <HAL_TIMEx_PWMN_Start+0xaa>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d104      	bne.n	800525e <HAL_TIMEx_PWMN_Start+0x92>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800525c:	e00b      	b.n	8005276 <HAL_TIMEx_PWMN_Start+0xaa>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d104      	bne.n	800526e <HAL_TIMEx_PWMN_Start+0xa2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800526c:	e003      	b.n	8005276 <HAL_TIMEx_PWMN_Start+0xaa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2204      	movs	r2, #4
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f8f1 	bl	8005466 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <HAL_TIMEx_PWMN_Start+0x130>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_TIMEx_PWMN_Start+0xf0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a6:	d009      	beq.n	80052bc <HAL_TIMEx_PWMN_Start+0xf0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a14      	ldr	r2, [pc, #80]	@ (8005300 <HAL_TIMEx_PWMN_Start+0x134>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIMEx_PWMN_Start+0xf0>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a13      	ldr	r2, [pc, #76]	@ (8005304 <HAL_TIMEx_PWMN_Start+0x138>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d111      	bne.n	80052e0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d010      	beq.n	80052f0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	e007      	b.n	80052f0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800

08005308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800531c:	2302      	movs	r3, #2
 800531e:	e046      	b.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a16      	ldr	r2, [pc, #88]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d009      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a12      	ldr	r2, [pc, #72]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a10      	ldr	r2, [pc, #64]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10c      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4313      	orrs	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800

080053c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053dc:	2302      	movs	r3, #2
 80053de:	e03d      	b.n	800545c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	2204      	movs	r2, #4
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	43db      	mvns	r3, r3
 8005488:	401a      	ands	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	431a      	orrs	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	4638      	mov	r0, r7
 80054b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054d8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80054dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054fc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005500:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	b29b      	uxth	r3, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	4013      	ands	r3, r2
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	4638      	mov	r0, r7
 800554a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
	...

0800557c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800557c:	b480      	push	{r7}
 800557e:	b09d      	sub	sp, #116	@ 0x74
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800559e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	78db      	ldrb	r3, [r3, #3]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d81f      	bhi.n	80055ee <USB_ActivateEndpoint+0x72>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <USB_ActivateEndpoint+0x38>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055e1 	.word	0x080055e1
 80055bc:	080055f7 	.word	0x080055f7
 80055c0:	080055d3 	.word	0x080055d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80055c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80055d0:	e012      	b.n	80055f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80055d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055d6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80055da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80055de:	e00b      	b.n	80055f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80055ec:	e004      	b.n	80055f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80055f4:	e000      	b.n	80055f8 <USB_ActivateEndpoint+0x7c>
      break;
 80055f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800560e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005616:	b29b      	uxth	r3, r3
 8005618:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800562c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005630:	b29b      	uxth	r3, r3
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	4313      	orrs	r3, r2
 8005638:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	441a      	add	r2, r3
 8005646:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	7b1b      	ldrb	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 8178 	bne.w	8005958 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8084 	beq.w	800577a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567c:	b29b      	uxth	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	4413      	add	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	011a      	lsls	r2, r3, #4
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	88db      	ldrh	r3, [r3, #6]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	827b      	strh	r3, [r7, #18]
 80056b4:	8a7b      	ldrh	r3, [r7, #18]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <USB_ActivateEndpoint+0x17a>
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d4:	823b      	strh	r3, [r7, #16]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	8a3b      	ldrh	r3, [r7, #16]
 80056e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	78db      	ldrb	r3, [r3, #3]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d020      	beq.n	8005740 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005714:	81bb      	strh	r3, [r7, #12]
 8005716:	89bb      	ldrh	r3, [r7, #12]
 8005718:	f083 0320 	eor.w	r3, r3, #32
 800571c:	81bb      	strh	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	89bb      	ldrh	r3, [r7, #12]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e2d5      	b.n	8005cec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005756:	81fb      	strh	r3, [r7, #14]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]
 8005778:	e2b8      	b.n	8005cec <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	4413      	add	r3, r2
 800578c:	633b      	str	r3, [r7, #48]	@ 0x30
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	011a      	lsls	r2, r3, #4
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	4413      	add	r3, r2
 8005798:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	88db      	ldrh	r3, [r3, #6]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	4413      	add	r3, r2
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	011a      	lsls	r2, r3, #4
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80057e8:	d91d      	bls.n	8005826 <USB_ActivateEndpoint+0x2aa>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <USB_ActivateEndpoint+0x288>
 80057fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005800:	3b01      	subs	r3, #1
 8005802:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29a      	uxth	r2, r3
 800580a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800580c:	b29b      	uxth	r3, r3
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	b29b      	uxth	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581e:	b29a      	uxth	r2, r3
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e026      	b.n	8005874 <USB_ActivateEndpoint+0x2f8>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <USB_ActivateEndpoint+0x2c8>
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583c:	b29a      	uxth	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	e017      	b.n	8005874 <USB_ActivateEndpoint+0x2f8>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <USB_ActivateEndpoint+0x2e2>
 8005858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800585a:	3301      	adds	r3, #1
 800585c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29a      	uxth	r2, r3
 8005864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005866:	b29b      	uxth	r3, r3
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	b29b      	uxth	r3, r3
 800586c:	4313      	orrs	r3, r2
 800586e:	b29a      	uxth	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005882:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <USB_ActivateEndpoint+0x348>
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a2:	843b      	strh	r3, [r7, #32]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	8c3b      	ldrh	r3, [r7, #32]
 80058b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d124      	bne.n	8005916 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	83bb      	strh	r3, [r7, #28]
 80058e4:	8bbb      	ldrh	r3, [r7, #28]
 80058e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058ea:	83bb      	strh	r3, [r7, #28]
 80058ec:	8bbb      	ldrh	r3, [r7, #28]
 80058ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058f2:	83bb      	strh	r3, [r7, #28]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	8bbb      	ldrh	r3, [r7, #28]
 8005900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]
 8005914:	e1ea      	b.n	8005cec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592c:	83fb      	strh	r3, [r7, #30]
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005934:	83fb      	strh	r3, [r7, #30]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e1c9      	b.n	8005cec <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	78db      	ldrb	r3, [r3, #3]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11e      	bne.n	800599e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005976:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005990:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]
 800599c:	e01d      	b.n	80059da <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ea:	4413      	add	r3, r2
 80059ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	011a      	lsls	r2, r3, #4
 80059f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	891b      	ldrh	r3, [r3, #8]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1e:	4413      	add	r3, r2
 8005a20:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	895b      	ldrh	r3, [r3, #10]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a40:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8093 	bne.w	8005b72 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005a5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <USB_ActivateEndpoint+0x524>
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005aae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <USB_ActivateEndpoint+0x574>
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ace:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b10:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b16:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8013      	strh	r3, [r2, #0]
 8005b70:	e0bc      	b.n	8005cec <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01d      	beq.n	8005bca <USB_ActivateEndpoint+0x64e>
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005bda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01d      	beq.n	8005c22 <USB_ActivateEndpoint+0x6a6>
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d024      	beq.n	8005c74 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005c44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005c48:	f083 0320 	eor.w	r3, r3, #32
 8005c4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]
 8005c72:	e01d      	b.n	8005cb0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c8a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3774      	adds	r7, #116	@ 0x74
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b08d      	sub	sp, #52	@ 0x34
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	7b1b      	ldrb	r3, [r3, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 808e 	bne.w	8005e2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d044      	beq.n	8005da2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	81bb      	strh	r3, [r7, #12]
 8005d26:	89bb      	ldrh	r3, [r7, #12]
 8005d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <USB_DeactivateEndpoint+0x6c>
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	817b      	strh	r3, [r7, #10]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7e:	813b      	strh	r3, [r7, #8]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	441a      	add	r2, r3
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	8013      	strh	r3, [r2, #0]
 8005da0:	e192      	b.n	80060c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	827b      	strh	r3, [r7, #18]
 8005db0:	8a7b      	ldrh	r3, [r7, #18]
 8005db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01b      	beq.n	8005df2 <USB_DeactivateEndpoint+0xf6>
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd0:	823b      	strh	r3, [r7, #16]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	8a3b      	ldrh	r3, [r7, #16]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e08:	81fb      	strh	r3, [r7, #14]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	89fb      	ldrh	r3, [r7, #14]
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]
 8005e2a:	e14d      	b.n	80060c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 80a5 	bne.w	8005f80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	843b      	strh	r3, [r7, #32]
 8005e44:	8c3b      	ldrh	r3, [r7, #32]
 8005e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01b      	beq.n	8005e86 <USB_DeactivateEndpoint+0x18a>
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e64:	83fb      	strh	r3, [r7, #30]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	8bfb      	ldrh	r3, [r7, #30]
 8005e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	83bb      	strh	r3, [r7, #28]
 8005e94:	8bbb      	ldrh	r3, [r7, #28]
 8005e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01b      	beq.n	8005ed6 <USB_DeactivateEndpoint+0x1da>
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb4:	837b      	strh	r3, [r7, #26]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ece:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eec:	833b      	strh	r3, [r7, #24]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8b3b      	ldrh	r3, [r7, #24]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f24:	82fb      	strh	r3, [r7, #22]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	441a      	add	r2, r3
 8005f30:	8afb      	ldrh	r3, [r7, #22]
 8005f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5c:	82bb      	strh	r3, [r7, #20]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	441a      	add	r2, r3
 8005f68:	8abb      	ldrh	r3, [r7, #20]
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]
 8005f7e:	e0a3      	b.n	80060c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <USB_DeactivateEndpoint+0x2d4>
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005fde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01b      	beq.n	8006020 <USB_DeactivateEndpoint+0x324>
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006018:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006054:	b29b      	uxth	r3, r3
 8006056:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800606e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	441a      	add	r2, r3
 80060b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3734      	adds	r7, #52	@ 0x34
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0c2      	sub	sp, #264	@ 0x108
 80060d8:	af00      	add	r7, sp, #0
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e2:	6018      	str	r0, [r3, #0]
 80060e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	f040 86b7 	bne.w	8006e6e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	d908      	bls.n	800612e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800612c:	e007      	b.n	800613e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	7b1b      	ldrb	r3, [r3, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d13a      	bne.n	80061c4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6959      	ldr	r1, [r3, #20]
 800615a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	88da      	ldrh	r2, [r3, #6]
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	b29b      	uxth	r3, r3
 800616c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006170:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006174:	6800      	ldr	r0, [r0, #0]
 8006176:	f001 fc9c 	bl	8007ab2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	011a      	lsls	r2, r3, #4
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	f000 be1f 	b.w	8006e02 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	78db      	ldrb	r3, [r3, #3]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	f040 8462 	bne.w	8006a9a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a1a      	ldr	r2, [r3, #32]
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	f240 83df 	bls.w	80069b2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800623c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006244:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624c:	b29b      	uxth	r3, r3
 800624e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	1ad2      	subs	r2, r2, r3
 8006262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 81c7 	beq.w	8006624 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d177      	bne.n	80063a2 <USB_EPStartXfer+0x2ce>
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	4413      	add	r3, r2
 80062d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	011a      	lsls	r2, r3, #4
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	4413      	add	r3, r2
 80062e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	2b3e      	cmp	r3, #62	@ 0x3e
 8006304:	d921      	bls.n	800634a <USB_EPStartXfer+0x276>
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USB_EPStartXfer+0x252>
 800631c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006320:	3b01      	subs	r3, #1
 8006322:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006330:	b29b      	uxth	r3, r3
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	b29b      	uxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006342:	b29a      	uxth	r2, r3
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e050      	b.n	80063ec <USB_EPStartXfer+0x318>
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_EPStartXfer+0x294>
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e041      	b.n	80063ec <USB_EPStartXfer+0x318>
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <USB_EPStartXfer+0x2b4>
 800637e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b29a      	uxth	r2, r3
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e024      	b.n	80063ec <USB_EPStartXfer+0x318>
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d11c      	bne.n	80063ec <USB_EPStartXfer+0x318>
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	4413      	add	r3, r2
 80063c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	011a      	lsls	r2, r3, #4
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	4413      	add	r3, r2
 80063dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	b29b      	uxth	r3, r3
 800640e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006412:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006416:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	f001 fb49 	bl	8007ab2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006430:	441a      	add	r2, r3
 8006432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6a1a      	ldr	r2, [r3, #32]
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d90f      	bls.n	800647a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	621a      	str	r2, [r3, #32]
 8006478:	e00e      	b.n	8006498 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800647a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d177      	bne.n	8006598 <USB_EPStartXfer+0x4c4>
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	4413      	add	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011a      	lsls	r2, r3, #4
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064fa:	d921      	bls.n	8006540 <USB_EPStartXfer+0x46c>
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <USB_EPStartXfer+0x448>
 8006512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006516:	3b01      	subs	r3, #1
 8006518:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29a      	uxth	r2, r3
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29b      	uxth	r3, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006538:	b29a      	uxth	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	e056      	b.n	80065ee <USB_EPStartXfer+0x51a>
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <USB_EPStartXfer+0x48a>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006556:	b29a      	uxth	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e047      	b.n	80065ee <USB_EPStartXfer+0x51a>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <USB_EPStartXfer+0x4aa>
 8006574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006578:	3301      	adds	r3, #1
 800657a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006588:	b29b      	uxth	r3, r3
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	b29b      	uxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b29a      	uxth	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	801a      	strh	r2, [r3, #0]
 8006596:	e02a      	b.n	80065ee <USB_EPStartXfer+0x51a>
 8006598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d122      	bne.n	80065ee <USB_EPStartXfer+0x51a>
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	623b      	str	r3, [r7, #32]
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	4413      	add	r3, r2
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	011a      	lsls	r2, r3, #4
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	4413      	add	r3, r2
 80065de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	891b      	ldrh	r3, [r3, #8]
 80065fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6959      	ldr	r1, [r3, #20]
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660e:	b29b      	uxth	r3, r3
 8006610:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006614:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006618:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f001 fa48 	bl	8007ab2 <USB_WritePMA>
 8006622:	e3ee      	b.n	8006e02 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d177      	bne.n	8006724 <USB_EPStartXfer+0x650>
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006654:	4413      	add	r3, r2
 8006656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006668:	4413      	add	r3, r2
 800666a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800666e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667a:	b29a      	uxth	r2, r3
 800667c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	2b3e      	cmp	r3, #62	@ 0x3e
 8006686:	d921      	bls.n	80066cc <USB_EPStartXfer+0x5f8>
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <USB_EPStartXfer+0x5d4>
 800669e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066a2:	3b01      	subs	r3, #1
 80066a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e056      	b.n	800677a <USB_EPStartXfer+0x6a6>
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <USB_EPStartXfer+0x616>
 80066d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e047      	b.n	800677a <USB_EPStartXfer+0x6a6>
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <USB_EPStartXfer+0x636>
 8006700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006704:	3301      	adds	r3, #1
 8006706:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800670a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006714:	b29b      	uxth	r3, r3
 8006716:	029b      	lsls	r3, r3, #10
 8006718:	b29b      	uxth	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b29a      	uxth	r2, r3
 800671e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e02a      	b.n	800677a <USB_EPStartXfer+0x6a6>
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d122      	bne.n	800677a <USB_EPStartXfer+0x6a6>
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006754:	4413      	add	r3, r2
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006768:	4413      	add	r3, r2
 800676a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800676e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	b29a      	uxth	r2, r3
 8006776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006778:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	891b      	ldrh	r3, [r3, #8]
 8006786:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067a8:	6800      	ldr	r0, [r0, #0]
 80067aa:	f001 f982 	bl	8007ab2 <USB_WritePMA>
            ep->xfer_buff += len;
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	441a      	add	r2, r3
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d90f      	bls.n	8006808 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80067e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	621a      	str	r2, [r3, #32]
 8006806:	e00e      	b.n	8006826 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	643b      	str	r3, [r7, #64]	@ 0x40
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d177      	bne.n	8006932 <USB_EPStartXfer+0x85e>
 8006842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	4413      	add	r3, r2
 8006864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	011a      	lsls	r2, r3, #4
 8006874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006876:	4413      	add	r3, r2
 8006878:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
 800687e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006888:	b29a      	uxth	r2, r3
 800688a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	2b3e      	cmp	r3, #62	@ 0x3e
 8006894:	d921      	bls.n	80068da <USB_EPStartXfer+0x806>
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <USB_EPStartXfer+0x7e2>
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b0:	3b01      	subs	r3, #1
 80068b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	029b      	lsls	r3, r3, #10
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e050      	b.n	800697c <USB_EPStartXfer+0x8a8>
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <USB_EPStartXfer+0x824>
 80068e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e041      	b.n	800697c <USB_EPStartXfer+0x8a8>
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <USB_EPStartXfer+0x844>
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006912:	3301      	adds	r3, #1
 8006914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29b      	uxth	r3, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	b29a      	uxth	r2, r3
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e024      	b.n	800697c <USB_EPStartXfer+0x8a8>
 8006932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d11c      	bne.n	800697c <USB_EPStartXfer+0x8a8>
 8006942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006956:	4413      	add	r3, r2
 8006958:	643b      	str	r3, [r7, #64]	@ 0x40
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	011a      	lsls	r2, r3, #4
 8006968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800696a:	4413      	add	r3, r2
 800696c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006976:	b29a      	uxth	r2, r3
 8006978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	895b      	ldrh	r3, [r3, #10]
 8006988:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800698c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6959      	ldr	r1, [r3, #20]
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699c:	b29b      	uxth	r3, r3
 800699e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	f001 f881 	bl	8007ab2 <USB_WritePMA>
 80069b0:	e227      	b.n	8006e02 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80069e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a3e:	4413      	add	r3, r2
 8006a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	011a      	lsls	r2, r3, #4
 8006a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	891b      	ldrh	r3, [r3, #8]
 8006a70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6959      	ldr	r1, [r3, #20]
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	f001 f80d 	bl	8007ab2 <USB_WritePMA>
 8006a98:	e1b3      	b.n	8006e02 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80c6 	beq.w	8006c6c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	673b      	str	r3, [r7, #112]	@ 0x70
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d177      	bne.n	8006bec <USB_EPStartXfer+0xb18>
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b1c:	4413      	add	r3, r2
 8006b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b36:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b4e:	d921      	bls.n	8006b94 <USB_EPStartXfer+0xac0>
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <USB_EPStartXfer+0xa9c>
 8006b66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e050      	b.n	8006c36 <USB_EPStartXfer+0xb62>
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <USB_EPStartXfer+0xade>
 8006b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e041      	b.n	8006c36 <USB_EPStartXfer+0xb62>
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <USB_EPStartXfer+0xafe>
 8006bc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e024      	b.n	8006c36 <USB_EPStartXfer+0xb62>
 8006bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d11c      	bne.n	8006c36 <USB_EPStartXfer+0xb62>
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c10:	4413      	add	r3, r2
 8006c12:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	895b      	ldrh	r3, [r3, #10]
 8006c42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6959      	ldr	r1, [r3, #20]
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c64:	6800      	ldr	r0, [r0, #0]
 8006c66:	f000 ff24 	bl	8007ab2 <USB_WritePMA>
 8006c6a:	e0ca      	b.n	8006e02 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d177      	bne.n	8006d6c <USB_EPStartXfer+0xc98>
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c9c:	4413      	add	r3, r2
 8006c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	011a      	lsls	r2, r3, #4
 8006cae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cce:	d921      	bls.n	8006d14 <USB_EPStartXfer+0xc40>
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USB_EPStartXfer+0xc1c>
 8006ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cea:	3b01      	subs	r3, #1
 8006cec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e05c      	b.n	8006dce <USB_EPStartXfer+0xcfa>
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <USB_EPStartXfer+0xc5e>
 8006d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e04d      	b.n	8006dce <USB_EPStartXfer+0xcfa>
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <USB_EPStartXfer+0xc7e>
 8006d48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	029b      	lsls	r3, r3, #10
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e030      	b.n	8006dce <USB_EPStartXfer+0xcfa>
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d128      	bne.n	8006dce <USB_EPStartXfer+0xcfa>
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006da0:	4413      	add	r3, r2
 8006da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	011a      	lsls	r2, r3, #4
 8006db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	891b      	ldrh	r3, [r3, #8]
 8006dda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006df4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006df8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006dfc:	6800      	ldr	r0, [r0, #0]
 8006dfe:	f000 fe58 	bl	8007ab2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	817b      	strh	r3, [r7, #10]
 8006e2a:	897b      	ldrh	r3, [r7, #10]
 8006e2c:	f083 0310 	eor.w	r3, r3, #16
 8006e30:	817b      	strh	r3, [r7, #10]
 8006e32:	897b      	ldrh	r3, [r7, #10]
 8006e34:	f083 0320 	eor.w	r3, r3, #32
 8006e38:	817b      	strh	r3, [r7, #10]
 8006e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	897b      	ldrh	r3, [r7, #10]
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
 8006e6a:	f000 bcde 	b.w	800782a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	7b1b      	ldrb	r3, [r3, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f040 80bb 	bne.w	8006ff6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d917      	bls.n	8006ecc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	619a      	str	r2, [r3, #24]
 8006eca:	e00e      	b.n	8006eea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f0e:	4413      	add	r3, r2
 8006f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	011a      	lsls	r2, r3, #4
 8006f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f26:	4413      	add	r3, r2
 8006f28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f4a:	d924      	bls.n	8006f96 <USB_EPStartXfer+0xec2>
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <USB_EPStartXfer+0xe98>
 8006f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	029b      	lsls	r3, r3, #10
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	f000 bc10 	b.w	80077b6 <USB_EPStartXfer+0x16e2>
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10c      	bne.n	8006fb8 <USB_EPStartXfer+0xee4>
 8006f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e3fe      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <USB_EPStartXfer+0xf04>
 8006fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	029b      	lsls	r3, r3, #10
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4313      	orrs	r3, r2
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e3df      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	2b02      	cmp	r3, #2
 8007004:	f040 8218 	bne.w	8007438 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 809d 	bne.w	8007154 <USB_EPStartXfer+0x1080>
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007036:	b29b      	uxth	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800703e:	4413      	add	r3, r2
 8007040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	011a      	lsls	r2, r3, #4
 8007052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007056:	4413      	add	r3, r2
 8007058:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800705c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800706c:	b29a      	uxth	r2, r3
 800706e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b3e      	cmp	r3, #62	@ 0x3e
 8007082:	d92b      	bls.n	80070dc <USB_EPStartXfer+0x1008>
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <USB_EPStartXfer+0xfe0>
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e070      	b.n	80071be <USB_EPStartXfer+0x10ea>
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10c      	bne.n	8007106 <USB_EPStartXfer+0x1032>
 80070ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e05b      	b.n	80071be <USB_EPStartXfer+0x10ea>
 8007106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <USB_EPStartXfer+0x1062>
 800712c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007130:	3301      	adds	r3, #1
 8007132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007142:	b29b      	uxth	r3, r3
 8007144:	029b      	lsls	r3, r3, #10
 8007146:	b29b      	uxth	r3, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e034      	b.n	80071be <USB_EPStartXfer+0x10ea>
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d12c      	bne.n	80071be <USB_EPStartXfer+0x10ea>
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007188:	4413      	add	r3, r2
 800718a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800718e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	011a      	lsls	r2, r3, #4
 800719c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 809d 	bne.w	8007318 <USB_EPStartXfer+0x1244>
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007202:	4413      	add	r3, r2
 8007204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	011a      	lsls	r2, r3, #4
 8007216:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800721a:	4413      	add	r3, r2
 800721c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007230:	b29a      	uxth	r2, r3
 8007232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b3e      	cmp	r3, #62	@ 0x3e
 8007246:	d92b      	bls.n	80072a0 <USB_EPStartXfer+0x11cc>
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2b00      	cmp	r3, #0
 800726c:	d104      	bne.n	8007278 <USB_EPStartXfer+0x11a4>
 800726e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007272:	3b01      	subs	r3, #1
 8007274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007284:	b29b      	uxth	r3, r3
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	b29b      	uxth	r3, r3
 800728a:	4313      	orrs	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e069      	b.n	8007374 <USB_EPStartXfer+0x12a0>
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <USB_EPStartXfer+0x11f6>
 80072b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e054      	b.n	8007374 <USB_EPStartXfer+0x12a0>
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x1226>
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29b      	uxth	r3, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	e02d      	b.n	8007374 <USB_EPStartXfer+0x12a0>
 8007318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d125      	bne.n	8007374 <USB_EPStartXfer+0x12a0>
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800733e:	4413      	add	r3, r2
 8007340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	011a      	lsls	r2, r3, #4
 8007352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007356:	4413      	add	r3, r2
 8007358:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800735c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007372:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8218 	beq.w	80077b6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <USB_EPStartXfer+0x12ea>
 80073b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10d      	bne.n	80073da <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 81f5 	bne.w	80077b6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80073d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 81ee 	bne.w	80077b6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007400:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	441a      	add	r2, r3
 800741e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]
 8007436:	e1be      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 81b4 	bne.w	80077b2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d917      	bls.n	8007496 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	619a      	str	r2, [r3, #24]
 8007494:	e00e      	b.n	80074b4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2200      	movs	r2, #0
 80074b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8085 	bne.w	80075d0 <USB_EPStartXfer+0x14fc>
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007502:	4413      	add	r3, r2
 8007504:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800750c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	2b3e      	cmp	r3, #62	@ 0x3e
 8007526:	d923      	bls.n	8007570 <USB_EPStartXfer+0x149c>
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <USB_EPStartXfer+0x1474>
 800753e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007542:	3b01      	subs	r3, #1
 8007544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29a      	uxth	r2, r3
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007554:	b29b      	uxth	r3, r3
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	b29b      	uxth	r3, r3
 800755a:	4313      	orrs	r3, r2
 800755c:	b29b      	uxth	r3, r3
 800755e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	e060      	b.n	8007632 <USB_EPStartXfer+0x155e>
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10c      	bne.n	8007592 <USB_EPStartXfer+0x14be>
 8007578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	e04f      	b.n	8007632 <USB_EPStartXfer+0x155e>
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <USB_EPStartXfer+0x14de>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ac:	3301      	adds	r3, #1
 80075ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075be:	b29b      	uxth	r3, r3
 80075c0:	029b      	lsls	r3, r3, #10
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	e030      	b.n	8007632 <USB_EPStartXfer+0x155e>
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d128      	bne.n	8007632 <USB_EPStartXfer+0x155e>
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007604:	4413      	add	r3, r2
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800760a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	011a      	lsls	r2, r3, #4
 8007618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800761c:	4413      	add	r3, r2
 800761e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007622:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8085 	bne.w	800775c <USB_EPStartXfer+0x1688>
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800768e:	4413      	add	r3, r2
 8007690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076b2:	d923      	bls.n	80076fc <USB_EPStartXfer+0x1628>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x1600>
 80076ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e05c      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10c      	bne.n	800771e <USB_EPStartXfer+0x164a>
 8007704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e04b      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <USB_EPStartXfer+0x166a>
 8007734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007738:	3301      	adds	r3, #1
 800773a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800773e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e02c      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d124      	bne.n	80077b6 <USB_EPStartXfer+0x16e2>
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007782:	4413      	add	r3, r2
 8007784:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	011a      	lsls	r2, r3, #4
 8007796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800779a:	4413      	add	r3, r2
 800779c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e001      	b.n	80077b6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e03a      	b.n	800782c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	441a      	add	r2, r3
 8007812:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800781a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800781e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007826:	b29b      	uxth	r3, r3
 8007828:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d020      	beq.n	800788a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785e:	81bb      	strh	r3, [r7, #12]
 8007860:	89bb      	ldrh	r3, [r7, #12]
 8007862:	f083 0310 	eor.w	r3, r3, #16
 8007866:	81bb      	strh	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	441a      	add	r2, r3
 8007872:	89bb      	ldrh	r3, [r7, #12]
 8007874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800787c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007884:	b29b      	uxth	r3, r3
 8007886:	8013      	strh	r3, [r2, #0]
 8007888:	e01f      	b.n	80078ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800789c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a0:	81fb      	strh	r3, [r7, #14]
 80078a2:	89fb      	ldrh	r3, [r7, #14]
 80078a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078a8:	81fb      	strh	r3, [r7, #14]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	89fb      	ldrh	r3, [r7, #14]
 80078b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	7b1b      	ldrb	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 809d 	bne.w	8007a24 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d04c      	beq.n	800798c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	823b      	strh	r3, [r7, #16]
 8007900:	8a3b      	ldrh	r3, [r7, #16]
 8007902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01b      	beq.n	8007942 <USB_EPClearStall+0x6c>
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800791c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007920:	81fb      	strh	r3, [r7, #14]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	441a      	add	r2, r3
 800792c:	89fb      	ldrh	r3, [r7, #14]
 800792e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	78db      	ldrb	r3, [r3, #3]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d06c      	beq.n	8007a24 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800795c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007960:	81bb      	strh	r3, [r7, #12]
 8007962:	89bb      	ldrh	r3, [r7, #12]
 8007964:	f083 0320 	eor.w	r3, r3, #32
 8007968:	81bb      	strh	r3, [r7, #12]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	89bb      	ldrh	r3, [r7, #12]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]
 800798a:	e04b      	b.n	8007a24 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	82fb      	strh	r3, [r7, #22]
 800799a:	8afb      	ldrh	r3, [r7, #22]
 800799c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01b      	beq.n	80079dc <USB_EPClearStall+0x106>
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	82bb      	strh	r3, [r7, #20]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	8abb      	ldrh	r3, [r7, #20]
 80079c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d8:	b29b      	uxth	r3, r3
 80079da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f2:	827b      	strh	r3, [r7, #18]
 80079f4:	8a7b      	ldrh	r3, [r7, #18]
 80079f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079fa:	827b      	strh	r3, [r7, #18]
 80079fc:	8a7b      	ldrh	r3, [r7, #18]
 80079fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a02:	827b      	strh	r3, [r7, #18]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	8a7b      	ldrh	r3, [r7, #18]
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2280      	movs	r2, #128	@ 0x80
 8007a46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a90:	68fb      	ldr	r3, [r7, #12]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr

08007a9c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b08b      	sub	sp, #44	@ 0x2c
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	4611      	mov	r1, r2
 8007abe:	461a      	mov	r2, r3
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	80fb      	strh	r3, [r7, #6]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ac8:	88bb      	ldrh	r3, [r7, #4]
 8007aca:	3301      	adds	r3, #1
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	005a      	lsls	r2, r3, #1
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ae4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aea:	e01e      	b.n	8007b2a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	3301      	adds	r3, #1
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b21a      	sxth	r2, r3
 8007afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	b21b      	sxth	r3, r3
 8007b04:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	8a7a      	ldrh	r2, [r7, #18]
 8007b0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	3302      	adds	r3, #2
 8007b10:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	3302      	adds	r3, #2
 8007b16:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	3b01      	subs	r3, #1
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1dd      	bne.n	8007aec <USB_WritePMA+0x3a>
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	372c      	adds	r7, #44	@ 0x2c
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b08b      	sub	sp, #44	@ 0x2c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4611      	mov	r1, r2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	80fb      	strh	r3, [r7, #6]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b52:	88bb      	ldrh	r3, [r7, #4]
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	005a      	lsls	r2, r3, #1
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b6e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b74:	e01b      	b.n	8007bae <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	3302      	adds	r3, #2
 8007b82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	3b01      	subs	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e0      	bne.n	8007b76 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007bb4:	88bb      	ldrh	r3, [r7, #4]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	701a      	strb	r2, [r3, #0]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	372c      	adds	r7, #44	@ 0x2c
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr

08007bda <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007be6:	2304      	movs	r3, #4
 8007be8:	2203      	movs	r2, #3
 8007bea:	2181      	movs	r1, #129	@ 0x81
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fc80 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007bf8:	2010      	movs	r0, #16
 8007bfa:	f001 fd8d 	bl	8009718 <USBD_static_malloc>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007c10:	2302      	movs	r3, #2
 8007c12:	e005      	b.n	8007c20 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007c34:	2181      	movs	r1, #129	@ 0x81
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fc81 	bl	800953e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fd6c 	bl	8009730 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d045      	beq.n	8007d26 <USBD_HID_Setup+0xba>
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	f040 80d3 	bne.w	8007e46 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	3b02      	subs	r3, #2
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d835      	bhi.n	8007d16 <USBD_HID_Setup+0xaa>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <USBD_HID_Setup+0x44>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007d07 	.word	0x08007d07
 8007cb4:	08007ce7 	.word	0x08007ce7
 8007cb8:	08007d17 	.word	0x08007d17
 8007cbc:	08007d17 	.word	0x08007d17
 8007cc0:	08007d17 	.word	0x08007d17
 8007cc4:	08007d17 	.word	0x08007d17
 8007cc8:	08007d17 	.word	0x08007d17
 8007ccc:	08007d17 	.word	0x08007d17
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cd9 	.word	0x08007cd9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	885b      	ldrh	r3, [r3, #2]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	601a      	str	r2, [r3, #0]
          break;
 8007ce4:	e01e      	b.n	8007d24 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f941 	bl	8008f74 <USBD_CtlSendData>
          break;
 8007cf2:	e017      	b.n	8007d24 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	885b      	ldrh	r3, [r3, #2]
 8007cf8:	0a1b      	lsrs	r3, r3, #8
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]
          break;
 8007d04:	e00e      	b.n	8007d24 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 f930 	bl	8008f74 <USBD_CtlSendData>
          break;
 8007d14:	e006      	b.n	8007d24 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f8c1 	bl	8008ea0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	75fb      	strb	r3, [r7, #23]
          break;
 8007d22:	bf00      	nop
      }
      break;
 8007d24:	e096      	b.n	8007e54 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	785b      	ldrb	r3, [r3, #1]
 8007d2a:	2b0b      	cmp	r3, #11
 8007d2c:	f200 8083 	bhi.w	8007e36 <USBD_HID_Setup+0x1ca>
 8007d30:	a201      	add	r2, pc, #4	@ (adr r2, 8007d38 <USBD_HID_Setup+0xcc>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d69 	.word	0x08007d69
 8007d3c:	08007e37 	.word	0x08007e37
 8007d40:	08007e37 	.word	0x08007e37
 8007d44:	08007e37 	.word	0x08007e37
 8007d48:	08007e37 	.word	0x08007e37
 8007d4c:	08007e37 	.word	0x08007e37
 8007d50:	08007d91 	.word	0x08007d91
 8007d54:	08007e37 	.word	0x08007e37
 8007d58:	08007e37 	.word	0x08007e37
 8007d5c:	08007e37 	.word	0x08007e37
 8007d60:	08007de9 	.word	0x08007de9
 8007d64:	08007e11 	.word	0x08007e11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d107      	bne.n	8007d82 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d72:	f107 030e 	add.w	r3, r7, #14
 8007d76:	2202      	movs	r2, #2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 f8fa 	bl	8008f74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d80:	e060      	b.n	8007e44 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f88b 	bl	8008ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8e:	e059      	b.n	8007e44 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	885b      	ldrh	r3, [r3, #2]
 8007d94:	0a1b      	lsrs	r3, r3, #8
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b22      	cmp	r3, #34	@ 0x22
 8007d9a:	d108      	bne.n	8007dae <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	88db      	ldrh	r3, [r3, #6]
 8007da0:	2b4a      	cmp	r3, #74	@ 0x4a
 8007da2:	bf28      	it	cs
 8007da4:	234a      	movcs	r3, #74	@ 0x4a
 8007da6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007da8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e60 <USBD_HID_Setup+0x1f4>)
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	e015      	b.n	8007dda <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b21      	cmp	r3, #33	@ 0x21
 8007db8:	d108      	bne.n	8007dcc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007dba:	4b2a      	ldr	r3, [pc, #168]	@ (8007e64 <USBD_HID_Setup+0x1f8>)
 8007dbc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	bf28      	it	cs
 8007dc6:	2309      	movcs	r3, #9
 8007dc8:	83fb      	strh	r3, [r7, #30]
 8007dca:	e006      	b.n	8007dda <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f866 	bl	8008ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8007dd8:	e034      	b.n	8007e44 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007dda:	8bfb      	ldrh	r3, [r7, #30]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	69b9      	ldr	r1, [r7, #24]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f8c7 	bl	8008f74 <USBD_CtlSendData>
          break;
 8007de6:	e02d      	b.n	8007e44 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d107      	bne.n	8007e02 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3308      	adds	r3, #8
 8007df6:	2201      	movs	r2, #1
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f8ba 	bl	8008f74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e00:	e020      	b.n	8007e44 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f84b 	bl	8008ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e0e:	e019      	b.n	8007e44 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d106      	bne.n	8007e28 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e26:	e00d      	b.n	8007e44 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 f838 	bl	8008ea0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e30:	2302      	movs	r3, #2
 8007e32:	75fb      	strb	r3, [r7, #23]
          break;
 8007e34:	e006      	b.n	8007e44 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f831 	bl	8008ea0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	75fb      	strb	r3, [r7, #23]
          break;
 8007e42:	bf00      	nop
      }
      break;
 8007e44:	e006      	b.n	8007e54 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f829 	bl	8008ea0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	75fb      	strb	r3, [r7, #23]
      break;
 8007e52:	bf00      	nop
  }

  return ret;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200000c8 	.word	0x200000c8
 8007e64:	200000b0 	.word	0x200000b0

08007e68 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d10c      	bne.n	8007ea2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	7b1b      	ldrb	r3, [r3, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d108      	bne.n	8007ea2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2201      	movs	r2, #1
 8007e94:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	2181      	movs	r1, #129	@ 0x81
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 fbf5 	bl	800968c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2222      	movs	r2, #34	@ 0x22
 8007eb8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007eba:	4b03      	ldr	r3, [pc, #12]	@ (8007ec8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000044 	.word	0x20000044

08007ecc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2222      	movs	r2, #34	@ 0x22
 8007ed8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007eda:	4b03      	ldr	r3, [pc, #12]	@ (8007ee8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000068 	.word	0x20000068

08007eec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2222      	movs	r2, #34	@ 0x22
 8007ef8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007efa:	4b03      	ldr	r3, [pc, #12]	@ (8007f08 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	2000008c 	.word	0x2000008c

08007f0c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1e:	2200      	movs	r2, #0
 8007f20:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
	...

08007f30 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007f3e:	4b03      	ldr	r3, [pc, #12]	@ (8007f4c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	200000bc 	.word	0x200000bc

08007f50 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f64:	2302      	movs	r3, #2
 8007f66:	e01a      	b.n	8007f9e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	79fa      	ldrb	r2, [r7, #7]
 8007f94:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f001 fa48 	bl	800942c <USBD_LL_Init>

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	e001      	b.n	8007fcc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fa6b 	bl	80094bc <USBD_LL_Start>

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008010:	2302      	movs	r3, #2
 8008012:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	4611      	mov	r1, r2
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3

  return USBD_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fed7 	bl	8008e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d016      	beq.n	80080d2 <USBD_LL_SetupStage+0x6a>
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d81c      	bhi.n	80080e2 <USBD_LL_SetupStage+0x7a>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <USBD_LL_SetupStage+0x4a>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d008      	beq.n	80080c2 <USBD_LL_SetupStage+0x5a>
 80080b0:	e017      	b.n	80080e2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f9ca 	bl	8008454 <USBD_StdDevReq>
      break;
 80080c0:	e01a      	b.n	80080f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa2c 	bl	8008528 <USBD_StdItfReq>
      break;
 80080d0:	e012      	b.n	80080f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa6c 	bl	80085b8 <USBD_StdEPReq>
      break;
 80080e0:	e00a      	b.n	80080f8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fa43 	bl	800957c <USBD_LL_StallEP>
      break;
 80080f6:	bf00      	nop
  }

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	460b      	mov	r3, r1
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d14b      	bne.n	80081ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800811c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008124:	2b03      	cmp	r3, #3
 8008126:	d134      	bne.n	8008192 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	429a      	cmp	r2, r3
 8008132:	d919      	bls.n	8008168 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	1ad2      	subs	r2, r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800814a:	429a      	cmp	r2, r3
 800814c:	d203      	bcs.n	8008156 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008152:	b29b      	uxth	r3, r3
 8008154:	e002      	b.n	800815c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800815a:	b29b      	uxth	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 ff35 	bl	8008fd0 <USBD_CtlContinueRx>
 8008166:	e038      	b.n	80081da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800817a:	2b03      	cmp	r3, #3
 800817c:	d105      	bne.n	800818a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 ff32 	bl	8008ff4 <USBD_CtlSendStatus>
 8008190:	e023      	b.n	80081da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008198:	2b05      	cmp	r3, #5
 800819a:	d11e      	bne.n	80081da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f001 f9e8 	bl	800957c <USBD_LL_StallEP>
 80081ac:	e015      	b.n	80081da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00d      	beq.n	80081d6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d108      	bne.n	80081d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	7afa      	ldrb	r2, [r7, #11]
 80081ce:	4611      	mov	r1, r2
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	4798      	blx	r3
 80081d4:	e001      	b.n	80081da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081d6:	2302      	movs	r3, #2
 80081d8:	e000      	b.n	80081dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	460b      	mov	r3, r1
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d17f      	bne.n	80082f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3314      	adds	r3, #20
 80081fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008204:	2b02      	cmp	r3, #2
 8008206:	d15c      	bne.n	80082c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	429a      	cmp	r2, r3
 8008212:	d915      	bls.n	8008240 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	1ad2      	subs	r2, r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	b29b      	uxth	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 febd 	bl	8008fac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f001 fa4a 	bl	80096d2 <USBD_LL_PrepareReceive>
 800823e:	e04e      	b.n	80082de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	6912      	ldr	r2, [r2, #16]
 8008248:	fbb3 f1f2 	udiv	r1, r3, r2
 800824c:	fb01 f202 	mul.w	r2, r1, r2
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d11c      	bne.n	8008290 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800825e:	429a      	cmp	r2, r3
 8008260:	d316      	bcc.n	8008290 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800826c:	429a      	cmp	r2, r3
 800826e:	d20f      	bcs.n	8008290 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fe99 	bl	8008fac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f001 fa22 	bl	80096d2 <USBD_LL_PrepareReceive>
 800828e:	e026      	b.n	80082de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d105      	bne.n	80082b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f001 f961 	bl	800957c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fead 	bl	800901a <USBD_CtlReceiveStatus>
 80082c0:	e00d      	b.n	80082de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d004      	beq.n	80082d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082d6:	2180      	movs	r1, #128	@ 0x80
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 f94f 	bl	800957c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d11d      	bne.n	8008324 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff fe81 	bl	8007ff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082f6:	e015      	b.n	8008324 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800830a:	2b03      	cmp	r3, #3
 800830c:	d108      	bne.n	8008320 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	7afa      	ldrb	r2, [r7, #11]
 8008318:	4611      	mov	r1, r2
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	4798      	blx	r3
 800831e:	e001      	b.n	8008324 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	e000      	b.n	8008326 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008336:	2340      	movs	r3, #64	@ 0x40
 8008338:	2200      	movs	r2, #0
 800833a:	2100      	movs	r1, #0
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f8d8 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2240      	movs	r2, #64	@ 0x40
 800834e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008352:	2340      	movs	r3, #64	@ 0x40
 8008354:	2200      	movs	r2, #0
 8008356:	2180      	movs	r1, #128	@ 0x80
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f8ca 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2240      	movs	r2, #64	@ 0x40
 8008368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6852      	ldr	r2, [r2, #4]
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	4611      	mov	r1, r2
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
  }

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2204      	movs	r2, #4
 80083e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr

080083f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008404:	2b04      	cmp	r3, #4
 8008406:	d105      	bne.n	8008414 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842e:	2b03      	cmp	r3, #3
 8008430:	d10b      	bne.n	800844a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800846a:	2b40      	cmp	r3, #64	@ 0x40
 800846c:	d005      	beq.n	800847a <USBD_StdDevReq+0x26>
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d84f      	bhi.n	8008512 <USBD_StdDevReq+0xbe>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <USBD_StdDevReq+0x36>
 8008476:	2b20      	cmp	r3, #32
 8008478:	d14b      	bne.n	8008512 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
      break;
 8008488:	e048      	b.n	800851c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d839      	bhi.n	8008506 <USBD_StdDevReq+0xb2>
 8008492:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <USBD_StdDevReq+0x44>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084e9 	.word	0x080084e9
 800849c:	080084fd 	.word	0x080084fd
 80084a0:	08008507 	.word	0x08008507
 80084a4:	080084f3 	.word	0x080084f3
 80084a8:	08008507 	.word	0x08008507
 80084ac:	080084cb 	.word	0x080084cb
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	08008507 	.word	0x08008507
 80084b8:	080084df 	.word	0x080084df
 80084bc:	080084d5 	.word	0x080084d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9dc 	bl	8008880 <USBD_GetDescriptor>
          break;
 80084c8:	e022      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb3f 	bl	8008b50 <USBD_SetAddress>
          break;
 80084d2:	e01d      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fb7e 	bl	8008bd8 <USBD_SetConfig>
          break;
 80084dc:	e018      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fc07 	bl	8008cf4 <USBD_GetConfig>
          break;
 80084e6:	e013      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fc37 	bl	8008d5e <USBD_GetStatus>
          break;
 80084f0:	e00e      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fc65 	bl	8008dc4 <USBD_SetFeature>
          break;
 80084fa:	e009      	b.n	8008510 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fc74 	bl	8008dec <USBD_ClrFeature>
          break;
 8008504:	e004      	b.n	8008510 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fcc9 	bl	8008ea0 <USBD_CtlError>
          break;
 800850e:	bf00      	nop
      }
      break;
 8008510:	e004      	b.n	800851c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fcc3 	bl	8008ea0 <USBD_CtlError>
      break;
 800851a:	bf00      	nop
  }

  return ret;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop

08008528 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800853e:	2b40      	cmp	r3, #64	@ 0x40
 8008540:	d005      	beq.n	800854e <USBD_StdItfReq+0x26>
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	d82e      	bhi.n	80085a4 <USBD_StdItfReq+0x7c>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <USBD_StdItfReq+0x26>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d12a      	bne.n	80085a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008554:	3b01      	subs	r3, #1
 8008556:	2b02      	cmp	r3, #2
 8008558:	d81d      	bhi.n	8008596 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	889b      	ldrh	r3, [r3, #4]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d813      	bhi.n	800858c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	88db      	ldrh	r3, [r3, #6]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d110      	bne.n	80085a0 <USBD_StdItfReq+0x78>
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10d      	bne.n	80085a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fd35 	bl	8008ff4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800858a:	e009      	b.n	80085a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fc86 	bl	8008ea0 <USBD_CtlError>
          break;
 8008594:	e004      	b.n	80085a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc81 	bl	8008ea0 <USBD_CtlError>
          break;
 800859e:	e000      	b.n	80085a2 <USBD_StdItfReq+0x7a>
          break;
 80085a0:	bf00      	nop
      }
      break;
 80085a2:	e004      	b.n	80085ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fc7a 	bl	8008ea0 <USBD_CtlError>
      break;
 80085ac:	bf00      	nop
  }

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	889b      	ldrh	r3, [r3, #4]
 80085ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085d4:	2b40      	cmp	r3, #64	@ 0x40
 80085d6:	d007      	beq.n	80085e8 <USBD_StdEPReq+0x30>
 80085d8:	2b40      	cmp	r3, #64	@ 0x40
 80085da:	f200 8146 	bhi.w	800886a <USBD_StdEPReq+0x2b2>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <USBD_StdEPReq+0x40>
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	f040 8141 	bne.w	800886a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
      break;
 80085f6:	e13d      	b.n	8008874 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008600:	2b20      	cmp	r3, #32
 8008602:	d10a      	bne.n	800861a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	e12d      	b.n	8008876 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b03      	cmp	r3, #3
 8008620:	d007      	beq.n	8008632 <USBD_StdEPReq+0x7a>
 8008622:	2b03      	cmp	r3, #3
 8008624:	f300 811b 	bgt.w	800885e <USBD_StdEPReq+0x2a6>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d072      	beq.n	8008712 <USBD_StdEPReq+0x15a>
 800862c:	2b01      	cmp	r3, #1
 800862e:	d03a      	beq.n	80086a6 <USBD_StdEPReq+0xee>
 8008630:	e115      	b.n	800885e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008638:	2b02      	cmp	r3, #2
 800863a:	d002      	beq.n	8008642 <USBD_StdEPReq+0x8a>
 800863c:	2b03      	cmp	r3, #3
 800863e:	d015      	beq.n	800866c <USBD_StdEPReq+0xb4>
 8008640:	e02b      	b.n	800869a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <USBD_StdEPReq+0xaa>
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b80      	cmp	r3, #128	@ 0x80
 800864c:	d009      	beq.n	8008662 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 ff92 	bl	800957c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 ff8e 	bl	800957c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008660:	e020      	b.n	80086a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc1b 	bl	8008ea0 <USBD_CtlError>
              break;
 800866a:	e01b      	b.n	80086a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	885b      	ldrh	r3, [r3, #2]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10e      	bne.n	8008692 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <USBD_StdEPReq+0xda>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b80      	cmp	r3, #128	@ 0x80
 800867e:	d008      	beq.n	8008692 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 ff75 	bl	800957c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fcae 	bl	8008ff4 <USBD_CtlSendStatus>

              break;
 8008698:	e004      	b.n	80086a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fbff 	bl	8008ea0 <USBD_CtlError>
              break;
 80086a2:	bf00      	nop
          }
          break;
 80086a4:	e0e0      	b.n	8008868 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d002      	beq.n	80086b6 <USBD_StdEPReq+0xfe>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d015      	beq.n	80086e0 <USBD_StdEPReq+0x128>
 80086b4:	e026      	b.n	8008704 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00c      	beq.n	80086d6 <USBD_StdEPReq+0x11e>
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b80      	cmp	r3, #128	@ 0x80
 80086c0:	d009      	beq.n	80086d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 ff58 	bl	800957c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086cc:	2180      	movs	r1, #128	@ 0x80
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 ff54 	bl	800957c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086d4:	e01c      	b.n	8008710 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fbe1 	bl	8008ea0 <USBD_CtlError>
              break;
 80086de:	e017      	b.n	8008710 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	885b      	ldrh	r3, [r3, #2]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d112      	bne.n	800870e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 ff5f 	bl	80095ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fc79 	bl	8008ff4 <USBD_CtlSendStatus>
              }
              break;
 8008702:	e004      	b.n	800870e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fbca 	bl	8008ea0 <USBD_CtlError>
              break;
 800870c:	e000      	b.n	8008710 <USBD_StdEPReq+0x158>
              break;
 800870e:	bf00      	nop
          }
          break;
 8008710:	e0aa      	b.n	8008868 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008718:	2b02      	cmp	r3, #2
 800871a:	d002      	beq.n	8008722 <USBD_StdEPReq+0x16a>
 800871c:	2b03      	cmp	r3, #3
 800871e:	d032      	beq.n	8008786 <USBD_StdEPReq+0x1ce>
 8008720:	e097      	b.n	8008852 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <USBD_StdEPReq+0x180>
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b80      	cmp	r3, #128	@ 0x80
 800872c:	d004      	beq.n	8008738 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fbb5 	bl	8008ea0 <USBD_CtlError>
                break;
 8008736:	e091      	b.n	800885c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873c:	2b00      	cmp	r3, #0
 800873e:	da0b      	bge.n	8008758 <USBD_StdEPReq+0x1a0>
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	3310      	adds	r3, #16
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	4413      	add	r3, r2
 8008754:	3304      	adds	r3, #4
 8008756:	e00b      	b.n	8008770 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	4413      	add	r3, r2
 800876e:	3304      	adds	r3, #4
 8008770:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2202      	movs	r2, #2
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fbf8 	bl	8008f74 <USBD_CtlSendData>
              break;
 8008784:	e06a      	b.n	800885c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	da11      	bge.n	80087b2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3318      	adds	r3, #24
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d117      	bne.n	80087d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb78 	bl	8008ea0 <USBD_CtlError>
                  break;
 80087b0:	e054      	b.n	800885c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d104      	bne.n	80087d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb65 	bl	8008ea0 <USBD_CtlError>
                  break;
 80087d6:	e041      	b.n	800885c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	da0b      	bge.n	80087f8 <USBD_StdEPReq+0x240>
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	3310      	adds	r3, #16
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	3304      	adds	r3, #4
 80087f6:	e00b      	b.n	8008810 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	3304      	adds	r3, #4
 8008810:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <USBD_StdEPReq+0x266>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b80      	cmp	r3, #128	@ 0x80
 800881c:	d103      	bne.n	8008826 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e00e      	b.n	8008844 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fee4 	bl	80095f8 <USBD_LL_IsStallEP>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2201      	movs	r2, #1
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e002      	b.n	8008844 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2202      	movs	r2, #2
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fb92 	bl	8008f74 <USBD_CtlSendData>
              break;
 8008850:	e004      	b.n	800885c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fb23 	bl	8008ea0 <USBD_CtlError>
              break;
 800885a:	bf00      	nop
          }
          break;
 800885c:	e004      	b.n	8008868 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb1d 	bl	8008ea0 <USBD_CtlError>
          break;
 8008866:	bf00      	nop
      }
      break;
 8008868:	e004      	b.n	8008874 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb17 	bl	8008ea0 <USBD_CtlError>
      break;
 8008872:	bf00      	nop
  }

  return ret;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	885b      	ldrh	r3, [r3, #2]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	2b06      	cmp	r3, #6
 80088a2:	f200 8128 	bhi.w	8008af6 <USBD_GetDescriptor+0x276>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <USBD_GetDescriptor+0x2c>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088e1 	.word	0x080088e1
 80088b4:	08008921 	.word	0x08008921
 80088b8:	08008af7 	.word	0x08008af7
 80088bc:	08008af7 	.word	0x08008af7
 80088c0:	08008a97 	.word	0x08008a97
 80088c4:	08008ac3 	.word	0x08008ac3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
      break;
 80088de:	e112      	b.n	8008b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7c1b      	ldrb	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008902:	e100      	b.n	8008b06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	2202      	movs	r2, #2
 800891c:	701a      	strb	r2, [r3, #0]
      break;
 800891e:	e0f2      	b.n	8008b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b05      	cmp	r3, #5
 8008928:	f200 80ac 	bhi.w	8008a84 <USBD_GetDescriptor+0x204>
 800892c:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <USBD_GetDescriptor+0xb4>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008981 	.word	0x08008981
 800893c:	080089b5 	.word	0x080089b5
 8008940:	080089e9 	.word	0x080089e9
 8008944:	08008a1d 	.word	0x08008a1d
 8008948:	08008a51 	.word	0x08008a51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896e:	e091      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa94 	bl	8008ea0 <USBD_CtlError>
            err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
          break;
 800897e:	e089      	b.n	8008a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e077      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa7a 	bl	8008ea0 <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e06f      	b.n	8008a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e05d      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa60 	bl	8008ea0 <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e055      	b.n	8008a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0a:	e043      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa46 	bl	8008ea0 <USBD_CtlError>
            err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1a:	e03b      	b.n	8008a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3e:	e029      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa2c 	bl	8008ea0 <USBD_CtlError>
            err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4e:	e021      	b.n	8008a94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a72:	e00f      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa12 	bl	8008ea0 <USBD_CtlError>
            err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
          break;
 8008a82:	e007      	b.n	8008a94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa0a 	bl	8008ea0 <USBD_CtlError>
          err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a92:	e038      	b.n	8008b06 <USBD_GetDescriptor+0x286>
 8008a94:	e037      	b.n	8008b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7c1b      	ldrb	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa6:	f107 0208 	add.w	r2, r7, #8
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4798      	blx	r3
 8008aae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab0:	e029      	b.n	8008b06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f9f3 	bl	8008ea0 <USBD_CtlError>
        err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac0:	e021      	b.n	8008b06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7c1b      	ldrb	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad2:	f107 0208 	add.w	r2, r7, #8
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4798      	blx	r3
 8008ada:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae4:	e00f      	b.n	8008b06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9d9 	bl	8008ea0 <USBD_CtlError>
        err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
      break;
 8008af4:	e007      	b.n	8008b06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9d1 	bl	8008ea0 <USBD_CtlError>
      err++;
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	3301      	adds	r3, #1
 8008b02:	72fb      	strb	r3, [r7, #11]
      break;
 8008b04:	bf00      	nop
  }

  if (err != 0U)
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11c      	bne.n	8008b46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b0c:	893b      	ldrh	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d011      	beq.n	8008b36 <USBD_GetDescriptor+0x2b6>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	88db      	ldrh	r3, [r3, #6]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00d      	beq.n	8008b36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88da      	ldrh	r2, [r3, #6]
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bf28      	it	cs
 8008b24:	4613      	movcs	r3, r2
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2a:	893b      	ldrh	r3, [r7, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa1f 	bl	8008f74 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88db      	ldrh	r3, [r3, #6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d104      	bne.n	8008b48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa58 	bl	8008ff4 <USBD_CtlSendStatus>
 8008b44:	e000      	b.n	8008b48 <USBD_GetDescriptor+0x2c8>
    return;
 8008b46:	bf00      	nop
    }
  }
}
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop

08008b50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	889b      	ldrh	r3, [r3, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d130      	bne.n	8008bc4 <USBD_SetAddress+0x74>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	88db      	ldrh	r3, [r3, #6]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d12c      	bne.n	8008bc4 <USBD_SetAddress+0x74>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	885b      	ldrh	r3, [r3, #2]
 8008b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b70:	d828      	bhi.n	8008bc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d104      	bne.n	8008b92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f988 	bl	8008ea0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b90:	e01d      	b.n	8008bce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7bfa      	ldrb	r2, [r7, #15]
 8008b96:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fd55 	bl	800964e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa25 	bl	8008ff4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb8:	e009      	b.n	8008bce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e004      	b.n	8008bce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f96a 	bl	8008ea0 <USBD_CtlError>
  }
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	885b      	ldrh	r3, [r3, #2]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b41      	ldr	r3, [pc, #260]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008bea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bec:	4b40      	ldr	r3, [pc, #256]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d904      	bls.n	8008bfe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f952 	bl	8008ea0 <USBD_CtlError>
 8008bfc:	e075      	b.n	8008cea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d002      	beq.n	8008c0e <USBD_SetConfig+0x36>
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d023      	beq.n	8008c54 <USBD_SetConfig+0x7c>
 8008c0c:	e062      	b.n	8008cd4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c0e:	4b38      	ldr	r3, [pc, #224]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01a      	beq.n	8008c4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c16:	4b36      	ldr	r3, [pc, #216]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2203      	movs	r2, #3
 8008c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c28:	4b31      	ldr	r3, [pc, #196]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff f9e8 	bl	8008004 <USBD_SetClassConfig>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d104      	bne.n	8008c44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f92f 	bl	8008ea0 <USBD_CtlError>
            return;
 8008c42:	e052      	b.n	8008cea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9d5 	bl	8008ff4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c4a:	e04e      	b.n	8008cea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f9d1 	bl	8008ff4 <USBD_CtlSendStatus>
        break;
 8008c52:	e04a      	b.n	8008cea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c54:	4b26      	ldr	r3, [pc, #152]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d112      	bne.n	8008c82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008c64:	4b22      	ldr	r3, [pc, #136]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c6e:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f9e4 	bl	8008042 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f9ba 	bl	8008ff4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c80:	e033      	b.n	8008cea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c82:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d01d      	beq.n	8008ccc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff f9d2 	bl	8008042 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c9e:	4b14      	ldr	r3, [pc, #80]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ca8:	4b11      	ldr	r3, [pc, #68]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff f9a8 	bl	8008004 <USBD_SetClassConfig>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d104      	bne.n	8008cc4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8ef 	bl	8008ea0 <USBD_CtlError>
            return;
 8008cc2:	e012      	b.n	8008cea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f995 	bl	8008ff4 <USBD_CtlSendStatus>
        break;
 8008cca:	e00e      	b.n	8008cea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f991 	bl	8008ff4 <USBD_CtlSendStatus>
        break;
 8008cd2:	e00a      	b.n	8008cea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f8e2 	bl	8008ea0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cdc:	4b04      	ldr	r3, [pc, #16]	@ (8008cf0 <USBD_SetConfig+0x118>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff f9ad 	bl	8008042 <USBD_ClrClassConfig>
        break;
 8008ce8:	bf00      	nop
    }
  }
}
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	2000031c 	.word	0x2000031c

08008cf4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	88db      	ldrh	r3, [r3, #6]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d004      	beq.n	8008d10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f8c9 	bl	8008ea0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d0e:	e022      	b.n	8008d56 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dc02      	bgt.n	8008d20 <USBD_GetConfig+0x2c>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dc03      	bgt.n	8008d26 <USBD_GetConfig+0x32>
 8008d1e:	e015      	b.n	8008d4c <USBD_GetConfig+0x58>
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetConfig+0x48>
 8008d24:	e012      	b.n	8008d4c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	2201      	movs	r2, #1
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f91d 	bl	8008f74 <USBD_CtlSendData>
        break;
 8008d3a:	e00c      	b.n	8008d56 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	2201      	movs	r2, #1
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f915 	bl	8008f74 <USBD_CtlSendData>
        break;
 8008d4a:	e004      	b.n	8008d56 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8a6 	bl	8008ea0 <USBD_CtlError>
        break;
 8008d54:	bf00      	nop
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d81e      	bhi.n	8008db2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	88db      	ldrh	r3, [r3, #6]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d004      	beq.n	8008d86 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f88e 	bl	8008ea0 <USBD_CtlError>
        break;
 8008d84:	e01a      	b.n	8008dbc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f043 0202 	orr.w	r2, r3, #2
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	330c      	adds	r3, #12
 8008da6:	2202      	movs	r2, #2
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f8e2 	bl	8008f74 <USBD_CtlSendData>
      break;
 8008db0:	e004      	b.n	8008dbc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f873 	bl	8008ea0 <USBD_CtlError>
      break;
 8008dba:	bf00      	nop
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	885b      	ldrh	r3, [r3, #2]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d106      	bne.n	8008de4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f908 	bl	8008ff4 <USBD_CtlSendStatus>
  }
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d80b      	bhi.n	8008e1a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d10c      	bne.n	8008e24 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8ee 	bl	8008ff4 <USBD_CtlSendStatus>
      }
      break;
 8008e18:	e004      	b.n	8008e24 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f83f 	bl	8008ea0 <USBD_CtlError>
      break;
 8008e22:	e000      	b.n	8008e26 <USBD_ClrFeature+0x3a>
      break;
 8008e24:	bf00      	nop
  }
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781a      	ldrb	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	785a      	ldrb	r2, [r3, #1]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	3303      	adds	r3, #3
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	3304      	adds	r3, #4
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	3305      	adds	r3, #5
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3306      	adds	r3, #6
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	3307      	adds	r3, #7
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	80da      	strh	r2, [r3, #6]

}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008eaa:	2180      	movs	r1, #128	@ 0x80
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fb65 	bl	800957c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fb61 	bl	800957c <USBD_LL_StallEP>
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b086      	sub	sp, #24
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d032      	beq.n	8008f3e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f834 	bl	8008f46 <USBD_GetLen>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	75fa      	strb	r2, [r7, #23]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	75fa      	strb	r2, [r7, #23]
 8008f04:	461a      	mov	r2, r3
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f0e:	e012      	b.n	8008f36 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	60fa      	str	r2, [r7, #12]
 8008f16:	7dfa      	ldrb	r2, [r7, #23]
 8008f18:	1c51      	adds	r1, r2, #1
 8008f1a:	75f9      	strb	r1, [r7, #23]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	440a      	add	r2, r1
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	75fa      	strb	r2, [r7, #23]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e8      	bne.n	8008f10 <USBD_GetString+0x4e>
    }
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f52:	e005      	b.n	8008f60 <USBD_GetLen+0x1a>
  {
    len++;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	3301      	adds	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1f5      	bne.n	8008f54 <USBD_GetLen+0xe>
  }

  return len;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f8a:	88fa      	ldrh	r2, [r7, #6]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb75 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fb63 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fb74 	bl	80096d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2204      	movs	r2, #4
 8009000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009004:	2300      	movs	r3, #0
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fb3e 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2205      	movs	r2, #5
 8009026:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb4e 	bl	80096d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009044:	2200      	movs	r2, #0
 8009046:	490e      	ldr	r1, [pc, #56]	@ (8009080 <MX_USB_DEVICE_Init+0x40>)
 8009048:	480e      	ldr	r0, [pc, #56]	@ (8009084 <MX_USB_DEVICE_Init+0x44>)
 800904a:	f7fe ff81 	bl	8007f50 <USBD_Init>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009054:	f7f7 fbf4 	bl	8000840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009058:	490b      	ldr	r1, [pc, #44]	@ (8009088 <MX_USB_DEVICE_Init+0x48>)
 800905a:	480a      	ldr	r0, [pc, #40]	@ (8009084 <MX_USB_DEVICE_Init+0x44>)
 800905c:	f7fe ffa3 	bl	8007fa6 <USBD_RegisterClass>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009066:	f7f7 fbeb 	bl	8000840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800906a:	4806      	ldr	r0, [pc, #24]	@ (8009084 <MX_USB_DEVICE_Init+0x44>)
 800906c:	f7fe ffb4 	bl	8007fd8 <USBD_Start>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009076:	f7f7 fbe3 	bl	8000840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800907a:	bf00      	nop
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000114 	.word	0x20000114
 8009084:	20000320 	.word	0x20000320
 8009088:	2000000c 	.word	0x2000000c

0800908c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2212      	movs	r2, #18
 800909c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800909e:	4b03      	ldr	r3, [pc, #12]	@ (80090ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000130 	.word	0x20000130

080090b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2204      	movs	r2, #4
 80090c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090c2:	4b03      	ldr	r3, [pc, #12]	@ (80090d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000144 	.word	0x20000144

080090d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	4907      	ldr	r1, [pc, #28]	@ (8009108 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ea:	4808      	ldr	r0, [pc, #32]	@ (800910c <USBD_FS_ProductStrDescriptor+0x38>)
 80090ec:	f7ff fee9 	bl	8008ec2 <USBD_GetString>
 80090f0:	e004      	b.n	80090fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	4904      	ldr	r1, [pc, #16]	@ (8009108 <USBD_FS_ProductStrDescriptor+0x34>)
 80090f6:	4805      	ldr	r0, [pc, #20]	@ (800910c <USBD_FS_ProductStrDescriptor+0x38>)
 80090f8:	f7ff fee3 	bl	8008ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090fc:	4b02      	ldr	r3, [pc, #8]	@ (8009108 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200005e4 	.word	0x200005e4
 800910c:	08009820 	.word	0x08009820

08009110 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	4904      	ldr	r1, [pc, #16]	@ (8009130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009120:	4804      	ldr	r0, [pc, #16]	@ (8009134 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009122:	f7ff fece 	bl	8008ec2 <USBD_GetString>
  return USBD_StrDesc;
 8009126:	4b02      	ldr	r3, [pc, #8]	@ (8009130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200005e4 	.word	0x200005e4
 8009134:	08009838 	.word	0x08009838

08009138 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	6039      	str	r1, [r7, #0]
 8009142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	221a      	movs	r2, #26
 8009148:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800914a:	f000 f843 	bl	80091d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800914e:	4b02      	ldr	r3, [pc, #8]	@ (8009158 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20000148 	.word	0x20000148

0800915c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4907      	ldr	r1, [pc, #28]	@ (8009190 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009172:	4808      	ldr	r0, [pc, #32]	@ (8009194 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009174:	f7ff fea5 	bl	8008ec2 <USBD_GetString>
 8009178:	e004      	b.n	8009184 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4904      	ldr	r1, [pc, #16]	@ (8009190 <USBD_FS_ConfigStrDescriptor+0x34>)
 800917e:	4805      	ldr	r0, [pc, #20]	@ (8009194 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009180:	f7ff fe9f 	bl	8008ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009184:	4b02      	ldr	r3, [pc, #8]	@ (8009190 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	200005e4 	.word	0x200005e4
 8009194:	0800983c 	.word	0x0800983c

08009198 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	4907      	ldr	r1, [pc, #28]	@ (80091cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091ae:	4808      	ldr	r0, [pc, #32]	@ (80091d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091b0:	f7ff fe87 	bl	8008ec2 <USBD_GetString>
 80091b4:	e004      	b.n	80091c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4904      	ldr	r1, [pc, #16]	@ (80091cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091ba:	4805      	ldr	r0, [pc, #20]	@ (80091d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091bc:	f7ff fe81 	bl	8008ec2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091c0:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200005e4 	.word	0x200005e4
 80091d0:	08009848 	.word	0x08009848

080091d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091da:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <Get_SerialNum+0x44>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091e0:	4b0e      	ldr	r3, [pc, #56]	@ (800921c <Get_SerialNum+0x48>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009220 <Get_SerialNum+0x4c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091fa:	2208      	movs	r2, #8
 80091fc:	4909      	ldr	r1, [pc, #36]	@ (8009224 <Get_SerialNum+0x50>)
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f814 	bl	800922c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009204:	2204      	movs	r2, #4
 8009206:	4908      	ldr	r1, [pc, #32]	@ (8009228 <Get_SerialNum+0x54>)
 8009208:	68b8      	ldr	r0, [r7, #8]
 800920a:	f000 f80f 	bl	800922c <IntToUnicode>
  }
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	1ffff7e8 	.word	0x1ffff7e8
 800921c:	1ffff7ec 	.word	0x1ffff7ec
 8009220:	1ffff7f0 	.word	0x1ffff7f0
 8009224:	2000014a 	.word	0x2000014a
 8009228:	2000015a 	.word	0x2000015a

0800922c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800923e:	2300      	movs	r3, #0
 8009240:	75fb      	strb	r3, [r7, #23]
 8009242:	e027      	b.n	8009294 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0f1b      	lsrs	r3, r3, #28
 8009248:	2b09      	cmp	r3, #9
 800924a:	d80b      	bhi.n	8009264 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	0f1b      	lsrs	r3, r3, #28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4619      	mov	r1, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	440b      	add	r3, r1
 800925c:	3230      	adds	r2, #48	@ 0x30
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	e00a      	b.n	800927a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	0f1b      	lsrs	r3, r3, #28
 8009268:	b2da      	uxtb	r2, r3
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4619      	mov	r1, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	440b      	add	r3, r1
 8009274:	3237      	adds	r2, #55	@ 0x37
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	3301      	adds	r3, #1
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	3301      	adds	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]
 8009294:	7dfa      	ldrb	r2, [r7, #23]
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	429a      	cmp	r2, r3
 800929a:	d3d3      	bcc.n	8009244 <IntToUnicode+0x18>
  }
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0d      	ldr	r2, [pc, #52]	@ (80092ec <HAL_PCD_MspInit+0x44>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d113      	bne.n	80092e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092ba:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <HAL_PCD_MspInit+0x48>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4a0c      	ldr	r2, [pc, #48]	@ (80092f0 <HAL_PCD_MspInit+0x48>)
 80092c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092c4:	61d3      	str	r3, [r2, #28]
 80092c6:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <HAL_PCD_MspInit+0x48>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80092d2:	2200      	movs	r2, #0
 80092d4:	2100      	movs	r1, #0
 80092d6:	2014      	movs	r0, #20
 80092d8:	f7f8 f849 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80092dc:	2014      	movs	r0, #20
 80092de:	f7f8 f862 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	40005c00 	.word	0x40005c00
 80092f0:	40021000 	.word	0x40021000

080092f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009308:	4619      	mov	r1, r3
 800930a:	4610      	mov	r0, r2
 800930c:	f7fe feac 	bl	8008068 <USBD_LL_SetupStage>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	440b      	add	r3, r1
 8009338:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	4619      	mov	r1, r3
 8009342:	f7fe fede 	bl	8008102 <USBD_LL_DataOutStage>
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	440b      	add	r3, r1
 800936e:	3324      	adds	r3, #36	@ 0x24
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	4619      	mov	r1, r3
 8009376:	f7fe ff35 	bl	80081e4 <USBD_LL_DataInStage>
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff f845 	bl	8008420 <USBD_LL_SOF>
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	799b      	ldrb	r3, [r3, #6]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d001      	beq.n	80093b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093b2:	f7f7 fa45 	bl	8000840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fff5 	bl	80083b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe ffae 	bl	800832e <USBD_LL_Reset>
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe ffef 	bl	80083ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7a9b      	ldrb	r3, [r3, #10]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <HAL_PCD_SuspendCallback+0x30>)
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	4a03      	ldr	r2, [pc, #12]	@ (800940c <HAL_PCD_SuspendCallback+0x30>)
 80093fe:	f043 0306 	orr.w	r3, r3, #6
 8009402:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe ffe9 	bl	80083f6 <USBD_LL_Resume>
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1d      	ldr	r2, [pc, #116]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009440:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009444:	4b1b      	ldr	r3, [pc, #108]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009446:	4a1c      	ldr	r2, [pc, #112]	@ (80094b8 <USBD_LL_Init+0x8c>)
 8009448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800944a:	4b1a      	ldr	r3, [pc, #104]	@ (80094b4 <USBD_LL_Init+0x88>)
 800944c:	2208      	movs	r2, #8
 800944e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009450:	4b18      	ldr	r3, [pc, #96]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009452:	2202      	movs	r2, #2
 8009454:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009456:	4b17      	ldr	r3, [pc, #92]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009458:	2200      	movs	r2, #0
 800945a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800945c:	4b15      	ldr	r3, [pc, #84]	@ (80094b4 <USBD_LL_Init+0x88>)
 800945e:	2200      	movs	r2, #0
 8009460:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009462:	4b14      	ldr	r3, [pc, #80]	@ (80094b4 <USBD_LL_Init+0x88>)
 8009464:	2200      	movs	r2, #0
 8009466:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009468:	4812      	ldr	r0, [pc, #72]	@ (80094b4 <USBD_LL_Init+0x88>)
 800946a:	f7f8 fdff 	bl	800206c <HAL_PCD_Init>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009474:	f7f7 f9e4 	bl	8000840 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800947e:	2318      	movs	r3, #24
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	f7fa faf9 	bl	8003a7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800948e:	2358      	movs	r3, #88	@ 0x58
 8009490:	2200      	movs	r2, #0
 8009492:	2180      	movs	r1, #128	@ 0x80
 8009494:	f7fa faf1 	bl	8003a7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800949e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094a2:	2200      	movs	r2, #0
 80094a4:	2181      	movs	r1, #129	@ 0x81
 80094a6:	f7fa fae8 	bl	8003a7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200007e4 	.word	0x200007e4
 80094b8:	40005c00 	.word	0x40005c00

080094bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f8 fec0 	bl	8002258 <HAL_PCD_Start>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f93a 	bl	8009758 <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	461a      	mov	r2, r3
 8009500:	4603      	mov	r3, r0
 8009502:	70fb      	strb	r3, [r7, #3]
 8009504:	460b      	mov	r3, r1
 8009506:	70bb      	strb	r3, [r7, #2]
 8009508:	4613      	mov	r3, r2
 800950a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800951a:	78bb      	ldrb	r3, [r7, #2]
 800951c:	883a      	ldrh	r2, [r7, #0]
 800951e:	78f9      	ldrb	r1, [r7, #3]
 8009520:	f7f9 f814 	bl	800254c <HAL_PCD_EP_Open>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f914 	bl	8009758 <USBD_Get_USB_Status>
 8009530:	4603      	mov	r3, r0
 8009532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009534:	7bbb      	ldrb	r3, [r7, #14]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7f9 f852 	bl	8002606 <HAL_PCD_EP_Close>
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f8f5 	bl	8009758 <USBD_Get_USB_Status>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009596:	78fa      	ldrb	r2, [r7, #3]
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7f9 f8e3 	bl	8002766 <HAL_PCD_EP_SetStall>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f8d6 	bl	8009758 <USBD_Get_USB_Status>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f9 f924 	bl	8002826 <HAL_PCD_EP_ClrStall>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f8b7 	bl	8009758 <USBD_Get_USB_Status>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800960a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800960c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da0b      	bge.n	800962c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	440b      	add	r3, r1
 8009626:	3312      	adds	r3, #18
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	e00b      	b.n	8009644 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	440b      	add	r3, r1
 800963e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009642:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7f8 ff49 	bl	8002504 <HAL_PCD_SetAddress>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f86d 	bl	8009758 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	461a      	mov	r2, r3
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
 800969c:	4613      	mov	r3, r2
 800969e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ae:	893b      	ldrh	r3, [r7, #8]
 80096b0:	7af9      	ldrb	r1, [r7, #11]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	f7f9 f820 	bl	80026f8 <HAL_PCD_EP_Transmit>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f84a 	bl	8009758 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	461a      	mov	r2, r3
 80096de:	460b      	mov	r3, r1
 80096e0:	72fb      	strb	r3, [r7, #11]
 80096e2:	4613      	mov	r3, r2
 80096e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096f4:	893b      	ldrh	r3, [r7, #8]
 80096f6:	7af9      	ldrb	r1, [r7, #11]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	f7f8 ffcc 	bl	8002696 <HAL_PCD_EP_Receive>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f827 	bl	8009758 <USBD_Get_USB_Status>
 800970a:	4603      	mov	r3, r0
 800970c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800970e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009720:	4b02      	ldr	r3, [pc, #8]	@ (800972c <USBD_static_malloc+0x14>)
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr
 800972c:	20000abc 	.word	0x20000abc

08009730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]

}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr

08009742 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr

08009758 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b03      	cmp	r3, #3
 800976a:	d817      	bhi.n	800979c <USBD_Get_USB_Status+0x44>
 800976c:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <USBD_Get_USB_Status+0x1c>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	08009785 	.word	0x08009785
 8009778:	0800978b 	.word	0x0800978b
 800977c:	08009791 	.word	0x08009791
 8009780:	08009797 	.word	0x08009797
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	e00b      	b.n	80097a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
    break;
 800978e:	e008      	b.n	80097a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	e005      	b.n	80097a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009796:	2302      	movs	r3, #2
 8009798:	73fb      	strb	r3, [r7, #15]
    break;
 800979a:	e002      	b.n	80097a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800979c:	2302      	movs	r3, #2
 800979e:	73fb      	strb	r3, [r7, #15]
    break;
 80097a0:	bf00      	nop
  }
  return usb_status;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop

080097b0 <memset>:
 80097b0:	4603      	mov	r3, r0
 80097b2:	4402      	add	r2, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d100      	bne.n	80097ba <memset+0xa>
 80097b8:	4770      	bx	lr
 80097ba:	f803 1b01 	strb.w	r1, [r3], #1
 80097be:	e7f9      	b.n	80097b4 <memset+0x4>

080097c0 <__libc_init_array>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	2600      	movs	r6, #0
 80097c4:	4d0c      	ldr	r5, [pc, #48]	@ (80097f8 <__libc_init_array+0x38>)
 80097c6:	4c0d      	ldr	r4, [pc, #52]	@ (80097fc <__libc_init_array+0x3c>)
 80097c8:	1b64      	subs	r4, r4, r5
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	42a6      	cmp	r6, r4
 80097ce:	d109      	bne.n	80097e4 <__libc_init_array+0x24>
 80097d0:	f000 f81a 	bl	8009808 <_init>
 80097d4:	2600      	movs	r6, #0
 80097d6:	4d0a      	ldr	r5, [pc, #40]	@ (8009800 <__libc_init_array+0x40>)
 80097d8:	4c0a      	ldr	r4, [pc, #40]	@ (8009804 <__libc_init_array+0x44>)
 80097da:	1b64      	subs	r4, r4, r5
 80097dc:	10a4      	asrs	r4, r4, #2
 80097de:	42a6      	cmp	r6, r4
 80097e0:	d105      	bne.n	80097ee <__libc_init_array+0x2e>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e8:	4798      	blx	r3
 80097ea:	3601      	adds	r6, #1
 80097ec:	e7ee      	b.n	80097cc <__libc_init_array+0xc>
 80097ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f2:	4798      	blx	r3
 80097f4:	3601      	adds	r6, #1
 80097f6:	e7f2      	b.n	80097de <__libc_init_array+0x1e>
 80097f8:	08009884 	.word	0x08009884
 80097fc:	08009884 	.word	0x08009884
 8009800:	08009884 	.word	0x08009884
 8009804:	08009888 	.word	0x08009888

08009808 <_init>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr

08009814 <_fini>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr
