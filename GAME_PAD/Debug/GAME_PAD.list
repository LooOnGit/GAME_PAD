
GAME_PAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a6fc  0800a6fc  0000b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a774  0800a774  0000c164  2**0
                  CONTENTS
  4 .ARM          00000000  0800a774  0800a774  0000c164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a774  0800a774  0000c164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a778  0800a778  0000b778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800a77c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  20000164  0800a8e0  0000c164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  0800a8e0  0000cad8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149a8  00000000  00000000  0000c18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352e  00000000  00000000  00020b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00024068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  00025440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae7c  00000000  00000000  00026382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192a1  00000000  00000000  000411fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094065  00000000  00000000  0005a49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  000ee548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f37f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a6e4 	.word	0x0800a6e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	0800a6e4 	.word	0x0800a6e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd7d 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8b7 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb07 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f98d 	bl	800047c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000162:	f000 f90f 	bl	8000384 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000166:	f000 f94b 	bl	8000400 <MX_ADC2_Init>
  MX_TIM1_Init();
 800016a:	f000 f9b5 	bl	80004d8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800016e:	f009 fed5 	bl	8009f1c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000172:	f000 fa53 	bl	800061c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000176:	f000 faa5 	bl	80006c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MCP23017_Init(&hi2c1);
 800017a:	4845      	ldr	r0, [pc, #276]	@ (8000290 <main+0x144>)
 800017c:	f008 fbb1 	bl	80088e2 <MCP23017_Init>
  MCP23017_EnablePullUps(&hi2c1);
 8000180:	4843      	ldr	r0, [pc, #268]	@ (8000290 <main+0x144>)
 8000182:	f008 fc1c 	bl	80089be <MCP23017_EnablePullUps>

  //mode digital
  TLC59116_Init(&hi2c1);
 8000186:	4842      	ldr	r0, [pc, #264]	@ (8000290 <main+0x144>)
 8000188:	f008 fc2b 	bl	80089e2 <TLC59116_Init>

  //mode pwm
  TLC59116_Set_All_PWM_Mode(&hi2c1);
 800018c:	4840      	ldr	r0, [pc, #256]	@ (8000290 <main+0x144>)
 800018e:	f008 fc50 	bl	8008a32 <TLC59116_Set_All_PWM_Mode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000192:	2104      	movs	r1, #4
 8000194:	483f      	ldr	r0, [pc, #252]	@ (8000294 <main+0x148>)
 8000196:	f005 f891 	bl	80052bc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800019a:	2104      	movs	r1, #4
 800019c:	483d      	ldr	r0, [pc, #244]	@ (8000294 <main+0x148>)
 800019e:	f005 fe99 	bl	8005ed4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001a2:	2104      	movs	r1, #4
 80001a4:	483c      	ldr	r0, [pc, #240]	@ (8000298 <main+0x14c>)
 80001a6:	f005 f9cd 	bl	8005544 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80001aa:	2104      	movs	r1, #4
 80001ac:	483b      	ldr	r0, [pc, #236]	@ (800029c <main+0x150>)
 80001ae:	f005 f9c9 	bl	8005544 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	pulse1 = __HAL_TIM_GET_COUNTER(&htim2);
 80001b2:	4b39      	ldr	r3, [pc, #228]	@ (8000298 <main+0x14c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001b8:	b21a      	sxth	r2, r3
 80001ba:	4b39      	ldr	r3, [pc, #228]	@ (80002a0 <main+0x154>)
 80001bc:	801a      	strh	r2, [r3, #0]
	pulse2 = __HAL_TIM_GET_COUNTER(&htim3);
 80001be:	4b37      	ldr	r3, [pc, #220]	@ (800029c <main+0x150>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001c4:	b21a      	sxth	r2, r3
 80001c6:	4b37      	ldr	r3, [pc, #220]	@ (80002a4 <main+0x158>)
 80001c8:	801a      	strh	r2, [r3, #0]
//	}

//	USBD_HID_SendReport(&hUsbDeviceFS,click_report,5);

////	  read button
    portA = MCP23017_Read_GPIOA(&hi2c1);
 80001ca:	4831      	ldr	r0, [pc, #196]	@ (8000290 <main+0x144>)
 80001cc:	f008 fbaf 	bl	800892e <MCP23017_Read_GPIOA>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b34      	ldr	r3, [pc, #208]	@ (80002a8 <main+0x15c>)
 80001d6:	701a      	strb	r2, [r3, #0]
    portB = MCP23017_Read_GPIOB(&hi2c1);
 80001d8:	482d      	ldr	r0, [pc, #180]	@ (8000290 <main+0x144>)
 80001da:	f008 fbbf 	bl	800895c <MCP23017_Read_GPIOB>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b32      	ldr	r3, [pc, #200]	@ (80002ac <main+0x160>)
 80001e4:	701a      	strb	r2, [r3, #0]


//	//control led follow PWM
    HAL_ADC_Start(&hadc1);
 80001e6:	4832      	ldr	r0, [pc, #200]	@ (80002b0 <main+0x164>)
 80001e8:	f000 fe6c 	bl	8000ec4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80001ec:	2164      	movs	r1, #100	@ 0x64
 80001ee:	4830      	ldr	r0, [pc, #192]	@ (80002b0 <main+0x164>)
 80001f0:	f000 ff42 	bl	8001078 <HAL_ADC_PollForConversion>
    ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80001f4:	482e      	ldr	r0, [pc, #184]	@ (80002b0 <main+0x164>)
 80001f6:	f001 f845 	bl	8001284 <HAL_ADC_GetValue>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b2d      	ldr	r3, [pc, #180]	@ (80002b4 <main+0x168>)
 8000200:	601a      	str	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8000202:	482b      	ldr	r0, [pc, #172]	@ (80002b0 <main+0x164>)
 8000204:	f000 ff0c 	bl	8001020 <HAL_ADC_Stop>
    value_ledPWM = (ADC_VAL * 255)/4095;
 8000208:	4b2a      	ldr	r3, [pc, #168]	@ (80002b4 <main+0x168>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4613      	mov	r3, r2
 800020e:	021b      	lsls	r3, r3, #8
 8000210:	1a9b      	subs	r3, r3, r2
 8000212:	4a29      	ldr	r2, [pc, #164]	@ (80002b8 <main+0x16c>)
 8000214:	fb82 1203 	smull	r1, r2, r2, r3
 8000218:	441a      	add	r2, r3
 800021a:	12d2      	asrs	r2, r2, #11
 800021c:	17db      	asrs	r3, r3, #31
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	4a26      	ldr	r2, [pc, #152]	@ (80002bc <main+0x170>)
 8000222:	6013      	str	r3, [r2, #0]
	for(uint8_t j = 0; j < 14; j++){
 8000224:	2300      	movs	r3, #0
 8000226:	71fb      	strb	r3, [r7, #7]
 8000228:	e00a      	b.n	8000240 <main+0xf4>
		TLC59116_Set_PWM(&hi2c1, j, value_ledPWM); // Tăng độ sáng OUT0
 800022a:	4b24      	ldr	r3, [pc, #144]	@ (80002bc <main+0x170>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	4619      	mov	r1, r3
 8000234:	4816      	ldr	r0, [pc, #88]	@ (8000290 <main+0x144>)
 8000236:	f008 fc3f 	bl	8008ab8 <TLC59116_Set_PWM>
	for(uint8_t j = 0; j < 14; j++){
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3301      	adds	r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b0d      	cmp	r3, #13
 8000244:	d9f1      	bls.n	800022a <main+0xde>
	}
//
//	//control lcd light
	HAL_ADC_Start(&hadc2);
 8000246:	481e      	ldr	r0, [pc, #120]	@ (80002c0 <main+0x174>)
 8000248:	f000 fe3c 	bl	8000ec4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 800024c:	2164      	movs	r1, #100	@ 0x64
 800024e:	481c      	ldr	r0, [pc, #112]	@ (80002c0 <main+0x174>)
 8000250:	f000 ff12 	bl	8001078 <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8000254:	481a      	ldr	r0, [pc, #104]	@ (80002c0 <main+0x174>)
 8000256:	f001 f815 	bl	8001284 <HAL_ADC_GetValue>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <main+0x168>)
 8000260:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8000262:	4817      	ldr	r0, [pc, #92]	@ (80002c0 <main+0x174>)
 8000264:	f000 fedc 	bl	8001020 <HAL_ADC_Stop>
	value_lcdPWM = (ADC_VAL * 800)/4096;
 8000268:	4b12      	ldr	r3, [pc, #72]	@ (80002b4 <main+0x168>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	da01      	bge.n	800027c <main+0x130>
 8000278:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800027c:	131b      	asrs	r3, r3, #12
 800027e:	461a      	mov	r2, r3
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <main+0x178>)
 8000282:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_lcdPWM);
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <main+0x178>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	4b02      	ldr	r3, [pc, #8]	@ (8000294 <main+0x148>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	639a      	str	r2, [r3, #56]	@ 0x38
	pulse1 = __HAL_TIM_GET_COUNTER(&htim2);
 800028e:	e790      	b.n	80001b2 <main+0x66>
 8000290:	200001e0 	.word	0x200001e0
 8000294:	20000234 	.word	0x20000234
 8000298:	2000027c 	.word	0x2000027c
 800029c:	200002c4 	.word	0x200002c4
 80002a0:	2000031c 	.word	0x2000031c
 80002a4:	2000031e 	.word	0x2000031e
 80002a8:	2000030c 	.word	0x2000030c
 80002ac:	2000030d 	.word	0x2000030d
 80002b0:	20000180 	.word	0x20000180
 80002b4:	20000310 	.word	0x20000310
 80002b8:	80080081 	.word	0x80080081
 80002bc:	20000314 	.word	0x20000314
 80002c0:	200001b0 	.word	0x200001b0
 80002c4:	20000318 	.word	0x20000318

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f00a f9d8 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000312:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800031e:	4618      	mov	r0, r3
 8000320:	f004 f9a8 	bl	8004674 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 fa69 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fc14 	bl	8004b78 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000356:	f000 fa53 	bl	8000800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800035a:	2312      	movs	r3, #18
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800035e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000362:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f004 fd92 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000376:	f000 fa43 	bl	8000800 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	@ 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_ADC1_Init+0x74>)
 8000396:	4a19      	ldr	r2, [pc, #100]	@ (80003fc <MX_ADC1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039a:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <MX_ADC1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003ae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	480d      	ldr	r0, [pc, #52]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003c2:	f000 fca7 	bl	8000d14 <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003cc:	f000 fa18 	bl	8000800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003d8:	2307      	movs	r3, #7
 80003da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <MX_ADC1_Init+0x74>)
 80003e2:	f000 ff5b 	bl	800129c <HAL_ADC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003ec:	f000 fa08 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000180 	.word	0x20000180
 80003fc:	40012400 	.word	0x40012400

08000400 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <MX_ADC2_Init+0x74>)
 8000412:	4a19      	ldr	r2, [pc, #100]	@ (8000478 <MX_ADC2_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <MX_ADC2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800041c:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <MX_ADC2_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000422:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <MX_ADC2_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_ADC2_Init+0x74>)
 800042a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800042e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <MX_ADC2_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_ADC2_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800043c:	480d      	ldr	r0, [pc, #52]	@ (8000474 <MX_ADC2_Init+0x74>)
 800043e:	f000 fc69 	bl	8000d14 <HAL_ADC_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000448:	f000 f9da 	bl	8000800 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800044c:	2301      	movs	r3, #1
 800044e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000454:	2307      	movs	r3, #7
 8000456:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_ADC2_Init+0x74>)
 800045e:	f000 ff1d 	bl	800129c <HAL_ADC_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000468:	f000 f9ca 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200001b0 	.word	0x200001b0
 8000478:	40012800 	.word	0x40012800

0800047c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000480:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <MX_I2C1_Init+0x50>)
 8000482:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <MX_I2C1_Init+0x54>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_I2C1_Init+0x50>)
 8000488:	4a12      	ldr	r2, [pc, #72]	@ (80004d4 <MX_I2C1_Init+0x58>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_I2C1_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_I2C1_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_I2C1_Init+0x50>)
 800049a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800049e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <MX_I2C1_Init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_I2C1_Init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ac:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <MX_I2C1_Init+0x50>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_I2C1_Init+0x50>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_I2C1_Init+0x50>)
 80004ba:	f001 fb2d 	bl	8001b18 <HAL_I2C_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004c4:	f000 f99c 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200001e0 	.word	0x200001e0
 80004d0:	40005400 	.word	0x40005400
 80004d4:	000186a0 	.word	0x000186a0

080004d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b096      	sub	sp, #88	@ 0x58
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f00a f8bb 	bl	800a68c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000516:	4b3f      	ldr	r3, [pc, #252]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000518:	4a3f      	ldr	r2, [pc, #252]	@ (8000618 <MX_TIM1_Init+0x140>)
 800051a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 599;
 800051c:	4b3d      	ldr	r3, [pc, #244]	@ (8000614 <MX_TIM1_Init+0x13c>)
 800051e:	f240 2257 	movw	r2, #599	@ 0x257
 8000522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000524:	4b3b      	ldr	r3, [pc, #236]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 800052a:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <MX_TIM1_Init+0x13c>)
 800052c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000538:	4b36      	ldr	r3, [pc, #216]	@ (8000614 <MX_TIM1_Init+0x13c>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000544:	4833      	ldr	r0, [pc, #204]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000546:	f004 fe11 	bl	800516c <HAL_TIM_Base_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000550:	f000 f956 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000558:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800055e:	4619      	mov	r1, r3
 8000560:	482c      	ldr	r0, [pc, #176]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000562:	f005 f93f 	bl	80057e4 <HAL_TIM_ConfigClockSource>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800056c:	f000 f948 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000570:	4828      	ldr	r0, [pc, #160]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000572:	f004 fe4a 	bl	800520a <HAL_TIM_PWM_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800057c:	f000 f940 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000588:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800058c:	4619      	mov	r1, r3
 800058e:	4821      	ldr	r0, [pc, #132]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000590:	f005 fd3e 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800059a:	f000 f931 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059e:	2360      	movs	r3, #96	@ 0x60
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25;
 80005a2:	2319      	movs	r3, #25
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005aa:	2300      	movs	r3, #0
 80005ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005be:	2204      	movs	r2, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4814      	ldr	r0, [pc, #80]	@ (8000614 <MX_TIM1_Init+0x13c>)
 80005c4:	f005 f84c 	bl	8005660 <HAL_TIM_PWM_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80005ce:	f000 f917 	bl	8000800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <MX_TIM1_Init+0x13c>)
 80005f6:	f005 fd69 	bl	80060cc <HAL_TIMEx_ConfigBreakDeadTime>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000600:	f000 f8fe 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <MX_TIM1_Init+0x13c>)
 8000606:	f000 fa8d 	bl	8000b24 <HAL_TIM_MspPostInit>

}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	@ 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000234 	.word	0x20000234
 8000618:	40012c00 	.word	0x40012c00

0800061c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2224      	movs	r2, #36	@ 0x24
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00a f82e 	bl	800a68c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 800063a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800063e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 800064e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000660:	2303      	movs	r3, #3
 8000662:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000668:	2301      	movs	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 800068c:	f004 feb8 	bl	8005400 <HAL_TIM_Encoder_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000696:	f000 f8b3 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_TIM2_Init+0xa4>)
 80006a8:	f005 fcb2 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f8a5 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	@ 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000027c 	.word	0x2000027c

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2224      	movs	r2, #36	@ 0x24
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f009 ffda 	bl	800a68c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_TIM3_Init+0xa0>)
 80006e2:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <MX_TIM3_Init+0xa4>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_TIM3_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_TIM3_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_TIM3_Init+0xa0>)
 80006f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_TIM3_Init+0xa0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_TIM3_Init+0xa0>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000706:	2303      	movs	r3, #3
 8000708:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800071e:	2301      	movs	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_TIM3_Init+0xa0>)
 8000732:	f004 fe65 	bl	8005400 <HAL_TIM_Encoder_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f860 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_TIM3_Init+0xa0>)
 800074e:	f005 fc5f 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000758:	f000 f852 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3730      	adds	r7, #48	@ 0x30
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200002c4 	.word	0x200002c4
 8000768:	40000400 	.word	0x40000400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1c      	ldr	r2, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a16      	ldr	r2, [pc, #88]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_GPIO_Init+0x8c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0x90>)
 80007ce:	f001 f98b 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d2:	2302      	movs	r3, #2
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_GPIO_Init+0x90>)
 80007ea:	f000 fff9 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010c00 	.word	0x40010c00

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <HAL_MspInit+0x5c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <HAL_MspInit+0x5c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <HAL_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <HAL_MspInit+0x60>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_MspInit+0x60>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000
 800086c:	40010000 	.word	0x40010000

08000870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a28      	ldr	r2, [pc, #160]	@ (800092c <HAL_ADC_MspInit+0xbc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d122      	bne.n	80008d6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a26      	ldr	r2, [pc, #152]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a20      	ldr	r2, [pc, #128]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4819      	ldr	r0, [pc, #100]	@ (8000934 <HAL_ADC_MspInit+0xc4>)
 80008d0:	f000 ff86 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008d4:	e026      	b.n	8000924 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_ADC_MspInit+0xc8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d121      	bne.n	8000924 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_ADC_MspInit+0xc0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <HAL_ADC_MspInit+0xc4>)
 8000920:	f000 ff5e 	bl	80017e0 <HAL_GPIO_Init>
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40012400 	.word	0x40012400
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	40012800 	.word	0x40012800

0800093c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <HAL_I2C_MspInit+0x70>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d123      	bne.n	80009a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000974:	23c0      	movs	r3, #192	@ 0xc0
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <HAL_I2C_MspInit+0x78>)
 8000988:	f000 ff2a 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4a07      	ldr	r2, [pc, #28]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 8000992:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_I2C_MspInit+0x74>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40005400 	.word	0x40005400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_TIM_Base_MspInit+0x34>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10b      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a12:	d14f      	bne.n	8000ab4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a3d      	ldr	r2, [pc, #244]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4b3b      	ldr	r3, [pc, #236]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a37      	ldr	r2, [pc, #220]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b35      	ldr	r3, [pc, #212]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4828      	ldr	r0, [pc, #160]	@ (8000b14 <HAL_TIM_Encoder_MspInit+0x120>)
 8000a72:	f000 feb5 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a76:	2308      	movs	r3, #8
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4823      	ldr	r0, [pc, #140]	@ (8000b18 <HAL_TIM_Encoder_MspInit+0x124>)
 8000a8a:	f000 fea9 	bl	80017e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ab2:	e028      	b.n	8000b06 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d123      	bne.n	8000b06 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aee:	23c0      	movs	r3, #192	@ 0xc0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <HAL_TIM_Encoder_MspInit+0x120>)
 8000b02:	f000 fe6d 	bl	80017e0 <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	40000400 	.word	0x40000400

08000b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_TIM_MspPostInit+0x5c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d118      	bne.n	8000b76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_TIM_MspPostInit+0x60>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_TIM_MspPostInit+0x60>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_TIM_MspPostInit+0x60>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <HAL_TIM_MspPostInit+0x64>)
 8000b72:	f000 fe35 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f87e 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000bea:	f002 f916 	bl	8002e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200007ec 	.word	0x200007ec

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fff8 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f009 fd35 	bl	800a69c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fa8b 	bl	800014c <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000c40:	0800a77c 	.word	0x0800a77c
  ldr r2, =_sbss
 8000c44:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000c48:	20000ad8 	.word	0x20000ad8

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 fd7b 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fdce 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fd93 	bl	80017c6 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 fd5b 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000320 	.word	0x20000320

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20000320 	.word	0x20000320

08000d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0be      	b.n	8000eb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d109      	bne.n	8000d58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fd8c 	bl	8000870 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 fbf1 	bl	8001540 <ADC_ConversionStop_Disable>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8099 	bne.w	8000ea2 <HAL_ADC_Init+0x18e>
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8095 	bne.w	8000ea2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d80:	f023 0302 	bic.w	r3, r3, #2
 8000d84:	f043 0202 	orr.w	r2, r3, #2
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7b1b      	ldrb	r3, [r3, #12]
 8000d9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dac:	d003      	beq.n	8000db6 <HAL_ADC_Init+0xa2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <HAL_ADC_Init+0xa8>
 8000db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dba:	e000      	b.n	8000dbe <HAL_ADC_Init+0xaa>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7d1b      	ldrb	r3, [r3, #20]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d119      	bne.n	8000e00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7b1b      	ldrb	r3, [r3, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	035a      	lsls	r2, r3, #13
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e00b      	b.n	8000e00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dec:	f043 0220 	orr.w	r2, r3, #32
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <HAL_ADC_Init+0x1a8>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e30:	d003      	beq.n	8000e3a <HAL_ADC_Init+0x126>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d104      	bne.n	8000e44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	051b      	lsls	r3, r3, #20
 8000e42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_ADC_Init+0x1ac>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d10b      	bne.n	8000e80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e72:	f023 0303 	bic.w	r3, r3, #3
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e7e:	e018      	b.n	8000eb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e84:	f023 0312 	bic.w	r3, r3, #18
 8000e88:	f043 0210 	orr.w	r2, r3, #16
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ea0:	e007      	b.n	8000eb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea6:	f043 0210 	orr.w	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	ffe1f7fd 	.word	0xffe1f7fd
 8000ec0:	ff1f0efe 	.word	0xff1f0efe

08000ec4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Start+0x1a>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e098      	b.n	8001010 <HAL_ADC_Start+0x14c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fad0 	bl	800148c <ADC_Enable>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 8087 	bne.w	8001006 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a41      	ldr	r2, [pc, #260]	@ (8001018 <HAL_ADC_Start+0x154>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_Start+0x5e>
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <HAL_ADC_Start+0x158>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d115      	bne.n	8000f4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d026      	beq.n	8000f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f4c:	e01d      	b.n	8000f8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <HAL_ADC_Start+0x158>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d004      	beq.n	8000f6e <HAL_ADC_Start+0xaa>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2b      	ldr	r2, [pc, #172]	@ (8001018 <HAL_ADC_Start+0x154>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10d      	bne.n	8000f8a <HAL_ADC_Start+0xc6>
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_ADC_Start+0x158>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9a:	f023 0206 	bic.w	r2, r3, #6
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fa2:	e002      	b.n	8000faa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f06f 0202 	mvn.w	r2, #2
 8000fba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000fc6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000fca:	d113      	bne.n	8000ff4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fd0:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <HAL_ADC_Start+0x154>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d105      	bne.n	8000fe2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_ADC_Start+0x158>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	e00c      	b.n	800100e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	e003      	b.n	800100e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012800 	.word	0x40012800
 800101c:	40012400 	.word	0x40012400

08001020 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_ADC_Stop+0x1a>
 8001036:	2302      	movs	r3, #2
 8001038:	e01a      	b.n	8001070 <HAL_ADC_Stop+0x50>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa7c 	bl	8001540 <ADC_ConversionStop_Disable>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800105a:	f023 0301 	bic.w	r3, r3, #1
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800108e:	f7ff fe37 	bl	8000d00 <HAL_GetTick>
 8001092:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a6:	f043 0220 	orr.w	r2, r3, #32
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0d3      	b.n	8001262 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d131      	bne.n	800112c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12a      	bne.n	800112c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010d6:	e021      	b.n	800111c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010de:	d01d      	beq.n	800111c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <HAL_ADC_PollForConversion+0x7e>
 80010e6:	f7ff fe0b 	bl	8000d00 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d212      	bcs.n	800111c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f043 0204 	orr.w	r2, r3, #4
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0a2      	b.n	8001262 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0d6      	beq.n	80010d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800112a:	e070      	b.n	800120e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800112c:	4b4f      	ldr	r3, [pc, #316]	@ (800126c <HAL_ADC_PollForConversion+0x1f4>)
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	2002      	movs	r0, #2
 8001132:	f003 ff65 	bl	8005000 <HAL_RCCEx_GetPeriphCLKFreq>
 8001136:	4603      	mov	r3, r0
 8001138:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	4b4b      	ldr	r3, [pc, #300]	@ (8001270 <HAL_ADC_PollForConversion+0x1f8>)
 8001144:	400b      	ands	r3, r1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d118      	bne.n	800117c <HAL_ADC_PollForConversion+0x104>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	4b48      	ldr	r3, [pc, #288]	@ (8001274 <HAL_ADC_PollForConversion+0x1fc>)
 8001152:	400b      	ands	r3, r1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <HAL_ADC_PollForConversion+0x104>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	4b46      	ldr	r3, [pc, #280]	@ (8001278 <HAL_ADC_PollForConversion+0x200>)
 8001160:	400b      	ands	r3, r1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <HAL_ADC_PollForConversion+0x100>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68d9      	ldr	r1, [r3, #12]
 800116c:	4b43      	ldr	r3, [pc, #268]	@ (800127c <HAL_ADC_PollForConversion+0x204>)
 800116e:	400b      	ands	r3, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_ADC_PollForConversion+0x100>
 8001174:	2314      	movs	r3, #20
 8001176:	e020      	b.n	80011ba <HAL_ADC_PollForConversion+0x142>
 8001178:	2329      	movs	r3, #41	@ 0x29
 800117a:	e01e      	b.n	80011ba <HAL_ADC_PollForConversion+0x142>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6919      	ldr	r1, [r3, #16]
 8001182:	4b3d      	ldr	r3, [pc, #244]	@ (8001278 <HAL_ADC_PollForConversion+0x200>)
 8001184:	400b      	ands	r3, r1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_ADC_PollForConversion+0x120>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <HAL_ADC_PollForConversion+0x204>)
 8001192:	400b      	ands	r3, r1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <HAL_ADC_PollForConversion+0x13c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6919      	ldr	r1, [r3, #16]
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_ADC_PollForConversion+0x208>)
 80011a0:	400b      	ands	r3, r1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x140>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <HAL_ADC_PollForConversion+0x208>)
 80011ae:	400b      	ands	r3, r1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_PollForConversion+0x140>
 80011b4:	2354      	movs	r3, #84	@ 0x54
 80011b6:	e000      	b.n	80011ba <HAL_ADC_PollForConversion+0x142>
 80011b8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011c0:	e021      	b.n	8001206 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d01a      	beq.n	8001200 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_PollForConversion+0x168>
 80011d0:	f7ff fd96 	bl	8000d00 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d20f      	bcs.n	8001200 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d90b      	bls.n	8001200 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	f043 0204 	orr.w	r2, r3, #4
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e030      	b.n	8001262 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	429a      	cmp	r2, r3
 800120c:	d8d9      	bhi.n	80011c2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f06f 0212 	mvn.w	r2, #18
 8001216:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800122e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001232:	d115      	bne.n	8001260 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001238:	2b00      	cmp	r3, #0
 800123a:	d111      	bne.n	8001260 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000
 8001270:	24924924 	.word	0x24924924
 8001274:	00924924 	.word	0x00924924
 8001278:	12492492 	.word	0x12492492
 800127c:	00492492 	.word	0x00492492
 8001280:	00249249 	.word	0x00249249

08001284 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x20>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0dc      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1da>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b06      	cmp	r3, #6
 80012ca:	d81c      	bhi.n	8001306 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b05      	subs	r3, #5
 80012de:	221f      	movs	r2, #31
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	4019      	ands	r1, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b05      	subs	r3, #5
 80012f8:	fa00 f203 	lsl.w	r2, r0, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34
 8001304:	e03c      	b.n	8001380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d81c      	bhi.n	8001348 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b23      	subs	r3, #35	@ 0x23
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	4019      	ands	r1, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b23      	subs	r3, #35	@ 0x23
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	@ 0x30
 8001346:	e01b      	b.n	8001380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b41      	subs	r3, #65	@ 0x41
 800135a:	221f      	movs	r2, #31
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	4019      	ands	r1, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	@ 0x41
 8001374:	fa00 f203 	lsl.w	r2, r0, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d91c      	bls.n	80013c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68d9      	ldr	r1, [r3, #12]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1e      	subs	r3, #30
 800139a:	2207      	movs	r2, #7
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4019      	ands	r1, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6898      	ldr	r0, [r3, #8]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	fa00 f203 	lsl.w	r2, r0, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	e019      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6919      	ldr	r1, [r3, #16]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	2207      	movs	r2, #7
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	4019      	ands	r1, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d003      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001402:	2b11      	cmp	r3, #17
 8001404:	d132      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_ADC_ConfigChannel+0x1e4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d125      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d126      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800142c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b10      	cmp	r3, #16
 8001434:	d11a      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_ADC_ConfigChannel+0x1e8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <HAL_ADC_ConfigChannel+0x1ec>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9a      	lsrs	r2, r3, #18
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144c:	e002      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f9      	bne.n	800144e <HAL_ADC_ConfigChannel+0x1b2>
 800145a:	e007      	b.n	800146c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	f043 0220 	orr.w	r2, r3, #32
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40012400 	.word	0x40012400
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d040      	beq.n	800152c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <ADC_Enable+0xac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <ADC_Enable+0xb0>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014c8:	e002      	b.n	80014d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014d6:	f7ff fc13 	bl	8000d00 <HAL_GetTick>
 80014da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014dc:	e01f      	b.n	800151e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014de:	f7ff fc0f 	bl	8000d00 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d918      	bls.n	800151e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d011      	beq.n	800151e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f043 0210 	orr.w	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e007      	b.n	800152e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d1d8      	bne.n	80014de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d12e      	bne.n	80015b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800156a:	f7ff fbc9 	bl	8000d00 <HAL_GetTick>
 800156e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001570:	e01b      	b.n	80015aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001572:	f7ff fbc5 	bl	8000d00 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d914      	bls.n	80015aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10d      	bne.n	80015aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001592:	f043 0210 	orr.w	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e007      	b.n	80015ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d0dc      	beq.n	8001572 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4906      	ldr	r1, [pc, #24]	@ (800165c <__NVIC_EnableIRQ+0x34>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	@ (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff90 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff2d 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff42 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff35 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e169      	b.n	8001ac8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8158 	bne.w	8001ac2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a9a      	ldr	r2, [pc, #616]	@ (8001a80 <HAL_GPIO_Init+0x2a0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d05e      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800181c:	4a98      	ldr	r2, [pc, #608]	@ (8001a80 <HAL_GPIO_Init+0x2a0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d875      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001822:	4a98      	ldr	r2, [pc, #608]	@ (8001a84 <HAL_GPIO_Init+0x2a4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d058      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001828:	4a96      	ldr	r2, [pc, #600]	@ (8001a84 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d86f      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800182e:	4a96      	ldr	r2, [pc, #600]	@ (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d052      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001834:	4a94      	ldr	r2, [pc, #592]	@ (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d869      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800183a:	4a94      	ldr	r2, [pc, #592]	@ (8001a8c <HAL_GPIO_Init+0x2ac>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04c      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001840:	4a92      	ldr	r2, [pc, #584]	@ (8001a8c <HAL_GPIO_Init+0x2ac>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d863      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001846:	4a92      	ldr	r2, [pc, #584]	@ (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d046      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800184c:	4a90      	ldr	r2, [pc, #576]	@ (8001a90 <HAL_GPIO_Init+0x2b0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d85d      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d82a      	bhi.n	80018ac <HAL_GPIO_Init+0xcc>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d859      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800185a:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <HAL_GPIO_Init+0x80>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	080018db 	.word	0x080018db
 8001864:	080018b5 	.word	0x080018b5
 8001868:	080018c7 	.word	0x080018c7
 800186c:	08001909 	.word	0x08001909
 8001870:	0800190f 	.word	0x0800190f
 8001874:	0800190f 	.word	0x0800190f
 8001878:	0800190f 	.word	0x0800190f
 800187c:	0800190f 	.word	0x0800190f
 8001880:	0800190f 	.word	0x0800190f
 8001884:	0800190f 	.word	0x0800190f
 8001888:	0800190f 	.word	0x0800190f
 800188c:	0800190f 	.word	0x0800190f
 8001890:	0800190f 	.word	0x0800190f
 8001894:	0800190f 	.word	0x0800190f
 8001898:	0800190f 	.word	0x0800190f
 800189c:	0800190f 	.word	0x0800190f
 80018a0:	0800190f 	.word	0x0800190f
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018d1 	.word	0x080018d1
 80018ac:	4a79      	ldr	r2, [pc, #484]	@ (8001a94 <HAL_GPIO_Init+0x2b4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b2:	e02c      	b.n	800190e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e029      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	3304      	adds	r3, #4
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e024      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	3308      	adds	r3, #8
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e01f      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	330c      	adds	r3, #12
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e01a      	b.n	8001910 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e2:	2304      	movs	r3, #4
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e013      	b.n	8001910 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	611a      	str	r2, [r3, #16]
          break;
 80018fa:	e009      	b.n	8001910 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018fc:	2308      	movs	r3, #8
 80018fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	615a      	str	r2, [r3, #20]
          break;
 8001906:	e003      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x130>
          break;
 800190e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2bff      	cmp	r3, #255	@ 0xff
 8001914:	d801      	bhi.n	800191a <HAL_GPIO_Init+0x13a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	e001      	b.n	800191e <HAL_GPIO_Init+0x13e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	@ 0xff
 8001924:	d802      	bhi.n	800192c <HAL_GPIO_Init+0x14c>
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x152>
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	3b08      	subs	r3, #8
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	210f      	movs	r1, #15
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	6a39      	ldr	r1, [r7, #32]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80b1 	beq.w	8001ac2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	4b4d      	ldr	r3, [pc, #308]	@ (8001a98 <HAL_GPIO_Init+0x2b8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a4c      	ldr	r2, [pc, #304]	@ (8001a98 <HAL_GPIO_Init+0x2b8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a98 <HAL_GPIO_Init+0x2b8>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001978:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_GPIO_Init+0x2bc>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a40      	ldr	r2, [pc, #256]	@ (8001aa0 <HAL_GPIO_Init+0x2c0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa4 <HAL_GPIO_Init+0x2c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa8 <HAL_GPIO_Init+0x2c8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1e4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3d      	ldr	r2, [pc, #244]	@ (8001aac <HAL_GPIO_Init+0x2cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019bc:	2303      	movs	r3, #3
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019cc:	2300      	movs	r3, #0
 80019ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019de:	492f      	ldr	r1, [pc, #188]	@ (8001a9c <HAL_GPIO_Init+0x2bc>)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	492c      	ldr	r1, [pc, #176]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a06:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4928      	ldr	r1, [pc, #160]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a20:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4922      	ldr	r1, [pc, #136]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	491e      	ldr	r1, [pc, #120]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4918      	ldr	r1, [pc, #96]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4914      	ldr	r1, [pc, #80]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d021      	beq.n	8001ab4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e021      	b.n	8001ac2 <HAL_GPIO_Init+0x2e2>
 8001a7e:	bf00      	nop
 8001a80:	10320000 	.word	0x10320000
 8001a84:	10310000 	.word	0x10310000
 8001a88:	10220000 	.word	0x10220000
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	10120000 	.word	0x10120000
 8001a94:	10110000 	.word	0x10110000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40011400 	.word	0x40011400
 8001ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4909      	ldr	r1, [pc, #36]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f ae8e 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	372c      	adds	r7, #44	@ 0x2c
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e12b      	b.n	8001d82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fefc 	bl	800093c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b7c:	f003 f944 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8001b80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a81      	ldr	r2, [pc, #516]	@ (8001d8c <HAL_I2C_Init+0x274>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d807      	bhi.n	8001b9c <HAL_I2C_Init+0x84>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4a80      	ldr	r2, [pc, #512]	@ (8001d90 <HAL_I2C_Init+0x278>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	bf94      	ite	ls
 8001b94:	2301      	movls	r3, #1
 8001b96:	2300      	movhi	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e006      	b.n	8001baa <HAL_I2C_Init+0x92>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d94 <HAL_I2C_Init+0x27c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	bf94      	ite	ls
 8001ba4:	2301      	movls	r3, #1
 8001ba6:	2300      	movhi	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0e7      	b.n	8001d82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a78      	ldr	r2, [pc, #480]	@ (8001d98 <HAL_I2C_Init+0x280>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0c9b      	lsrs	r3, r3, #18
 8001bbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d8c <HAL_I2C_Init+0x274>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d802      	bhi.n	8001bec <HAL_I2C_Init+0xd4>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3301      	adds	r3, #1
 8001bea:	e009      	b.n	8001c00 <HAL_I2C_Init+0xe8>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a69      	ldr	r2, [pc, #420]	@ (8001d9c <HAL_I2C_Init+0x284>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	495c      	ldr	r1, [pc, #368]	@ (8001d8c <HAL_I2C_Init+0x274>)
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d819      	bhi.n	8001c54 <HAL_I2C_Init+0x13c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e59      	subs	r1, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c34:	400b      	ands	r3, r1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <HAL_I2C_Init+0x138>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1e59      	subs	r1, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4e:	e051      	b.n	8001cf4 <HAL_I2C_Init+0x1dc>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e04f      	b.n	8001cf4 <HAL_I2C_Init+0x1dc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_I2C_Init+0x168>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	440b      	add	r3, r1
 8001c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e012      	b.n	8001ca6 <HAL_I2C_Init+0x18e>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	0099      	lsls	r1, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Init+0x196>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e022      	b.n	8001cf4 <HAL_I2C_Init+0x1dc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_I2C_Init+0x1bc>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1e58      	subs	r0, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6859      	ldr	r1, [r3, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd2:	e00f      	b.n	8001cf4 <HAL_I2C_Init+0x1dc>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e58      	subs	r0, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	0099      	lsls	r1, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6809      	ldr	r1, [r1, #0]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6911      	ldr	r1, [r2, #16]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	000186a0 	.word	0x000186a0
 8001d90:	001e847f 	.word	0x001e847f
 8001d94:	003d08ff 	.word	0x003d08ff
 8001d98:	431bde83 	.word	0x431bde83
 8001d9c:	10624dd3 	.word	0x10624dd3

08001da0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dba:	f7fe ffa1 	bl	8000d00 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	f040 80d9 	bne.w	8001f80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2319      	movs	r3, #25
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	496d      	ldr	r1, [pc, #436]	@ (8001f8c <HAL_I2C_Mem_Write+0x1ec>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fccd 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0cc      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Mem_Write+0x56>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e0c5      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d007      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2221      	movs	r2, #33	@ 0x21
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f90 <HAL_I2C_Mem_Write+0x1f0>)
 8001e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e5e:	88f8      	ldrh	r0, [r7, #6]
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	8979      	ldrh	r1, [r7, #10]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fb04 	bl	800247c <I2C_RequestMemoryWrite>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d052      	beq.n	8001f20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e081      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fd92 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d107      	bne.n	8001ea6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06b      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11b      	bne.n	8001f20 <HAL_I2C_Mem_Write+0x180>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d017      	beq.n	8001f20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1aa      	bne.n	8001e7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fd85 	bl	8002a3c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d107      	bne.n	8001f50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e016      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f80:	2302      	movs	r3, #2
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	00100002 	.word	0x00100002
 8001f90:	ffff0000 	.word	0xffff0000

08001f94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	817b      	strh	r3, [r7, #10]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	813b      	strh	r3, [r7, #8]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb2:	f7fe fea5 	bl	8000d00 <HAL_GetTick>
 8001fb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	f040 8250 	bne.w	8002466 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2319      	movs	r3, #25
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4982      	ldr	r1, [pc, #520]	@ (80021d8 <HAL_I2C_Mem_Read+0x244>)
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fbd1 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e243      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Mem_Read+0x5a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e23c      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d007      	beq.n	8002014 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2222      	movs	r2, #34	@ 0x22
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a62      	ldr	r2, [pc, #392]	@ (80021dc <HAL_I2C_Mem_Read+0x248>)
 8002054:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002056:	88f8      	ldrh	r0, [r7, #6]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	8979      	ldrh	r1, [r7, #10]
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4603      	mov	r3, r0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fa9e 	bl	80025a8 <I2C_RequestMemoryRead>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1f8      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e1cc      	b.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d11e      	bne.n	80020ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020be:	b672      	cpsid	i
}
 80020c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020e8:	b662      	cpsie	i
}
 80020ea:	e035      	b.n	8002158 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d11e      	bne.n	8002132 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002102:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800212c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800212e:	b662      	cpsie	i
}
 8002130:	e012      	b.n	8002158 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002140:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002158:	e172      	b.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	2b03      	cmp	r3, #3
 8002160:	f200 811f 	bhi.w	80023a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	2b01      	cmp	r3, #1
 800216a:	d123      	bne.n	80021b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fcab 	bl	8002acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e173      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021b2:	e145      	b.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d152      	bne.n	8002262 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c2:	2200      	movs	r2, #0
 80021c4:	4906      	ldr	r1, [pc, #24]	@ (80021e0 <HAL_I2C_Mem_Read+0x24c>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fad6 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e148      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
 80021d6:	bf00      	nop
 80021d8:	00100002 	.word	0x00100002
 80021dc:	ffff0000 	.word	0xffff0000
 80021e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800222a:	b662      	cpsie	i
}
 800222c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002260:	e0ee      	b.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002268:	2200      	movs	r2, #0
 800226a:	4981      	ldr	r1, [pc, #516]	@ (8002470 <HAL_I2C_Mem_Read+0x4dc>)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fa83 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0f5      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800228a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <HAL_I2C_Mem_Read+0x4e0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002478 <HAL_I2C_Mem_Read+0x4e4>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0a1a      	lsrs	r2, r3, #8
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00da      	lsls	r2, r3, #3
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	3b01      	subs	r3, #1
 80022e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d118      	bne.n	800231a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800230a:	b662      	cpsie	i
}
 800230c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0a6      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d1d9      	bne.n	80022dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800236a:	b662      	cpsie	i
}
 800236c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023a0:	e04e      	b.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb90 	bl	8002acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e058      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d124      	bne.n	8002440 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f ae88 	bne.w	800215a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3728      	adds	r7, #40	@ 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	00010004 	.word	0x00010004
 8002474:	20000000 	.word	0x20000000
 8002478:	14f8b589 	.word	0x14f8b589

0800247c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f960 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024cc:	d103      	bne.n	80024d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e05f      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	6a3a      	ldr	r2, [r7, #32]
 80024ee:	492d      	ldr	r1, [pc, #180]	@ (80025a4 <I2C_RequestMemoryWrite+0x128>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f9bb 	bl	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04c      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	6a39      	ldr	r1, [r7, #32]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa46 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e02b      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e021      	b.n	8002598 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002554:	893b      	ldrh	r3, [r7, #8]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fa20 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b04      	cmp	r3, #4
 8002578:	d107      	bne.n	800258a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e005      	b.n	800259a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800258e:	893b      	ldrh	r3, [r7, #8]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f8c2 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002608:	d103      	bne.n	8002612 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0aa      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	4952      	ldr	r1, [pc, #328]	@ (8002774 <I2C_RequestMemoryRead+0x1cc>)
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f91d 	bl	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e097      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f9a8 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b04      	cmp	r3, #4
 8002668:	d107      	bne.n	800267a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e076      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002684:	893b      	ldrh	r3, [r7, #8]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	e021      	b.n	80026d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29b      	uxth	r3, r3
 8002696:	b2da      	uxtb	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a0:	6a39      	ldr	r1, [r7, #32]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f982 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d107      	bne.n	80026c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e050      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ca:	893b      	ldrh	r3, [r7, #8]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f967 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d107      	bne.n	80026fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e035      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f82b 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002736:	d103      	bne.n	8002740 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e013      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	4906      	ldr	r1, [pc, #24]	@ (8002774 <I2C_RequestMemoryRead+0x1cc>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f886 	bl	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00010002 	.word	0x00010002

08002778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002788:	e048      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d044      	beq.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fe fab5 	bl	8000d00 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d139      	bne.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	0c1b      	lsrs	r3, r3, #16
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	e00c      	b.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d116      	bne.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e023      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10d      	bne.n	8002842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	e00c      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d093      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287a:	e071      	b.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288a:	d123      	bne.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e067      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d041      	beq.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028dc:	f7fe fa10 	bl	8000d00 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d302      	bcc.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d136      	bne.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10c      	bne.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	e00b      	b.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	43da      	mvns	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e021      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10c      	bne.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e00b      	b.n	800299c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af6d 	bne.w	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b8:	e034      	b.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8e3 	bl	8002b86 <I2C_IsAcknowledgeFailed>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e034      	b.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d028      	beq.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe f995 	bl	8000d00 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11d      	bne.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f2:	2b80      	cmp	r3, #128	@ 0x80
 80029f4:	d016      	beq.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e007      	b.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d1c3      	bne.n	80029ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a48:	e034      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f89b 	bl	8002b86 <I2C_IsAcknowledgeFailed>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e034      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d028      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe f94d 	bl	8000d00 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11d      	bne.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d016      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e007      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d1c3      	bne.n	8002a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ad8:	e049      	b.n	8002b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d119      	bne.n	8002b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e030      	b.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7fe f8f0 	bl	8000d00 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11d      	bne.n	8002b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3c:	2b40      	cmp	r3, #64	@ 0x40
 8002b3e:	d016      	beq.n	8002b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b40      	cmp	r3, #64	@ 0x40
 8002b7a:	d1ae      	bne.n	8002ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9c:	d11b      	bne.n	8002bd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0e8      	b.n	8002dc6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f007 fabb 	bl	800a184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2203      	movs	r2, #3
 8002c12:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 faeb 	bl	80061fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c30:	f003 fac1 	bl	80061b6 <USB_CoreInit>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0bf      	b.n	8002dc6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 faef 	bl	8006230 <USB_SetCurrentMode>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b0      	b.n	8002dc6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e03e      	b.n	8002ce8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3311      	adds	r3, #17
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3310      	adds	r3, #16
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3313      	adds	r3, #19
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3324      	adds	r3, #36	@ 0x24
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3bb      	bcc.n	8002c6a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	791b      	ldrb	r3, [r3, #4]
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b5      	bcc.n	8002cf8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d96:	f003 fa57 	bl	8006248 <USB_DevInit>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e00c      	b.n	8002dc6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 fcd7 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_PCD_Start+0x16>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e016      	b.n	8002e12 <HAL_PCD_Start+0x44>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 f9ed 	bl	80061d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002df6:	2101      	movs	r1, #1
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fc10 	bl	800a61e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f005 fcab 	bl	800875e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b088      	sub	sp, #32
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 fcad 	bl	8008786 <USB_ReadInterrupts>
 8002e2c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb03 	bl	8003444 <PCD_EP_ISR_Handler>

    return;
 8002e3e:	e119      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d013      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f007 fa09 	bl	800a27a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f905 	bl	800307a <HAL_PCD_SetAddress>

    return;
 8002e70:	e100      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e94:	e0ee      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eb8:	e0dc      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d027      	beq.n	8002f14 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f007 f9f9 	bl	800a2ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f12:	e0af      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8083 	beq.w	8003026 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e010      	b.n	8002f48 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	8812      	ldrh	r2, [r2, #0]
 8002f36:	b292      	uxth	r2, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	3320      	adds	r3, #32
 8002f3c:	443b      	add	r3, r7
 8002f3e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	3301      	adds	r3, #1
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d9eb      	bls.n	8002f26 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	b292      	uxth	r2, r2
 8002f62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f7e:	bf00      	nop
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f6      	beq.n	8002f80 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e00f      	b.n	8002fd0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fb0:	7ffb      	ldrb	r3, [r7, #31]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	7ffa      	ldrb	r2, [r7, #31]
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	440a      	add	r2, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	443b      	add	r3, r7
 8002fc4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fc8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	7ffb      	ldrb	r3, [r7, #31]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d9ec      	bls.n	8002fb0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0208 	orr.w	r2, r2, #8
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003000:	b292      	uxth	r2, r2
 8003002:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0204 	orr.w	r2, r2, #4
 8003018:	b292      	uxth	r2, r2
 800301a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f007 f94a 	bl	800a2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003024:	e026      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00f      	beq.n	8003050 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003042:	b292      	uxth	r2, r2
 8003044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f007 f908 	bl	800a25e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800304e:	e011      	b.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00c      	beq.n	8003074 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800306c:	b292      	uxth	r2, r2
 800306e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003072:	bf00      	nop
  }
}
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_PCD_SetAddress+0x1a>
 8003090:	2302      	movs	r3, #2
 8003092:	e012      	b.n	80030ba <HAL_PCD_SetAddress+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f005 fb44 	bl	8008738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	4608      	mov	r0, r1
 80030cc:	4611      	mov	r1, r2
 80030ce:	461a      	mov	r2, r3
 80030d0:	4603      	mov	r3, r0
 80030d2:	70fb      	strb	r3, [r7, #3]
 80030d4:	460b      	mov	r3, r1
 80030d6:	803b      	strh	r3, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da0e      	bge.n	8003106 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	3310      	adds	r3, #16
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	705a      	strb	r2, [r3, #1]
 8003104:	e00e      	b.n	8003124 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 0207 	and.w	r2, r3, #7
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003130:	883a      	ldrh	r2, [r7, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	78ba      	ldrb	r2, [r7, #2]
 800313a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800313c:	78bb      	ldrb	r3, [r7, #2]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d102      	bne.n	8003148 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_PCD_EP_Open+0x94>
 8003152:	2302      	movs	r3, #2
 8003154:	e00e      	b.n	8003174 <HAL_PCD_EP_Open+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 f88d 	bl	8006284 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003172:	7afb      	ldrb	r3, [r7, #11]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da0e      	bge.n	80031ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 0207 	and.w	r2, r3, #7
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	3310      	adds	r3, #16
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4413      	add	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	705a      	strb	r2, [r3, #1]
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 0207 	and.w	r2, r3, #7
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_PCD_EP_Close+0x6a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e00e      	b.n	8003204 <HAL_PCD_EP_Close+0x88>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fc05 	bl	8006a04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	460b      	mov	r3, r1
 800321a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800321c:	7afb      	ldrb	r3, [r7, #11]
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	b2da      	uxtb	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6979      	ldr	r1, [r7, #20]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fdbc 	bl	8006ddc <USB_EPStartXfer>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	460b      	mov	r3, r1
 800327c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f003 0207 	and.w	r2, r3, #7
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	3310      	adds	r3, #16
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fd85 	bl	8006ddc <USB_EPStartXfer>

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	7912      	ldrb	r2, [r2, #4]
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e04c      	b.n	8003394 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0e      	bge.n	8003320 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0207 	and.w	r2, r3, #7
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	3310      	adds	r3, #16
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00c      	b.n	800333a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_SetStall+0x7e>
 8003356:	2302      	movs	r3, #2
 8003358:	e01c      	b.n	8003394 <HAL_PCD_EP_SetStall+0xb8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f005 f8e8 	bl	800853e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f005 fa0d 	bl	80087a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	7912      	ldrb	r2, [r2, #4]
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e040      	b.n	800343c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da0e      	bge.n	80033e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0207 	and.w	r2, r3, #7
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	3310      	adds	r3, #16
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00e      	b.n	80033fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_EP_ClrStall+0x82>
 800341a:	2302      	movs	r3, #2
 800341c:	e00e      	b.n	800343c <HAL_PCD_EP_ClrStall+0xa0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	4618      	mov	r0, r3
 800342e:	f005 f8d6 	bl	80085de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b096      	sub	sp, #88	@ 0x58
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800344c:	e3bb      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003456:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800345a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003468:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 8175 	bne.w	800375c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d14e      	bne.n	800351c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	81fb      	strh	r3, [r7, #14]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	89fb      	ldrh	r3, [r7, #14]
 8003496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800349a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3310      	adds	r3, #16
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	3302      	adds	r3, #2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	441a      	add	r2, r3
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f006 fea0 	bl	800a22a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7b5b      	ldrb	r3, [r3, #13]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8368 	beq.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 8363 	bne.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	7b5b      	ldrb	r3, [r3, #13]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800350a:	b2da      	uxtb	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	735a      	strb	r2, [r3, #13]
 800351a:	e354      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800352e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003536:	2b00      	cmp	r3, #0
 8003538:	d034      	beq.n	80035a4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	3306      	adds	r3, #6
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003564:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003572:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003576:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003578:	b29b      	uxth	r3, r3
 800357a:	f005 f963 	bl	8008844 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29a      	uxth	r2, r3
 8003586:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800358a:	4013      	ands	r3, r2
 800358c:	823b      	strh	r3, [r7, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	8a3a      	ldrh	r2, [r7, #16]
 8003594:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003598:	b292      	uxth	r2, r2
 800359a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f006 fe17 	bl	800a1d0 <HAL_PCD_SetupStageCallback>
 80035a2:	e310      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f280 830c 	bge.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035ba:	4013      	ands	r3, r2
 80035bc:	83fb      	strh	r3, [r7, #30]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	8bfa      	ldrh	r2, [r7, #30]
 80035c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035c8:	b292      	uxth	r2, r2
 80035ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	3306      	adds	r3, #6
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d019      	beq.n	8003634 <PCD_EP_ISR_Handler+0x1f0>
 8003600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360e:	6959      	ldr	r1, [r3, #20]
 8003610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003612:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003616:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003618:	b29b      	uxth	r3, r3
 800361a:	f005 f913 	bl	8008844 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	441a      	add	r2, r3
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f006 fde0 	bl	800a1f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800363e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 82bd 	bne.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
 800364c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003650:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003658:	f000 82b5 	beq.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003686:	b29a      	uxth	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b3e      	cmp	r3, #62	@ 0x3e
 8003692:	d91d      	bls.n	80036d0 <PCD_EP_ISR_Handler+0x28c>
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <PCD_EP_ISR_Handler+0x26a>
 80036a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036aa:	3b01      	subs	r3, #1
 80036ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	e026      	b.n	800371e <PCD_EP_ISR_Handler+0x2da>
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <PCD_EP_ISR_Handler+0x2aa>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	e017      	b.n	800371e <PCD_EP_ISR_Handler+0x2da>
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <PCD_EP_ISR_Handler+0x2c4>
 8003702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003704:	3301      	adds	r3, #1
 8003706:	647b      	str	r3, [r7, #68]	@ 0x44
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003710:	b29b      	uxth	r3, r3
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	b29b      	uxth	r3, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	b29a      	uxth	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800372a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372e:	827b      	strh	r3, [r7, #18]
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003736:	827b      	strh	r3, [r7, #18]
 8003738:	8a7b      	ldrh	r3, [r7, #18]
 800373a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800373e:	827b      	strh	r3, [r7, #18]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800374a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003756:	b29b      	uxth	r3, r3
 8003758:	8013      	strh	r3, [r2, #0]
 800375a:	e234      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003770:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003774:	2b00      	cmp	r3, #0
 8003776:	f280 80fc 	bge.w	8003972 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29a      	uxth	r2, r3
 800378c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003790:	4013      	ands	r3, r2
 8003792:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80037a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037b0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	7b1b      	ldrb	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d125      	bne.n	800381a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	3306      	adds	r3, #6
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80037fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8092 	beq.w	8003928 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	6959      	ldr	r1, [r3, #20]
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	88da      	ldrh	r2, [r3, #6]
 8003810:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003814:	f005 f816 	bl	8008844 <USB_ReadPMA>
 8003818:	e086      	b.n	8003928 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800381a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381c:	78db      	ldrb	r3, [r3, #3]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d10a      	bne.n	8003838 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003822:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003826:	461a      	mov	r2, r3
 8003828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9d9 	bl	8003be2 <HAL_PCD_EP_DB_Receive>
 8003830:	4603      	mov	r3, r0
 8003832:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003836:	e077      	b.n	8003928 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800384e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003852:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800386c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003874:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003878:	b29b      	uxth	r3, r3
 800387a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d024      	beq.n	80038e0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	3302      	adds	r3, #2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80038c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02e      	beq.n	8003928 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	6959      	ldr	r1, [r3, #20]
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	891a      	ldrh	r2, [r3, #8]
 80038d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038da:	f004 ffb3 	bl	8008844 <USB_ReadPMA>
 80038de:	e023      	b.n	8003928 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	3306      	adds	r3, #6
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003908:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800390c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391a:	6959      	ldr	r1, [r3, #20]
 800391c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391e:	895a      	ldrh	r2, [r3, #10]
 8003920:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003924:	f004 ff8e 	bl	8008844 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003930:	441a      	add	r2, r3
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800393e:	441a      	add	r2, r3
 8003940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003942:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <PCD_EP_ISR_Handler+0x514>
 800394c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d206      	bcs.n	8003966 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f006 fc48 	bl	800a1f4 <HAL_PCD_DataOutStageCallback>
 8003964:	e005      	b.n	8003972 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800396c:	4618      	mov	r0, r3
 800396e:	f003 fa35 	bl	8006ddc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8123 	beq.w	8003bc6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003980:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3310      	adds	r3, #16
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80039aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	441a      	add	r2, r3
 80039c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80039c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80039d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d2:	78db      	ldrb	r3, [r3, #3]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 80a2 	bne.w	8003b1e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e2:	7b1b      	ldrb	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8093 	beq.w	8003b10 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d046      	beq.n	8003a84 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d126      	bne.n	8003a4c <PCD_EP_ISR_Handler+0x608>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	4413      	add	r3, r2
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	011a      	lsls	r2, r3, #4
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	4413      	add	r3, r2
 8003a20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	e061      	b.n	8003b10 <PCD_EP_ISR_Handler+0x6cc>
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d15d      	bne.n	8003b10 <PCD_EP_ISR_Handler+0x6cc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	4413      	add	r3, r2
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	4413      	add	r3, r2
 8003a76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	2200      	movs	r2, #0
 8003a80:	801a      	strh	r2, [r3, #0]
 8003a82:	e045      	b.n	8003b10 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d126      	bne.n	8003ae0 <PCD_EP_ISR_Handler+0x69c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	4413      	add	r3, r2
 8003aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	011a      	lsls	r2, r3, #4
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e017      	b.n	8003b10 <PCD_EP_ISR_Handler+0x6cc>
 8003ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d113      	bne.n	8003b10 <PCD_EP_ISR_Handler+0x6cc>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af6:	4413      	add	r3, r2
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011a      	lsls	r2, r3, #4
 8003b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f006 fb87 	bl	800a22a <HAL_PCD_DataInStageCallback>
 8003b1c:	e053      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d146      	bne.n	8003bb8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d907      	bls.n	8003b72 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	619a      	str	r2, [r3, #24]
 8003b70:	e002      	b.n	8003b78 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f006 fb4f 	bl	800a22a <HAL_PCD_DataInStageCallback>
 8003b8c:	e01b      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b96:	441a      	add	r2, r3
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 f913 	bl	8006ddc <USB_EPStartXfer>
 8003bb6:	e006      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f91b 	bl	8003dfc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f6ff ac3b 	blt.w	800344e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3758      	adds	r7, #88	@ 0x58
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d07e      	beq.n	8003cf8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	8b7b      	ldrh	r3, [r7, #26]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d306      	bcc.n	8003c3c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	8b7b      	ldrh	r3, [r7, #26]
 8003c34:	1ad2      	subs	r2, r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	619a      	str	r2, [r3, #24]
 8003c3a:	e002      	b.n	8003c42 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d123      	bne.n	8003c92 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c64:	833b      	strh	r3, [r7, #24]
 8003c66:	8b3b      	ldrh	r3, [r7, #24]
 8003c68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c6c:	833b      	strh	r3, [r7, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	441a      	add	r2, r3
 8003c7c:	8b3b      	ldrh	r3, [r7, #24]
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01f      	beq.n	8003cdc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	82fb      	strh	r3, [r7, #22]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	441a      	add	r2, r3
 8003cc6:	8afb      	ldrh	r3, [r7, #22]
 8003cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cdc:	8b7b      	ldrh	r3, [r7, #26]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6959      	ldr	r1, [r3, #20]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	891a      	ldrh	r2, [r3, #8]
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	f004 fda7 	bl	8008844 <USB_ReadPMA>
 8003cf6:	e07c      	b.n	8003df2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3306      	adds	r3, #6
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	8b7b      	ldrh	r3, [r7, #26]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d306      	bcc.n	8003d3a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	8b7b      	ldrh	r3, [r7, #26]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	619a      	str	r2, [r3, #24]
 8003d38:	e002      	b.n	8003d40 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d123      	bne.n	8003d90 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	83fb      	strh	r3, [r7, #30]
 8003d64:	8bfb      	ldrh	r3, [r7, #30]
 8003d66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d6a:	83fb      	strh	r3, [r7, #30]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	8bfb      	ldrh	r3, [r7, #30]
 8003d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11f      	bne.n	8003dda <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db4:	83bb      	strh	r3, [r7, #28]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	8bbb      	ldrh	r3, [r7, #28]
 8003dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dda:	8b7b      	ldrh	r3, [r7, #26]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6959      	ldr	r1, [r3, #20]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	895a      	ldrh	r2, [r3, #10]
 8003dec:	8b7b      	ldrh	r3, [r7, #26]
 8003dee:	f004 fd29 	bl	8008844 <USB_ReadPMA>
    }
  }

  return count;
 8003df2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b0a4      	sub	sp, #144	@ 0x90
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 81dd 	beq.w	80041d0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d907      	bls.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	619a      	str	r2, [r3, #24]
 8003e5c:	e002      	b.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 80b9 	bne.w	8003fe0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d126      	bne.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	4413      	add	r3, r2
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	011a      	lsls	r2, r3, #4
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	4413      	add	r3, r2
 8003e98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e01a      	b.n	8003efa <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d116      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	4413      	add	r3, r2
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	011a      	lsls	r2, r3, #4
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eec:	4413      	add	r3, r2
 8003eee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d126      	bne.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	011a      	lsls	r2, r3, #4
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e017      	b.n	8003f86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d113      	bne.n	8003f86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	4413      	add	r3, r2
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	4413      	add	r3, r2
 8003f7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	2200      	movs	r2, #0
 8003f84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f006 f94c 	bl	800a22a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 82fc 	beq.w	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb8:	82fb      	strh	r3, [r7, #22]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	441a      	add	r2, r3
 8003fc8:	8afb      	ldrh	r3, [r7, #22]
 8003fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	8013      	strh	r3, [r2, #0]
 8003fde:	e2da      	b.n	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d021      	beq.n	800402e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004004:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800401a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 82ae 	bne.w	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004042:	441a      	add	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004050:	441a      	add	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	429a      	cmp	r2, r3
 8004060:	d30b      	bcc.n	800407a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6a1a      	ldr	r2, [r3, #32]
 800406e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	621a      	str	r2, [r3, #32]
 8004078:	e017      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004086:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004092:	e00a      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d165      	bne.n	800417e <HAL_PCD_EP_DB_Transmit+0x382>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c6:	4413      	add	r3, r2
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	011a      	lsls	r2, r3, #4
 80040d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d2:	4413      	add	r3, r2
 80040d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80040f0:	d91d      	bls.n	800412e <HAL_PCD_EP_DB_Transmit+0x332>
 80040f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x310>
 8004106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004108:	3b01      	subs	r3, #1
 800410a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29a      	uxth	r2, r3
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004114:	b29b      	uxth	r3, r3
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	b29b      	uxth	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004126:	b29a      	uxth	r2, r3
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	e044      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800412e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0x350>
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004144:	b29a      	uxth	r2, r3
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	e035      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800414c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004162:	3301      	adds	r3, #1
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416e:	b29b      	uxth	r3, r3
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	b29b      	uxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	b29a      	uxth	r2, r3
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	e01c      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d118      	bne.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	647b      	str	r3, [r7, #68]	@ 0x44
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800419a:	4413      	add	r3, r2
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011a      	lsls	r2, r3, #4
 80041a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6959      	ldr	r1, [r3, #20]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	891a      	ldrh	r2, [r3, #8]
 80041c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f004 faf6 	bl	80087ba <USB_WritePMA>
 80041ce:	e1e2      	b.n	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	3306      	adds	r3, #6
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004204:	429a      	cmp	r2, r3
 8004206:	d307      	bcc.n	8004218 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004210:	1ad2      	subs	r2, r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	619a      	str	r2, [r3, #24]
 8004216:	e002      	b.n	800421e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 80c0 	bne.w	80043a8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d126      	bne.n	800427e <HAL_PCD_EP_DB_Transmit+0x482>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004244:	4413      	add	r3, r2
 8004246:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	011a      	lsls	r2, r3, #4
 800424e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004250:	4413      	add	r3, r2
 8004252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004256:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004262:	b29a      	uxth	r2, r3
 8004264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004276:	b29a      	uxth	r2, r3
 8004278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e01a      	b.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d116      	bne.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	667b      	str	r3, [r7, #100]	@ 0x64
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800429a:	4413      	add	r3, r2
 800429c:	667b      	str	r3, [r7, #100]	@ 0x64
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011a      	lsls	r2, r3, #4
 80042a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b0:	2200      	movs	r2, #0
 80042b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d12b      	bne.n	800431a <HAL_PCD_EP_DB_Transmit+0x51e>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d6:	4413      	add	r3, r2
 80042d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	011a      	lsls	r2, r3, #4
 80042e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29a      	uxth	r2, r3
 8004312:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e017      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x54e>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d113      	bne.n	800434a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004330:	4413      	add	r3, r2
 8004332:	677b      	str	r3, [r7, #116]	@ 0x74
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800433c:	4413      	add	r3, r2
 800433e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004342:	673b      	str	r3, [r7, #112]	@ 0x70
 8004344:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f005 ff6a 	bl	800a22a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 811a 	bne.w	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800439a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800439e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]
 80043a6:	e0f6      	b.n	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d121      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 80ca 	bne.w	8004596 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800440a:	441a      	add	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004418:	441a      	add	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d30b      	bcc.n	8004442 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	621a      	str	r2, [r3, #32]
 8004440:	e017      	b.n	8004472 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800444a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800444e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800445a:	e00a      	b.n	8004472 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	657b      	str	r3, [r7, #84]	@ 0x54
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d165      	bne.n	800454c <HAL_PCD_EP_DB_Transmit+0x750>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004494:	4413      	add	r3, r2
 8004496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	011a      	lsls	r2, r3, #4
 800449e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044a0:	4413      	add	r3, r2
 80044a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80044be:	d91d      	bls.n	80044fc <HAL_PCD_EP_DB_Transmit+0x700>
 80044c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_PCD_EP_DB_Transmit+0x6de>
 80044d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044d6:	3b01      	subs	r3, #1
 80044d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4313      	orrs	r3, r2
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e041      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x784>
 80044fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004512:	b29a      	uxth	r2, r3
 8004514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e032      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x784>
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_PCD_EP_DB_Transmit+0x738>
 800452e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004530:	3301      	adds	r3, #1
 8004532:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29a      	uxth	r2, r3
 800453a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29b      	uxth	r3, r3
 8004542:	4313      	orrs	r3, r2
 8004544:	b29a      	uxth	r2, r3
 8004546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	e019      	b.n	8004580 <HAL_PCD_EP_DB_Transmit+0x784>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d115      	bne.n	8004580 <HAL_PCD_EP_DB_Transmit+0x784>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004562:	4413      	add	r3, r2
 8004564:	657b      	str	r3, [r7, #84]	@ 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456e:	4413      	add	r3, r2
 8004570:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004574:	653b      	str	r3, [r7, #80]	@ 0x50
 8004576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800457a:	b29a      	uxth	r2, r3
 800457c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800457e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6959      	ldr	r1, [r3, #20]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	895a      	ldrh	r2, [r3, #10]
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	b29b      	uxth	r3, r3
 8004592:	f004 f912 	bl	80087ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045b0:	82bb      	strh	r3, [r7, #20]
 80045b2:	8abb      	ldrh	r3, [r7, #20]
 80045b4:	f083 0310 	eor.w	r3, r3, #16
 80045b8:	82bb      	strh	r3, [r7, #20]
 80045ba:	8abb      	ldrh	r3, [r7, #20]
 80045bc:	f083 0320 	eor.w	r3, r3, #32
 80045c0:	82bb      	strh	r3, [r7, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	8abb      	ldrh	r3, [r7, #20]
 80045d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3790      	adds	r7, #144	@ 0x90
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	4613      	mov	r3, r2
 8004600:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	f003 0207 	and.w	r2, r3, #7
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3310      	adds	r3, #16
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e009      	b.n	800463a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004626:	897a      	ldrh	r2, [r7, #10]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	b29a      	uxth	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	80da      	strh	r2, [r3, #6]
 800464e:	e00b      	b.n	8004668 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2201      	movs	r2, #1
 8004654:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b29a      	uxth	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	b29a      	uxth	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e272      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8087 	beq.w	80047a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004694:	4b92      	ldr	r3, [pc, #584]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b04      	cmp	r3, #4
 800469e:	d00c      	beq.n	80046ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046a0:	4b8f      	ldr	r3, [pc, #572]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d112      	bne.n	80046d2 <HAL_RCC_OscConfig+0x5e>
 80046ac:	4b8c      	ldr	r3, [pc, #560]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ba:	4b89      	ldr	r3, [pc, #548]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d06c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x12c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d168      	bne.n	80047a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e24c      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x76>
 80046dc:	4b80      	ldr	r3, [pc, #512]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7f      	ldr	r2, [pc, #508]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e02e      	b.n	8004748 <HAL_RCC_OscConfig+0xd4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0x98>
 80046f2:	4b7b      	ldr	r3, [pc, #492]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7a      	ldr	r2, [pc, #488]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b78      	ldr	r3, [pc, #480]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a77      	ldr	r2, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004704:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0xd4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0xbc>
 8004716:	4b72      	ldr	r3, [pc, #456]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a71      	ldr	r2, [pc, #452]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b6f      	ldr	r3, [pc, #444]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6e      	ldr	r2, [pc, #440]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xd4>
 8004730:	4b6b      	ldr	r3, [pc, #428]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6a      	ldr	r2, [pc, #424]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b68      	ldr	r3, [pc, #416]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a67      	ldr	r2, [pc, #412]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fc fad6 	bl	8000d00 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fc fad2 	bl	8000d00 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	@ 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e200      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	4b5d      	ldr	r3, [pc, #372]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0xe4>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fc fac2 	bl	8000d00 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fc fabe 	bl	8000d00 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1ec      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x10c>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ae:	4b4c      	ldr	r3, [pc, #304]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ba:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d11c      	bne.n	8004800 <HAL_RCC_OscConfig+0x18c>
 80047c6:	4b46      	ldr	r3, [pc, #280]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d116      	bne.n	8004800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x176>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1c0      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b3d      	ldr	r3, [pc, #244]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4939      	ldr	r1, [pc, #228]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	e03a      	b.n	8004876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004808:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <HAL_RCC_OscConfig+0x270>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fc fa77 	bl	8000d00 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004816:	f7fc fa73 	bl	8000d00 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1a1      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b2a      	ldr	r3, [pc, #168]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4927      	ldr	r1, [pc, #156]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484a:	4b26      	ldr	r3, [pc, #152]	@ (80048e4 <HAL_RCC_OscConfig+0x270>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004850:	f7fc fa56 	bl	8000d00 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004858:	f7fc fa52 	bl	8000d00 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e180      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03a      	beq.n	80048f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d019      	beq.n	80048be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488a:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <HAL_RCC_OscConfig+0x274>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fc fa36 	bl	8000d00 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004898:	f7fc fa32 	bl	8000d00 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e160      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f000 face 	bl	8004e58 <RCC_Delay>
 80048bc:	e01c      	b.n	80048f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048be:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <HAL_RCC_OscConfig+0x274>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c4:	f7fc fa1c 	bl	8000d00 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ca:	e00f      	b.n	80048ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fc fa18 	bl	8000d00 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d908      	bls.n	80048ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e146      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	42420000 	.word	0x42420000
 80048e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b92      	ldr	r3, [pc, #584]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e9      	bne.n	80048cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80a6 	beq.w	8004a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	4b88      	ldr	r3, [pc, #544]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4a87      	ldr	r2, [pc, #540]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004920:	61d3      	str	r3, [r2, #28]
 8004922:	4b85      	ldr	r3, [pc, #532]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b82      	ldr	r3, [pc, #520]	@ (8004b3c <HAL_RCC_OscConfig+0x4c8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b3c <HAL_RCC_OscConfig+0x4c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7e      	ldr	r2, [pc, #504]	@ (8004b3c <HAL_RCC_OscConfig+0x4c8>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fc f9d9 	bl	8000d00 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fc f9d5 	bl	8000d00 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b64      	cmp	r3, #100	@ 0x64
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e103      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	4b75      	ldr	r3, [pc, #468]	@ (8004b3c <HAL_RCC_OscConfig+0x4c8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x312>
 8004978:	4b6f      	ldr	r3, [pc, #444]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6213      	str	r3, [r2, #32]
 8004984:	e02d      	b.n	80049e2 <HAL_RCC_OscConfig+0x36e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x334>
 800498e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4a69      	ldr	r2, [pc, #420]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6213      	str	r3, [r2, #32]
 800499a:	4b67      	ldr	r3, [pc, #412]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4a66      	ldr	r2, [pc, #408]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	e01c      	b.n	80049e2 <HAL_RCC_OscConfig+0x36e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x356>
 80049b0:	4b61      	ldr	r3, [pc, #388]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	4a60      	ldr	r2, [pc, #384]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6213      	str	r3, [r2, #32]
 80049bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6213      	str	r3, [r2, #32]
 80049c8:	e00b      	b.n	80049e2 <HAL_RCC_OscConfig+0x36e>
 80049ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6213      	str	r3, [r2, #32]
 80049d6:	4b58      	ldr	r3, [pc, #352]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4a57      	ldr	r2, [pc, #348]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ea:	f7fc f989 	bl	8000d00 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fc f985 	bl	8000d00 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0b1      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	4b4b      	ldr	r3, [pc, #300]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ee      	beq.n	80049f2 <HAL_RCC_OscConfig+0x37e>
 8004a14:	e014      	b.n	8004a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fc f973 	bl	8000d00 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fc f96f 	bl	8000d00 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e09b      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a34:	4b40      	ldr	r3, [pc, #256]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4b3c      	ldr	r3, [pc, #240]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8087 	beq.w	8004b6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d061      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d146      	bne.n	8004afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b33      	ldr	r3, [pc, #204]	@ (8004b40 <HAL_RCC_OscConfig+0x4cc>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a76:	f7fc f943 	bl	8000d00 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fc f93f 	bl	8000d00 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e06d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	4b29      	ldr	r3, [pc, #164]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d108      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4921      	ldr	r1, [pc, #132]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a19      	ldr	r1, [r3, #32]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	491b      	ldr	r1, [pc, #108]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b40 <HAL_RCC_OscConfig+0x4cc>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fc f913 	bl	8000d00 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fc f90f 	bl	8000d00 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e03d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af0:	4b11      	ldr	r3, [pc, #68]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x46a>
 8004afc:	e035      	b.n	8004b6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afe:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <HAL_RCC_OscConfig+0x4cc>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fc f8fc 	bl	8000d00 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fc f8f8 	bl	8000d00 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e026      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x498>
 8004b2a:	e01e      	b.n	8004b6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e019      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_RCC_OscConfig+0x500>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000

08004b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0d0      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d910      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b67      	ldr	r3, [pc, #412]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4965      	ldr	r1, [pc, #404]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b63      	ldr	r3, [pc, #396]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0b8      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bec:	4b53      	ldr	r3, [pc, #332]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	494d      	ldr	r1, [pc, #308]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d040      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d115      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e073      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b3d      	ldr	r3, [pc, #244]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e06b      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c56:	4b39      	ldr	r3, [pc, #228]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4936      	ldr	r1, [pc, #216]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fc f84a 	bl	8000d00 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fc f846 	bl	8000d00 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e053      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b2d      	ldr	r3, [pc, #180]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 020c 	and.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1eb      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d210      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0207 	bic.w	r2, r3, #7
 8004cae:	4922      	ldr	r1, [pc, #136]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e032      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4916      	ldr	r1, [pc, #88]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490e      	ldr	r1, [pc, #56]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f821 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490a      	ldr	r1, [pc, #40]	@ (8004d40 <HAL_RCC_ClockConfig+0x1c8>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a09      	ldr	r2, [pc, #36]	@ (8004d44 <HAL_RCC_ClockConfig+0x1cc>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d22:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_ClockConfig+0x1d0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fb ffa8 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800a734 	.word	0x0800a734
 8004d44:	20000000 	.word	0x20000000
 8004d48:	20000004 	.word	0x20000004

08004d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d66:	4b1e      	ldr	r3, [pc, #120]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x30>
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x36>
 8004d7a:	e027      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d7c:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d7e:	613b      	str	r3, [r7, #16]
      break;
 8004d80:	e027      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0c9b      	lsrs	r3, r3, #18
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	4a17      	ldr	r2, [pc, #92]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d8c:	5cd3      	ldrb	r3, [r2, r3]
 8004d8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d9a:	4b11      	ldr	r3, [pc, #68]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	0c5b      	lsrs	r3, r3, #17
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	4a11      	ldr	r2, [pc, #68]	@ (8004dec <HAL_RCC_GetSysClockFreq+0xa0>)
 8004da6:	5cd3      	ldrb	r3, [r2, r3]
 8004da8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a0d      	ldr	r2, [pc, #52]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dae:	fb03 f202 	mul.w	r2, r3, r2
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e004      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	613b      	str	r3, [r7, #16]
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dce:	613b      	str	r3, [r7, #16]
      break;
 8004dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd2:	693b      	ldr	r3, [r7, #16]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40021000 	.word	0x40021000
 8004de4:	007a1200 	.word	0x007a1200
 8004de8:	0800a74c 	.word	0x0800a74c
 8004dec:	0800a75c 	.word	0x0800a75c
 8004df0:	003d0900 	.word	0x003d0900

08004df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b02      	ldr	r3, [pc, #8]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	20000000 	.word	0x20000000

08004e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e0c:	f7ff fff2 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	4903      	ldr	r1, [pc, #12]	@ (8004e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	0800a744 	.word	0x0800a744

08004e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e34:	f7ff ffde 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	0adb      	lsrs	r3, r3, #11
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	@ (8004e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	0800a744 	.word	0x0800a744

08004e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e60:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <RCC_Delay+0x34>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0a      	ldr	r2, [pc, #40]	@ (8004e90 <RCC_Delay+0x38>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a5b      	lsrs	r3, r3, #9
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e74:	bf00      	nop
  }
  while (Delay --);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1e5a      	subs	r2, r3, #1
 8004e7a:	60fa      	str	r2, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f9      	bne.n	8004e74 <RCC_Delay+0x1c>
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	10624dd3 	.word	0x10624dd3

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d07d      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	61d3      	str	r3, [r2, #28]
 8004ecc:	4b49      	ldr	r3, [pc, #292]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	4b46      	ldr	r3, [pc, #280]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d118      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee8:	4b43      	ldr	r3, [pc, #268]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a42      	ldr	r2, [pc, #264]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef4:	f7fb ff04 	bl	8000d00 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	e008      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efc:	f7fb ff00 	bl	8000d00 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e06d      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02e      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d027      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f38:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f42:	4b2e      	ldr	r3, [pc, #184]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f48:	4b2c      	ldr	r3, [pc, #176]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fb fecf 	bl	8000d00 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fb fecb 	bl	8000d00 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e036      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ee      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4917      	ldr	r1, [pc, #92]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	490b      	ldr	r1, [pc, #44]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4904      	ldr	r1, [pc, #16]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42420440 	.word	0x42420440

08005000 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b10      	cmp	r3, #16
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b10      	cmp	r3, #16
 8005026:	f200 808a 	bhi.w	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d045      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d075      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005036:	e082      	b.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005038:	4b46      	ldr	r3, [pc, #280]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800503e:	4b45      	ldr	r3, [pc, #276]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d07b      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	0c9b      	lsrs	r3, r3, #18
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	4a41      	ldr	r2, [pc, #260]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005054:	5cd3      	ldrb	r3, [r2, r3]
 8005056:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005062:	4b3c      	ldr	r3, [pc, #240]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	0c5b      	lsrs	r3, r3, #17
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	4a3b      	ldr	r2, [pc, #236]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800506e:	5cd3      	ldrb	r3, [r2, r3]
 8005070:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800507c:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fbb2 f2f3 	udiv	r2, r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e004      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a4:	d102      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	61bb      	str	r3, [r7, #24]
      break;
 80050aa:	e04a      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
      break;
 80050ba:	e042      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80050bc:	4b25      	ldr	r3, [pc, #148]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050cc:	d108      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80050d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e01f      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ea:	d109      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80050ec:	4b19      	ldr	r3, [pc, #100]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80050f8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e00f      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510a:	d11c      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800510c:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005118:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800511c:	61bb      	str	r3, [r7, #24]
      break;
 800511e:	e012      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005120:	e011      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005122:	f7ff fe85 	bl	8004e30 <HAL_RCC_GetPCLK2Freq>
 8005126:	4602      	mov	r2, r0
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0b9b      	lsrs	r3, r3, #14
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	61bb      	str	r3, [r7, #24]
      break;
 800513c:	e004      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005146:	bf00      	nop
    }
  }
  return (frequency);
 8005148:	69bb      	ldr	r3, [r7, #24]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
 8005158:	0800a760 	.word	0x0800a760
 800515c:	0800a770 	.word	0x0800a770
 8005160:	007a1200 	.word	0x007a1200
 8005164:	003d0900 	.word	0x003d0900
 8005168:	aaaaaaab 	.word	0xaaaaaaab

0800516c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fc10 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 fbe2 	bl	8005974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e041      	b.n	80052a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f839 	bl	80052a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 fb93 	bl	8005974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x24>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e022      	b.n	8005326 <HAL_TIM_PWM_Start+0x6a>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d109      	bne.n	80052fa <HAL_TIM_PWM_Start+0x3e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e015      	b.n	8005326 <HAL_TIM_PWM_Start+0x6a>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start+0x58>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e008      	b.n	8005326 <HAL_TIM_PWM_Start+0x6a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e05e      	b.n	80053ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0x82>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533c:	e013      	b.n	8005366 <HAL_TIM_PWM_Start+0xaa>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0x92>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534c:	e00b      	b.n	8005366 <HAL_TIM_PWM_Start+0xaa>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_PWM_Start+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800535c:	e003      	b.n	8005366 <HAL_TIM_PWM_Start+0xaa>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fd8c 	bl	8005e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <HAL_TIM_PWM_Start+0x138>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d107      	bne.n	800538e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_TIM_PWM_Start+0x138>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xfa>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xfa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <HAL_TIM_PWM_Start+0x13c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xfa>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a12      	ldr	r2, [pc, #72]	@ (80053fc <HAL_TIM_PWM_Start+0x140>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d010      	beq.n	80053ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	e007      	b.n	80053ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800

08005400 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e093      	b.n	800553c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fb fae3 	bl	80009f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f000 fa8d 	bl	8005974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	4313      	orrs	r3, r2
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054a0:	f023 030c 	bic.w	r3, r3, #12
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	4313      	orrs	r3, r2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	031b      	lsls	r3, r3, #12
 80054d0:	4313      	orrs	r3, r2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	4313      	orrs	r3, r2
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005554:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800555c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005564:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800556c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d110      	bne.n	8005596 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d102      	bne.n	8005580 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800557a:	7b7b      	ldrb	r3, [r7, #13]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e069      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005594:	e031      	b.n	80055fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d110      	bne.n	80055be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d102      	bne.n	80055a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055a2:	7b3b      	ldrb	r3, [r7, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d001      	beq.n	80055ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e055      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055bc:	e01d      	b.n	80055fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c4:	7bbb      	ldrb	r3, [r7, #14]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ca:	7b7b      	ldrb	r3, [r7, #13]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d0:	7b3b      	ldrb	r3, [r7, #12]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d001      	beq.n	80055da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e03e      	b.n	8005658 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_TIM_Encoder_Start+0xc4>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d008      	beq.n	8005618 <HAL_TIM_Encoder_Start+0xd4>
 8005606:	e00f      	b.n	8005628 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fc3b 	bl	8005e8c <TIM_CCxChannelCmd>
      break;
 8005616:	e016      	b.n	8005646 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	2104      	movs	r1, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fc33 	bl	8005e8c <TIM_CCxChannelCmd>
      break;
 8005626:	e00e      	b.n	8005646 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc2b 	bl	8005e8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	2104      	movs	r1, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fc24 	bl	8005e8c <TIM_CCxChannelCmd>
      break;
 8005644:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800567a:	2302      	movs	r3, #2
 800567c:	e0ae      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	f200 809f 	bhi.w	80057cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080057cd 	.word	0x080057cd
 800569c:	080057cd 	.word	0x080057cd
 80056a0:	080057cd 	.word	0x080057cd
 80056a4:	08005709 	.word	0x08005709
 80056a8:	080057cd 	.word	0x080057cd
 80056ac:	080057cd 	.word	0x080057cd
 80056b0:	080057cd 	.word	0x080057cd
 80056b4:	0800574b 	.word	0x0800574b
 80056b8:	080057cd 	.word	0x080057cd
 80056bc:	080057cd 	.word	0x080057cd
 80056c0:	080057cd 	.word	0x080057cd
 80056c4:	0800578b 	.word	0x0800578b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f9be 	bl	8005a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0208 	orr.w	r2, r2, #8
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0204 	bic.w	r2, r2, #4
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	619a      	str	r2, [r3, #24]
      break;
 8005706:	e064      	b.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa04 	bl	8005b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	619a      	str	r2, [r3, #24]
      break;
 8005748:	e043      	b.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fa4d 	bl	8005bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0204 	bic.w	r2, r2, #4
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	61da      	str	r2, [r3, #28]
      break;
 8005788:	e023      	b.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fa97 	bl	8005cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	021a      	lsls	r2, r3, #8
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	61da      	str	r2, [r3, #28]
      break;
 80057ca:	e002      	b.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
      break;
 80057d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_ConfigClockSource+0x1c>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0b4      	b.n	800596a <HAL_TIM_ConfigClockSource+0x186>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800581e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005838:	d03e      	beq.n	80058b8 <HAL_TIM_ConfigClockSource+0xd4>
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583e:	f200 8087 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005846:	f000 8086 	beq.w	8005956 <HAL_TIM_ConfigClockSource+0x172>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584e:	d87f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b70      	cmp	r3, #112	@ 0x70
 8005852:	d01a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0xa6>
 8005854:	2b70      	cmp	r3, #112	@ 0x70
 8005856:	d87b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b60      	cmp	r3, #96	@ 0x60
 800585a:	d050      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x11a>
 800585c:	2b60      	cmp	r3, #96	@ 0x60
 800585e:	d877      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b50      	cmp	r3, #80	@ 0x50
 8005862:	d03c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xfa>
 8005864:	2b50      	cmp	r3, #80	@ 0x50
 8005866:	d873      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d058      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x13a>
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d86f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005870:	2b30      	cmp	r3, #48	@ 0x30
 8005872:	d064      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15a>
 8005874:	2b30      	cmp	r3, #48	@ 0x30
 8005876:	d86b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d060      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15a>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d867      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15a>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d05a      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	e062      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800589a:	f000 fad8 	bl	8005e4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]
      break;
 80058b6:	e04f      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	f000 fac1 	bl	8005e4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058da:	609a      	str	r2, [r3, #8]
      break;
 80058dc:	e03c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fa38 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2150      	movs	r1, #80	@ 0x50
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fa8f 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 80058fc:	e02c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fa56 	bl	8005dbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2160      	movs	r1, #96	@ 0x60
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa7f 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 800591c:	e01c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fa18 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2140      	movs	r1, #64	@ 0x40
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa6f 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 800593c:	e00c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fa66 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 800594e:	e003      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e000      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2f      	ldr	r2, [pc, #188]	@ (8005a44 <TIM_Base_SetConfig+0xd0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x30>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x30>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2c      	ldr	r2, [pc, #176]	@ (8005a48 <TIM_Base_SetConfig+0xd4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x30>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a4c <TIM_Base_SetConfig+0xd8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <TIM_Base_SetConfig+0xd0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x62>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x62>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <TIM_Base_SetConfig+0xd4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x62>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a4c <TIM_Base_SetConfig+0xd8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a44 <TIM_Base_SetConfig+0xd0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800

08005a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f023 0201 	bic.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f023 0302 	bic.w	r3, r3, #2
 8005a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <TIM_OC1_SetConfig+0xc8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <TIM_OC1_SetConfig+0xc8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00

08005b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f023 0210 	bic.w	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0320 	bic.w	r3, r3, #32
 8005b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <TIM_OC2_SetConfig+0xd0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10d      	bne.n	8005b98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a14      	ldr	r2, [pc, #80]	@ (8005bec <TIM_OC2_SetConfig+0xd0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	40012c00 	.word	0x40012c00

08005bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <TIM_OC3_SetConfig+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10d      	bne.n	8005c6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a14      	ldr	r2, [pc, #80]	@ (8005cc0 <TIM_OC3_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d113      	bne.n	8005c9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00

08005cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d5c <TIM_OC4_SetConfig+0x98>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d109      	bne.n	8005d38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	40012c00 	.word	0x40012c00

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0210 	bic.w	r2, r3, #16
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	031b      	lsls	r3, r3, #12
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005df8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f043 0307 	orr.w	r3, r3, #7
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_TIMEx_PWMN_Start+0x24>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e022      	b.n	8005f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d109      	bne.n	8005f12 <HAL_TIMEx_PWMN_Start+0x3e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	bf14      	ite	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	2300      	moveq	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	e015      	b.n	8005f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d109      	bne.n	8005f2c <HAL_TIMEx_PWMN_Start+0x58>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e008      	b.n	8005f3e <HAL_TIMEx_PWMN_Start+0x6a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e059      	b.n	8005ffa <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIMEx_PWMN_Start+0x82>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f54:	e013      	b.n	8005f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d104      	bne.n	8005f66 <HAL_TIMEx_PWMN_Start+0x92>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f64:	e00b      	b.n	8005f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIMEx_PWMN_Start+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f74:	e003      	b.n	8005f7e <HAL_TIMEx_PWMN_Start+0xaa>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2204      	movs	r2, #4
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f8f1 	bl	800616e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_TIMEx_PWMN_Start+0x130>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIMEx_PWMN_Start+0xf0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIMEx_PWMN_Start+0xf0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a14      	ldr	r2, [pc, #80]	@ (8006008 <HAL_TIMEx_PWMN_Start+0x134>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIMEx_PWMN_Start+0xf0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	@ (800600c <HAL_TIMEx_PWMN_Start+0x138>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d010      	beq.n	8005ff8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	e007      	b.n	8005ff8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e046      	b.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006074:	d009      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10c      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800

080060cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e03d      	b.n	8006164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800616e:	b480      	push	{r7}
 8006170:	b087      	sub	sp, #28
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	2204      	movs	r2, #4
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1a      	ldr	r2, [r3, #32]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	43db      	mvns	r3, r3
 8006190:	401a      	ands	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	431a      	orrs	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	4638      	mov	r0, r7
 80061c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061e0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006204:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006208:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	b29b      	uxth	r3, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	b29b      	uxth	r3, r3
 800621a:	4013      	ands	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	4638      	mov	r0, r7
 8006252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
	...

08006284 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b09d      	sub	sp, #116	@ 0x74
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	78db      	ldrb	r3, [r3, #3]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d81f      	bhi.n	80062f6 <USB_ActivateEndpoint+0x72>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <USB_ActivateEndpoint+0x38>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062ff 	.word	0x080062ff
 80062c8:	080062db 	.word	0x080062db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062d8:	e012      	b.n	8006300 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80062e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062e6:	e00b      	b.n	8006300 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062f4:	e004      	b.n	8006300 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80062fc:	e000      	b.n	8006300 <USB_ActivateEndpoint+0x7c>
      break;
 80062fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006338:	b29b      	uxth	r3, r3
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	4313      	orrs	r3, r2
 8006340:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	7b1b      	ldrb	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 8178 	bne.w	8006660 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8084 	beq.w	8006482 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	4413      	add	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	011a      	lsls	r2, r3, #4
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	827b      	strh	r3, [r7, #18]
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01b      	beq.n	80063fe <USB_ActivateEndpoint+0x17a>
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	823b      	strh	r3, [r7, #16]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	8a3b      	ldrh	r3, [r7, #16]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	78db      	ldrb	r3, [r3, #3]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d020      	beq.n	8006448 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641c:	81bb      	strh	r3, [r7, #12]
 800641e:	89bb      	ldrh	r3, [r7, #12]
 8006420:	f083 0320 	eor.w	r3, r3, #32
 8006424:	81bb      	strh	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	441a      	add	r2, r3
 8006430:	89bb      	ldrh	r3, [r7, #12]
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
 8006446:	e2d5      	b.n	80069f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645e:	81fb      	strh	r3, [r7, #14]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	89fb      	ldrh	r3, [r7, #14]
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
 8006480:	e2b8      	b.n	80069f4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	4413      	add	r3, r2
 8006494:	633b      	str	r3, [r7, #48]	@ 0x30
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	011a      	lsls	r2, r3, #4
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	4413      	add	r3, r2
 80064c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80064f0:	d91d      	bls.n	800652e <USB_ActivateEndpoint+0x2aa>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <USB_ActivateEndpoint+0x288>
 8006506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006508:	3b01      	subs	r3, #1
 800650a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29a      	uxth	r2, r3
 8006512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e026      	b.n	800657c <USB_ActivateEndpoint+0x2f8>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USB_ActivateEndpoint+0x2c8>
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29a      	uxth	r2, r3
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e017      	b.n	800657c <USB_ActivateEndpoint+0x2f8>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <USB_ActivateEndpoint+0x2e2>
 8006560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006562:	3301      	adds	r3, #1
 8006564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29a      	uxth	r2, r3
 800656c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29a      	uxth	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	847b      	strh	r3, [r7, #34]	@ 0x22
 800658a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800658c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <USB_ActivateEndpoint+0x348>
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	843b      	strh	r3, [r7, #32]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	8c3b      	ldrh	r3, [r7, #32]
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d124      	bne.n	800661e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	83bb      	strh	r3, [r7, #28]
 80065ec:	8bbb      	ldrh	r3, [r7, #28]
 80065ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065f2:	83bb      	strh	r3, [r7, #28]
 80065f4:	8bbb      	ldrh	r3, [r7, #28]
 80065f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065fa:	83bb      	strh	r3, [r7, #28]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	8bbb      	ldrh	r3, [r7, #28]
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]
 800661c:	e1ea      	b.n	80069f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006634:	83fb      	strh	r3, [r7, #30]
 8006636:	8bfb      	ldrh	r3, [r7, #30]
 8006638:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800663c:	83fb      	strh	r3, [r7, #30]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	441a      	add	r2, r3
 8006648:	8bfb      	ldrh	r3, [r7, #30]
 800664a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800664e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800665a:	b29b      	uxth	r3, r3
 800665c:	8013      	strh	r3, [r2, #0]
 800665e:	e1c9      	b.n	80069f4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	78db      	ldrb	r3, [r3, #3]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d11e      	bne.n	80066a6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800667a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006698:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800669c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	8013      	strh	r3, [r2, #0]
 80066a4:	e01d      	b.n	80066e2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80066b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066bc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80066ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066de:	b29b      	uxth	r3, r3
 80066e0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f2:	4413      	add	r3, r2
 80066f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	011a      	lsls	r2, r3, #4
 80066fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006704:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	891b      	ldrh	r3, [r3, #8]
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	657b      	str	r3, [r7, #84]	@ 0x54
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006726:	4413      	add	r3, r2
 8006728:	657b      	str	r3, [r7, #84]	@ 0x54
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	011a      	lsls	r2, r3, #4
 8006730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006732:	4413      	add	r3, r2
 8006734:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006738:	653b      	str	r3, [r7, #80]	@ 0x50
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	895b      	ldrh	r3, [r3, #10]
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006748:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8093 	bne.w	800687a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006764:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01b      	beq.n	80067a8 <USB_ActivateEndpoint+0x524>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006786:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80067b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80067b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <USB_ActivateEndpoint+0x574>
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	441a      	add	r2, r3
 80067e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80067e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800680a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006810:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006812:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006816:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006818:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800681a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800681e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006856:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
 8006878:	e0bc      	b.n	80069f4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800688a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800688e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01d      	beq.n	80068d2 <USB_ActivateEndpoint+0x64e>
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80068e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01d      	beq.n	800692a <USB_ActivateEndpoint+0x6a6>
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006904:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	78db      	ldrb	r3, [r3, #3]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d024      	beq.n	800697c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006948:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800694c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006950:	f083 0320 	eor.w	r3, r3, #32
 8006954:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006976:	b29b      	uxth	r3, r3
 8006978:	8013      	strh	r3, [r2, #0]
 800697a:	e01d      	b.n	80069b8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006992:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80069e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3774      	adds	r7, #116	@ 0x74
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b08d      	sub	sp, #52	@ 0x34
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	7b1b      	ldrb	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 808e 	bne.w	8006b34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d044      	beq.n	8006aaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	81bb      	strh	r3, [r7, #12]
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <USB_DeactivateEndpoint+0x6c>
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4e:	817b      	strh	r3, [r7, #10]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a86:	813b      	strh	r3, [r7, #8]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	441a      	add	r2, r3
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]
 8006aa8:	e192      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	827b      	strh	r3, [r7, #18]
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01b      	beq.n	8006afa <USB_DeactivateEndpoint+0xf6>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad8:	823b      	strh	r3, [r7, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8a3b      	ldrh	r3, [r7, #16]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b10:	81fb      	strh	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e14d      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80a5 	bne.w	8006c88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	843b      	strh	r3, [r7, #32]
 8006b4c:	8c3b      	ldrh	r3, [r7, #32]
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01b      	beq.n	8006b8e <USB_DeactivateEndpoint+0x18a>
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	83fb      	strh	r3, [r7, #30]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	8bfb      	ldrh	r3, [r7, #30]
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	83bb      	strh	r3, [r7, #28]
 8006b9c:	8bbb      	ldrh	r3, [r7, #28]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_DeactivateEndpoint+0x1da>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbc:	837b      	strh	r3, [r7, #26]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	833b      	strh	r3, [r7, #24]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8b3b      	ldrh	r3, [r7, #24]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2c:	82fb      	strh	r3, [r7, #22]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	82bb      	strh	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8abb      	ldrh	r3, [r7, #20]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e0a3      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <USB_DeactivateEndpoint+0x2d4>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006ce6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <USB_DeactivateEndpoint+0x324>
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3734      	adds	r7, #52	@ 0x34
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b0c2      	sub	sp, #264	@ 0x108
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dea:	6018      	str	r0, [r3, #0]
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	f040 86b7 	bne.w	8007b76 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d908      	bls.n	8006e36 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e34:	e007      	b.n	8006e46 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	7b1b      	ldrb	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d13a      	bne.n	8006ecc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6959      	ldr	r1, [r3, #20]
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	88da      	ldrh	r2, [r3, #6]
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f001 fc9c 	bl	80087ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	011a      	lsls	r2, r3, #4
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	f000 be1f 	b.w	8007b0a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	78db      	ldrb	r3, [r3, #3]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f040 8462 	bne.w	80077a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	f240 83df 	bls.w	80076ba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 81c7 	beq.w	800732c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d177      	bne.n	80070aa <USB_EPStartXfer+0x2ce>
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	4413      	add	r3, r2
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	011a      	lsls	r2, r3, #4
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	4413      	add	r3, r2
 8006ff0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007000:	b29a      	uxth	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	2b3e      	cmp	r3, #62	@ 0x3e
 800700c:	d921      	bls.n	8007052 <USB_EPStartXfer+0x276>
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <USB_EPStartXfer+0x252>
 8007024:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007028:	3b01      	subs	r3, #1
 800702a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704a:	b29a      	uxth	r2, r3
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e050      	b.n	80070f4 <USB_EPStartXfer+0x318>
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_EPStartXfer+0x294>
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007068:	b29a      	uxth	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e041      	b.n	80070f4 <USB_EPStartXfer+0x318>
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <USB_EPStartXfer+0x2b4>
 8007086:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800708a:	3301      	adds	r3, #1
 800708c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e024      	b.n	80070f4 <USB_EPStartXfer+0x318>
 80070aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d11c      	bne.n	80070f4 <USB_EPStartXfer+0x318>
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	4413      	add	r3, r2
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	011a      	lsls	r2, r3, #4
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	4413      	add	r3, r2
 80070e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	895b      	ldrh	r3, [r3, #10]
 8007100:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6959      	ldr	r1, [r3, #20]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	b29b      	uxth	r3, r3
 8007116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800711a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800711e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	f001 fb49 	bl	80087ba <USB_WritePMA>
            ep->xfer_buff += len;
 8007128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	441a      	add	r2, r3
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d90f      	bls.n	8007182 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	621a      	str	r2, [r3, #32]
 8007180:	e00e      	b.n	80071a0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2200      	movs	r2, #0
 800719e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d177      	bne.n	80072a0 <USB_EPStartXfer+0x4c4>
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	011a      	lsls	r2, r3, #4
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	2b3e      	cmp	r3, #62	@ 0x3e
 8007202:	d921      	bls.n	8007248 <USB_EPStartXfer+0x46c>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0x448>
 800721a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29b      	uxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e056      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <USB_EPStartXfer+0x48a>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725e:	b29a      	uxth	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e047      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USB_EPStartXfer+0x4aa>
 800727c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007280:	3301      	adds	r3, #1
 8007282:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29a      	uxth	r2, r3
 800728c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	e02a      	b.n	80072f6 <USB_EPStartXfer+0x51a>
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d122      	bne.n	80072f6 <USB_EPStartXfer+0x51a>
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	4413      	add	r3, r2
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	891b      	ldrh	r3, [r3, #8]
 8007302:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	b29b      	uxth	r3, r3
 8007318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800731c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007320:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 fa48 	bl	80087ba <USB_WritePMA>
 800732a:	e3ee      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d177      	bne.n	800742c <USB_EPStartXfer+0x650>
 800733c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800735c:	4413      	add	r3, r2
 800735e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007370:	4413      	add	r3, r2
 8007372:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007376:	647b      	str	r3, [r7, #68]	@ 0x44
 8007378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	2b3e      	cmp	r3, #62	@ 0x3e
 800738e:	d921      	bls.n	80073d4 <USB_EPStartXfer+0x5f8>
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <USB_EPStartXfer+0x5d4>
 80073a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073aa:	3b01      	subs	r3, #1
 80073ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	029b      	lsls	r3, r3, #10
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e056      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <USB_EPStartXfer+0x616>
 80073dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e047      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <USB_EPStartXfer+0x636>
 8007408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800740c:	3301      	adds	r3, #1
 800740e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29a      	uxth	r2, r3
 8007418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800741c:	b29b      	uxth	r3, r3
 800741e:	029b      	lsls	r3, r3, #10
 8007420:	b29b      	uxth	r3, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e02a      	b.n	8007482 <USB_EPStartXfer+0x6a6>
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d122      	bne.n	8007482 <USB_EPStartXfer+0x6a6>
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	653b      	str	r3, [r7, #80]	@ 0x50
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800745c:	4413      	add	r3, r2
 800745e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007470:	4413      	add	r3, r2
 8007472:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	b29a      	uxth	r2, r3
 800747e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	891b      	ldrh	r3, [r3, #8]
 800748e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074b0:	6800      	ldr	r0, [r0, #0]
 80074b2:	f001 f982 	bl	80087ba <USB_WritePMA>
            ep->xfer_buff += len;
 80074b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c6:	441a      	add	r2, r3
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d90f      	bls.n	8007510 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	621a      	str	r2, [r3, #32]
 800750e:	e00e      	b.n	800752e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	643b      	str	r3, [r7, #64]	@ 0x40
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d177      	bne.n	800763a <USB_EPStartXfer+0x85e>
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007564:	b29b      	uxth	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	4413      	add	r3, r2
 800756c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800756e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	011a      	lsls	r2, r3, #4
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	4413      	add	r3, r2
 8007580:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
 8007586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007590:	b29a      	uxth	r2, r3
 8007592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759a:	2b3e      	cmp	r3, #62	@ 0x3e
 800759c:	d921      	bls.n	80075e2 <USB_EPStartXfer+0x806>
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <USB_EPStartXfer+0x7e2>
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	3b01      	subs	r3, #1
 80075ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	e050      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <USB_EPStartXfer+0x824>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e041      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <USB_EPStartXfer+0x844>
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761a:	3301      	adds	r3, #1
 800761c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29a      	uxth	r2, r3
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e024      	b.n	8007684 <USB_EPStartXfer+0x8a8>
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d11c      	bne.n	8007684 <USB_EPStartXfer+0x8a8>
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765e:	4413      	add	r3, r2
 8007660:	643b      	str	r3, [r7, #64]	@ 0x40
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007672:	4413      	add	r3, r2
 8007674:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	b29a      	uxth	r2, r3
 8007680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007682:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6959      	ldr	r1, [r3, #20]
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076b2:	6800      	ldr	r0, [r0, #0]
 80076b4:	f001 f881 	bl	80087ba <USB_WritePMA>
 80076b8:	e227      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800771e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007746:	4413      	add	r3, r2
 8007748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800774a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	011a      	lsls	r2, r3, #4
 8007758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800775a:	4413      	add	r3, r2
 800775c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	b29a      	uxth	r2, r3
 8007768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800776a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	891b      	ldrh	r3, [r3, #8]
 8007778:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6959      	ldr	r1, [r3, #20]
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	b29b      	uxth	r3, r3
 800778e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007792:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007796:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	f001 f80d 	bl	80087ba <USB_WritePMA>
 80077a0:	e1b3      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	1ad2      	subs	r2, r2, r3
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80c6 	beq.w	8007974 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d177      	bne.n	80078f4 <USB_EPStartXfer+0xb18>
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007824:	4413      	add	r3, r2
 8007826:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	011a      	lsls	r2, r3, #4
 8007836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007838:	4413      	add	r3, r2
 800783a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800783e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	2b3e      	cmp	r3, #62	@ 0x3e
 8007856:	d921      	bls.n	800789c <USB_EPStartXfer+0xac0>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <USB_EPStartXfer+0xa9c>
 800786e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007872:	3b01      	subs	r3, #1
 8007874:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29a      	uxth	r2, r3
 800787e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29b      	uxth	r3, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	b29b      	uxth	r3, r3
 800788c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007894:	b29a      	uxth	r2, r3
 8007896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e050      	b.n	800793e <USB_EPStartXfer+0xb62>
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <USB_EPStartXfer+0xade>
 80078a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e041      	b.n	800793e <USB_EPStartXfer+0xb62>
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <USB_EPStartXfer+0xafe>
 80078d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e024      	b.n	800793e <USB_EPStartXfer+0xb62>
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d11c      	bne.n	800793e <USB_EPStartXfer+0xb62>
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007918:	4413      	add	r3, r2
 800791a:	673b      	str	r3, [r7, #112]	@ 0x70
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	011a      	lsls	r2, r3, #4
 800792a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800792c:	4413      	add	r3, r2
 800792e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	b29a      	uxth	r2, r3
 800793a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800793c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	895b      	ldrh	r3, [r3, #10]
 800794a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6959      	ldr	r1, [r3, #20]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	b29b      	uxth	r3, r3
 8007960:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007964:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007968:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f000 ff24 	bl	80087ba <USB_WritePMA>
 8007972:	e0ca      	b.n	8007b0a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d177      	bne.n	8007a74 <USB_EPStartXfer+0xc98>
 8007984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079a4:	4413      	add	r3, r2
 80079a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	011a      	lsls	r2, r3, #4
 80079b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079b8:	4413      	add	r3, r2
 80079ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ce:	801a      	strh	r2, [r3, #0]
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80079d6:	d921      	bls.n	8007a1c <USB_EPStartXfer+0xc40>
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USB_EPStartXfer+0xc1c>
 80079ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079f2:	3b01      	subs	r3, #1
 80079f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	029b      	lsls	r3, r3, #10
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e05c      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <USB_EPStartXfer+0xc5e>
 8007a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e04d      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <USB_EPStartXfer+0xc7e>
 8007a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a54:	3301      	adds	r3, #1
 8007a56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e030      	b.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d128      	bne.n	8007ad6 <USB_EPStartXfer+0xcfa>
 8007a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	011a      	lsls	r2, r3, #4
 8007abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ac6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ad4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	891b      	ldrh	r3, [r3, #8]
 8007ae2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6959      	ldr	r1, [r3, #20]
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007afc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b04:	6800      	ldr	r0, [r0, #0]
 8007b06:	f000 fe58 	bl	80087ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b30:	817b      	strh	r3, [r7, #10]
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	f083 0310 	eor.w	r3, r3, #16
 8007b38:	817b      	strh	r3, [r7, #10]
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	f083 0320 	eor.w	r3, r3, #32
 8007b40:	817b      	strh	r3, [r7, #10]
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	441a      	add	r2, r3
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	8013      	strh	r3, [r2, #0]
 8007b72:	f000 bcde 	b.w	8008532 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	7b1b      	ldrb	r3, [r3, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f040 80bb 	bne.w	8007cfe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d917      	bls.n	8007bd4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	619a      	str	r2, [r3, #24]
 8007bd2:	e00e      	b.n	8007bf2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c2e:	4413      	add	r3, r2
 8007c30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c52:	d924      	bls.n	8007c9e <USB_EPStartXfer+0xec2>
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <USB_EPStartXfer+0xe98>
 8007c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	029b      	lsls	r3, r3, #10
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	f000 bc10 	b.w	80084be <USB_EPStartXfer+0x16e2>
 8007c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10c      	bne.n	8007cc0 <USB_EPStartXfer+0xee4>
 8007ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e3fe      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <USB_EPStartXfer+0xf04>
 8007cd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cda:	3301      	adds	r3, #1
 8007cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e3df      	b.n	80084be <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	f040 8218 	bne.w	8008140 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 809d 	bne.w	8007e5c <USB_EPStartXfer+0x1080>
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d46:	4413      	add	r3, r2
 8007d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	011a      	lsls	r2, r3, #4
 8007d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d5e:	4413      	add	r3, r2
 8007d60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d8a:	d92b      	bls.n	8007de4 <USB_EPStartXfer+0x1008>
 8007d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <USB_EPStartXfer+0xfe0>
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db6:	3b01      	subs	r3, #1
 8007db8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e070      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <USB_EPStartXfer+0x1032>
 8007df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	e05b      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <USB_EPStartXfer+0x1062>
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e38:	3301      	adds	r3, #1
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e034      	b.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d12c      	bne.n	8007ec6 <USB_EPStartXfer+0x10ea>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e90:	4413      	add	r3, r2
 8007e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	011a      	lsls	r2, r3, #4
 8007ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 809d 	bne.w	8008020 <USB_EPStartXfer+0x1244>
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	011a      	lsls	r2, r3, #4
 8007f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f22:	4413      	add	r3, r2
 8007f24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f4e:	d92b      	bls.n	8007fa8 <USB_EPStartXfer+0x11cc>
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <USB_EPStartXfer+0x11a4>
 8007f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	e069      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <USB_EPStartXfer+0x11f6>
 8007fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e054      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8007fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <USB_EPStartXfer+0x1226>
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008002:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29a      	uxth	r2, r3
 800800a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800e:	b29b      	uxth	r3, r3
 8008010:	029b      	lsls	r3, r3, #10
 8008012:	b29b      	uxth	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b29a      	uxth	r2, r3
 8008018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e02d      	b.n	800807c <USB_EPStartXfer+0x12a0>
 8008020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d125      	bne.n	800807c <USB_EPStartXfer+0x12a0>
 8008030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008046:	4413      	add	r3, r2
 8008048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800804c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	011a      	lsls	r2, r3, #4
 800805a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800805e:	4413      	add	r3, r2
 8008060:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	b29a      	uxth	r2, r3
 8008076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800807a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8218 	beq.w	80084be <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800808e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <USB_EPStartXfer+0x12ea>
 80080ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 81f5 	bne.w	80084be <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 81ee 	bne.w	80084be <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008108:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008136:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]
 800813e:	e1be      	b.n	80084be <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	78db      	ldrb	r3, [r3, #3]
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 81b4 	bne.w	80084ba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d917      	bls.n	800819e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	619a      	str	r2, [r3, #24]
 800819c:	e00e      	b.n	80081bc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800819e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 8085 	bne.w	80082d8 <USB_EPStartXfer+0x14fc>
 80081ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081f2:	4413      	add	r3, r2
 80081f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	011a      	lsls	r2, r3, #4
 8008206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800820a:	4413      	add	r3, r2
 800820c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822c:	2b3e      	cmp	r3, #62	@ 0x3e
 800822e:	d923      	bls.n	8008278 <USB_EPStartXfer+0x149c>
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2b00      	cmp	r3, #0
 8008244:	d104      	bne.n	8008250 <USB_EPStartXfer+0x1474>
 8008246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800824a:	3b01      	subs	r3, #1
 800824c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800825c:	b29b      	uxth	r3, r3
 800825e:	029b      	lsls	r3, r3, #10
 8008260:	b29b      	uxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826e:	b29a      	uxth	r2, r3
 8008270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e060      	b.n	800833a <USB_EPStartXfer+0x155e>
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <USB_EPStartXfer+0x14be>
 8008280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e04f      	b.n	800833a <USB_EPStartXfer+0x155e>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <USB_EPStartXfer+0x14de>
 80082b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b4:	3301      	adds	r3, #1
 80082b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e030      	b.n	800833a <USB_EPStartXfer+0x155e>
 80082d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d128      	bne.n	800833a <USB_EPStartXfer+0x155e>
 80082e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008304:	b29b      	uxth	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800830c:	4413      	add	r3, r2
 800830e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	011a      	lsls	r2, r3, #4
 8008320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008324:	4413      	add	r3, r2
 8008326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800832a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008332:	b29a      	uxth	r2, r3
 8008334:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8085 	bne.w	8008464 <USB_EPStartXfer+0x1688>
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800837e:	4413      	add	r3, r2
 8008380:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	011a      	lsls	r2, r3, #4
 8008392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008396:	4413      	add	r3, r2
 8008398:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800839c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083b2:	801a      	strh	r2, [r3, #0]
 80083b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80083ba:	d923      	bls.n	8008404 <USB_EPStartXfer+0x1628>
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_EPStartXfer+0x1600>
 80083d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	029b      	lsls	r3, r3, #10
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e05c      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <USB_EPStartXfer+0x164a>
 800840c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e04b      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <USB_EPStartXfer+0x166a>
 800843c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008440:	3301      	adds	r3, #1
 8008442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29b      	uxth	r3, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	b29a      	uxth	r2, r3
 800845c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e02c      	b.n	80084be <USB_EPStartXfer+0x16e2>
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d124      	bne.n	80084be <USB_EPStartXfer+0x16e2>
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	011a      	lsls	r2, r3, #4
 800849e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084b6:	801a      	strh	r2, [r3, #0]
 80084b8:	e001      	b.n	80084be <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e03a      	b.n	8008534 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	441a      	add	r2, r3
 800851a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008566:	81bb      	strh	r3, [r7, #12]
 8008568:	89bb      	ldrh	r3, [r7, #12]
 800856a:	f083 0310 	eor.w	r3, r3, #16
 800856e:	81bb      	strh	r3, [r7, #12]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	441a      	add	r2, r3
 800857a:	89bb      	ldrh	r3, [r7, #12]
 800857c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008580:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858c:	b29b      	uxth	r3, r3
 800858e:	8013      	strh	r3, [r2, #0]
 8008590:	e01f      	b.n	80085d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a8:	81fb      	strh	r3, [r7, #14]
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085b0:	81fb      	strh	r3, [r7, #14]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085de:	b480      	push	{r7}
 80085e0:	b087      	sub	sp, #28
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	7b1b      	ldrb	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 809d 	bne.w	800872c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d04c      	beq.n	8008694 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	823b      	strh	r3, [r7, #16]
 8008608:	8a3b      	ldrh	r3, [r7, #16]
 800860a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01b      	beq.n	800864a <USB_EPClearStall+0x6c>
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008628:	81fb      	strh	r3, [r7, #14]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800863a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800863e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008642:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008646:	b29b      	uxth	r3, r3
 8008648:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	78db      	ldrb	r3, [r3, #3]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d06c      	beq.n	800872c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008668:	81bb      	strh	r3, [r7, #12]
 800866a:	89bb      	ldrh	r3, [r7, #12]
 800866c:	f083 0320 	eor.w	r3, r3, #32
 8008670:	81bb      	strh	r3, [r7, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800868a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]
 8008692:	e04b      	b.n	800872c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	82fb      	strh	r3, [r7, #22]
 80086a2:	8afb      	ldrh	r3, [r7, #22]
 80086a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <USB_EPClearStall+0x106>
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c2:	82bb      	strh	r3, [r7, #20]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	441a      	add	r2, r3
 80086ce:	8abb      	ldrh	r3, [r7, #20]
 80086d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fa:	827b      	strh	r3, [r7, #18]
 80086fc:	8a7b      	ldrh	r3, [r7, #18]
 80086fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008702:	827b      	strh	r3, [r7, #18]
 8008704:	8a7b      	ldrh	r3, [r7, #18]
 8008706:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800870a:	827b      	strh	r3, [r7, #18]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8a7b      	ldrh	r3, [r7, #18]
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2280      	movs	r2, #128	@ 0x80
 800874e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr

08008786 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008794:	b29b      	uxth	r3, r3
 8008796:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008798:	68fb      	ldr	r3, [r7, #12]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr

080087ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b08b      	sub	sp, #44	@ 0x2c
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4611      	mov	r1, r2
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	80fb      	strh	r3, [r7, #6]
 80087cc:	4613      	mov	r3, r2
 80087ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087d0:	88bb      	ldrh	r3, [r7, #4]
 80087d2:	3301      	adds	r3, #1
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	005a      	lsls	r2, r3, #1
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f2:	e01e      	b.n	8008832 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	3301      	adds	r3, #1
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21a      	sxth	r2, r3
 8008804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008808:	4313      	orrs	r3, r2
 800880a:	b21b      	sxth	r3, r3
 800880c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	8a7a      	ldrh	r2, [r7, #18]
 8008812:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	3302      	adds	r3, #2
 8008818:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	3302      	adds	r3, #2
 800881e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	3301      	adds	r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	3301      	adds	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	3b01      	subs	r3, #1
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1dd      	bne.n	80087f4 <USB_WritePMA+0x3a>
  }
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	372c      	adds	r7, #44	@ 0x2c
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008844:	b480      	push	{r7}
 8008846:	b08b      	sub	sp, #44	@ 0x2c
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4611      	mov	r1, r2
 8008850:	461a      	mov	r2, r3
 8008852:	460b      	mov	r3, r1
 8008854:	80fb      	strh	r3, [r7, #6]
 8008856:	4613      	mov	r3, r2
 8008858:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800885a:	88bb      	ldrh	r3, [r7, #4]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	005a      	lsls	r2, r3, #1
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008876:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
 800887c:	e01b      	b.n	80088b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	3302      	adds	r3, #2
 800888a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	b2da      	uxtb	r2, r3
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	3301      	adds	r3, #1
 8008898:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	0a1b      	lsrs	r3, r3, #8
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	3302      	adds	r3, #2
 80088ae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	3b01      	subs	r3, #1
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e0      	bne.n	800887e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80088bc:	88bb      	ldrh	r3, [r7, #4]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d007      	beq.n	80088d8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	701a      	strb	r2, [r3, #0]
  }
}
 80088d8:	bf00      	nop
 80088da:	372c      	adds	r7, #44	@ 0x2c
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <MCP23017_Init>:
#include <MCP23017.h>

void MCP23017_Init(I2C_HandleTypeDef *hi2c)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af04      	add	r7, sp, #16
 80088e8:	6078      	str	r0, [r7, #4]
    uint8_t iodir = 0xFF; // Tất cả chân input
 80088ea:	23ff      	movs	r3, #255	@ 0xff
 80088ec:	73fb      	strb	r3, [r7, #15]

    // Cấu hình cả PORTA và PORTB là input
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRA_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	2301      	movs	r3, #1
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	f107 030f 	add.w	r3, r7, #15
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	2301      	movs	r3, #1
 8008900:	2200      	movs	r2, #0
 8008902:	2140      	movs	r1, #64	@ 0x40
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7f9 fa4b 	bl	8001da0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, IODIRB_REG, 1, &iodir, 1, HAL_MAX_DELAY);
 800890a:	f04f 33ff 	mov.w	r3, #4294967295
 800890e:	9302      	str	r3, [sp, #8]
 8008910:	2301      	movs	r3, #1
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f107 030f 	add.w	r3, r7, #15
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	2301      	movs	r3, #1
 800891c:	2201      	movs	r2, #1
 800891e:	2140      	movs	r1, #64	@ 0x40
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f9 fa3d 	bl	8001da0 <HAL_I2C_Mem_Write>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <MCP23017_Read_GPIOA>:

uint8_t MCP23017_Read_GPIOA(I2C_HandleTypeDef *hi2c)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af04      	add	r7, sp, #16
 8008934:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOA_REG, 1, &value, 1, HAL_MAX_DELAY);
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	9302      	str	r3, [sp, #8]
 800893c:	2301      	movs	r3, #1
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	f107 030f 	add.w	r3, r7, #15
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2301      	movs	r3, #1
 8008948:	2212      	movs	r2, #18
 800894a:	2140      	movs	r1, #64	@ 0x40
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7f9 fb21 	bl	8001f94 <HAL_I2C_Mem_Read>
    return value;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <MCP23017_Read_GPIOB>:

uint8_t MCP23017_Read_GPIOB(I2C_HandleTypeDef *hi2c)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af04      	add	r7, sp, #16
 8008962:	6078      	str	r0, [r7, #4]
    uint8_t value;
    HAL_I2C_Mem_Read(hi2c, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
 8008964:	f04f 33ff 	mov.w	r3, #4294967295
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	2301      	movs	r3, #1
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f107 030f 	add.w	r3, r7, #15
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2301      	movs	r3, #1
 8008976:	2213      	movs	r2, #19
 8008978:	2140      	movs	r1, #64	@ 0x40
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7f9 fb0a 	bl	8001f94 <HAL_I2C_Mem_Read>
    return value;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <MCP23017_WriteRegister>:

void MCP23017_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af04      	add	r7, sp, #16
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
 8008996:	4613      	mov	r3, r2
 8008998:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	b29a      	uxth	r2, r3
 800899e:	f04f 33ff 	mov.w	r3, #4294967295
 80089a2:	9302      	str	r3, [sp, #8]
 80089a4:	2301      	movs	r3, #1
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	1cbb      	adds	r3, r7, #2
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2301      	movs	r3, #1
 80089ae:	2140      	movs	r1, #64	@ 0x40
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7f9 f9f5 	bl	8001da0 <HAL_I2C_Mem_Write>
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <MCP23017_EnablePullUps>:

void MCP23017_EnablePullUps(I2C_HandleTypeDef *hi2c) {
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
    MCP23017_WriteRegister(hi2c, 0x0C, 0xFF);
 80089c6:	22ff      	movs	r2, #255	@ 0xff
 80089c8:	210c      	movs	r1, #12
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff ffdd 	bl	800898a <MCP23017_WriteRegister>
    MCP23017_WriteRegister(hi2c, 0x0D, 0xFF);
 80089d0:	22ff      	movs	r2, #255	@ 0xff
 80089d2:	210d      	movs	r1, #13
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff ffd8 	bl	800898a <MCP23017_WriteRegister>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <TLC59116_Init>:
#include "TLC59116.h"

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b088      	sub	sp, #32
 80089e6:	af04      	add	r7, sp, #16
 80089e8:	6078      	str	r0, [r7, #4]
    uint8_t mode1 = 0x00; // Normal mode
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
 80089ee:	2300      	movs	r3, #0
 80089f0:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	2301      	movs	r3, #1
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	f107 030f 	add.w	r3, r7, #15
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	2200      	movs	r2, #0
 8008a06:	21c0      	movs	r1, #192	@ 0xc0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7f9 f9c9 	bl	8001da0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
 8008a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	2301      	movs	r3, #1
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f107 030e 	add.w	r3, r7, #14
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	2301      	movs	r3, #1
 8008a20:	2201      	movs	r2, #1
 8008a22:	21c0      	movs	r1, #192	@ 0xc0
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7f9 f9bb 	bl	8001da0 <HAL_I2C_Mem_Write>
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <TLC59116_Set_All_PWM_Mode>:
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b088      	sub	sp, #32
 8008a36:	af04      	add	r7, sp, #16
 8008a38:	6078      	str	r0, [r7, #4]
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
 8008a3a:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8008a3e:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008a40:	f04f 33ff 	mov.w	r3, #4294967295
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	2304      	movs	r3, #4
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	f107 030c 	add.w	r3, r7, #12
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2301      	movs	r3, #1
 8008a52:	2214      	movs	r2, #20
 8008a54:	21c0      	movs	r1, #192	@ 0xc0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7f9 f9a2 	bl	8001da0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	2304      	movs	r3, #4
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	f107 030c 	add.w	r3, r7, #12
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	2215      	movs	r2, #21
 8008a70:	21c0      	movs	r1, #192	@ 0xc0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7f9 f994 	bl	8001da0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008a78:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	2304      	movs	r3, #4
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	2216      	movs	r2, #22
 8008a8c:	21c0      	movs	r1, #192	@ 0xc0
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7f9 f986 	bl	8001da0 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
 8008a94:	f04f 33ff 	mov.w	r3, #4294967295
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	2217      	movs	r2, #23
 8008aa8:	21c0      	movs	r1, #192	@ 0xc0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7f9 f978 	bl	8001da0 <HAL_I2C_Mem_Write>
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <TLC59116_Set_PWM>:

void TLC59116_Set_PWM(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	70bb      	strb	r3, [r7, #2]
    if (channel > 15) return;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d811      	bhi.n	8008af2 <TLC59116_Set_PWM+0x3a>
    uint8_t reg = 0x02 + channel;
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	1cbb      	adds	r3, r7, #2
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	21c0      	movs	r1, #192	@ 0xc0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7f9 f958 	bl	8001da0 <HAL_I2C_Mem_Write>
 8008af0:	e000      	b.n	8008af4 <TLC59116_Set_PWM+0x3c>
    if (channel > 15) return;
 8008af2:	bf00      	nop
}
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008b06:	2304      	movs	r3, #4
 8008b08:	2203      	movs	r2, #3
 8008b0a:	2181      	movs	r1, #129	@ 0x81
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fc5e 	bl	800a3ce <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008b18:	2010      	movs	r0, #16
 8008b1a:	f001 fd6b 	bl	800a5f4 <USBD_static_malloc>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e005      	b.n	8008b40 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008b54:	2181      	movs	r1, #129	@ 0x81
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 fc5f 	bl	800a41a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f001 fd4a 	bl	800a60c <USBD_static_free>
    pdev->pClassData = NULL;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d045      	beq.n	8008c46 <USBD_HID_Setup+0xba>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	f040 80d3 	bne.w	8008d66 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	3b02      	subs	r3, #2
 8008bc6:	2b09      	cmp	r3, #9
 8008bc8:	d835      	bhi.n	8008c36 <USBD_HID_Setup+0xaa>
 8008bca:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd0 <USBD_HID_Setup+0x44>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008c27 	.word	0x08008c27
 8008bd4:	08008c07 	.word	0x08008c07
 8008bd8:	08008c37 	.word	0x08008c37
 8008bdc:	08008c37 	.word	0x08008c37
 8008be0:	08008c37 	.word	0x08008c37
 8008be4:	08008c37 	.word	0x08008c37
 8008be8:	08008c37 	.word	0x08008c37
 8008bec:	08008c37 	.word	0x08008c37
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008bf9 	.word	0x08008bf9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	601a      	str	r2, [r3, #0]
          break;
 8008c04:	e01e      	b.n	8008c44 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f91f 	bl	8009e50 <USBD_CtlSendData>
          break;
 8008c12:	e017      	b.n	8008c44 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	885b      	ldrh	r3, [r3, #2]
 8008c18:	0a1b      	lsrs	r3, r3, #8
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	461a      	mov	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]
          break;
 8008c24:	e00e      	b.n	8008c44 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 f90e 	bl	8009e50 <USBD_CtlSendData>
          break;
 8008c34:	e006      	b.n	8008c44 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f89f 	bl	8009d7c <USBD_CtlError>
          ret = USBD_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	75fb      	strb	r3, [r7, #23]
          break;
 8008c42:	bf00      	nop
      }
      break;
 8008c44:	e096      	b.n	8008d74 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b0b      	cmp	r3, #11
 8008c4c:	f200 8083 	bhi.w	8008d56 <USBD_HID_Setup+0x1ca>
 8008c50:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <USBD_HID_Setup+0xcc>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c89 	.word	0x08008c89
 8008c5c:	08008d57 	.word	0x08008d57
 8008c60:	08008d57 	.word	0x08008d57
 8008c64:	08008d57 	.word	0x08008d57
 8008c68:	08008d57 	.word	0x08008d57
 8008c6c:	08008d57 	.word	0x08008d57
 8008c70:	08008cb1 	.word	0x08008cb1
 8008c74:	08008d57 	.word	0x08008d57
 8008c78:	08008d57 	.word	0x08008d57
 8008c7c:	08008d57 	.word	0x08008d57
 8008c80:	08008d09 	.word	0x08008d09
 8008c84:	08008d31 	.word	0x08008d31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d107      	bne.n	8008ca2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c92:	f107 030e 	add.w	r3, r7, #14
 8008c96:	2202      	movs	r2, #2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f8d8 	bl	8009e50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ca0:	e060      	b.n	8008d64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 f869 	bl	8009d7c <USBD_CtlError>
            ret = USBD_FAIL;
 8008caa:	2302      	movs	r3, #2
 8008cac:	75fb      	strb	r3, [r7, #23]
          break;
 8008cae:	e059      	b.n	8008d64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	885b      	ldrh	r3, [r3, #2]
 8008cb4:	0a1b      	lsrs	r3, r3, #8
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b22      	cmp	r3, #34	@ 0x22
 8008cba:	d108      	bne.n	8008cce <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	88db      	ldrh	r3, [r3, #6]
 8008cc0:	2b4a      	cmp	r3, #74	@ 0x4a
 8008cc2:	bf28      	it	cs
 8008cc4:	234a      	movcs	r3, #74	@ 0x4a
 8008cc6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8008cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8008d80 <USBD_HID_Setup+0x1f4>)
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	e015      	b.n	8008cfa <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	885b      	ldrh	r3, [r3, #2]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b21      	cmp	r3, #33	@ 0x21
 8008cd8:	d108      	bne.n	8008cec <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008cda:	4b2a      	ldr	r3, [pc, #168]	@ (8008d84 <USBD_HID_Setup+0x1f8>)
 8008cdc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	88db      	ldrh	r3, [r3, #6]
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	bf28      	it	cs
 8008ce6:	2309      	movcs	r3, #9
 8008ce8:	83fb      	strh	r3, [r7, #30]
 8008cea:	e006      	b.n	8008cfa <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f844 	bl	8009d7c <USBD_CtlError>
            ret = USBD_FAIL;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	75fb      	strb	r3, [r7, #23]
            break;
 8008cf8:	e034      	b.n	8008d64 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8008cfa:	8bfb      	ldrh	r3, [r7, #30]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	69b9      	ldr	r1, [r7, #24]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 f8a5 	bl	8009e50 <USBD_CtlSendData>
          break;
 8008d06:	e02d      	b.n	8008d64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d107      	bne.n	8008d22 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3308      	adds	r3, #8
 8008d16:	2201      	movs	r2, #1
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f898 	bl	8009e50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d20:	e020      	b.n	8008d64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 f829 	bl	8009d7c <USBD_CtlError>
            ret = USBD_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d2e:	e019      	b.n	8008d64 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d106      	bne.n	8008d48 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	885b      	ldrh	r3, [r3, #2]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d46:	e00d      	b.n	8008d64 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 f816 	bl	8009d7c <USBD_CtlError>
            ret = USBD_FAIL;
 8008d50:	2302      	movs	r3, #2
 8008d52:	75fb      	strb	r3, [r7, #23]
          break;
 8008d54:	e006      	b.n	8008d64 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 f80f 	bl	8009d7c <USBD_CtlError>
          ret = USBD_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	75fb      	strb	r3, [r7, #23]
          break;
 8008d62:	bf00      	nop
      }
      break;
 8008d64:	e006      	b.n	8008d74 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f807 	bl	8009d7c <USBD_CtlError>
      ret = USBD_FAIL;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	75fb      	strb	r3, [r7, #23]
      break;
 8008d72:	bf00      	nop
  }

  return ret;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	200000c8 	.word	0x200000c8
 8008d84:	200000b0 	.word	0x200000b0

08008d88 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2222      	movs	r2, #34	@ 0x22
 8008d94:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8008d96:	4b03      	ldr	r3, [pc, #12]	@ (8008da4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000044 	.word	0x20000044

08008da8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2222      	movs	r2, #34	@ 0x22
 8008db4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8008db6:	4b03      	ldr	r3, [pc, #12]	@ (8008dc4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000068 	.word	0x20000068

08008dc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2222      	movs	r2, #34	@ 0x22
 8008dd4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000008c 	.word	0x2000008c

08008de8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
	...

08008e0c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	220a      	movs	r2, #10
 8008e18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008e1a:	4b03      	ldr	r3, [pc, #12]	@ (8008e28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	200000bc 	.word	0x200000bc

08008e2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e40:	2302      	movs	r3, #2
 8008e42:	e01a      	b.n	8008e7a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	79fa      	ldrb	r2, [r7, #7]
 8008e70:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f001 fa48 	bl	800a308 <USBD_LL_Init>

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
 8008ea2:	e001      	b.n	8008ea8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fa6b 	bl	800a398 <USBD_LL_Start>

  return USBD_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	4611      	mov	r1, r2
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3

  return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fed7 	bl	8009d0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d016      	beq.n	8008fae <USBD_LL_SetupStage+0x6a>
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d81c      	bhi.n	8008fbe <USBD_LL_SetupStage+0x7a>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <USBD_LL_SetupStage+0x4a>
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d008      	beq.n	8008f9e <USBD_LL_SetupStage+0x5a>
 8008f8c:	e017      	b.n	8008fbe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f9ca 	bl	8009330 <USBD_StdDevReq>
      break;
 8008f9c:	e01a      	b.n	8008fd4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa2c 	bl	8009404 <USBD_StdItfReq>
      break;
 8008fac:	e012      	b.n	8008fd4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa6c 	bl	8009494 <USBD_StdEPReq>
      break;
 8008fbc:	e00a      	b.n	8008fd4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008fc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 fa43 	bl	800a458 <USBD_LL_StallEP>
      break;
 8008fd2:	bf00      	nop
  }

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d14b      	bne.n	800908a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ff8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009000:	2b03      	cmp	r3, #3
 8009002:	d134      	bne.n	800906e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	429a      	cmp	r2, r3
 800900e:	d919      	bls.n	8009044 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009026:	429a      	cmp	r2, r3
 8009028:	d203      	bcs.n	8009032 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800902e:	b29b      	uxth	r3, r3
 8009030:	e002      	b.n	8009038 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009036:	b29b      	uxth	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 ff35 	bl	8009eac <USBD_CtlContinueRx>
 8009042:	e038      	b.n	80090b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009056:	2b03      	cmp	r3, #3
 8009058:	d105      	bne.n	8009066 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 ff32 	bl	8009ed0 <USBD_CtlSendStatus>
 800906c:	e023      	b.n	80090b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009074:	2b05      	cmp	r3, #5
 8009076:	d11e      	bne.n	80090b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 f9e8 	bl	800a458 <USBD_LL_StallEP>
 8009088:	e015      	b.n	80090b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800909c:	2b03      	cmp	r3, #3
 800909e:	d108      	bne.n	80090b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	7afa      	ldrb	r2, [r7, #11]
 80090aa:	4611      	mov	r1, r2
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	4798      	blx	r3
 80090b0:	e001      	b.n	80090b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090b2:	2302      	movs	r3, #2
 80090b4:	e000      	b.n	80090b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	460b      	mov	r3, r1
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d17f      	bne.n	80091d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3314      	adds	r3, #20
 80090d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d15c      	bne.n	800919e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d915      	bls.n	800911c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 febd 	bl	8009e88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800910e:	2300      	movs	r3, #0
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f001 fa4a 	bl	800a5ae <USBD_LL_PrepareReceive>
 800911a:	e04e      	b.n	80091ba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	6912      	ldr	r2, [r2, #16]
 8009124:	fbb3 f1f2 	udiv	r1, r3, r2
 8009128:	fb01 f202 	mul.w	r2, r1, r2
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d11c      	bne.n	800916c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800913a:	429a      	cmp	r2, r3
 800913c:	d316      	bcc.n	800916c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009148:	429a      	cmp	r2, r3
 800914a:	d20f      	bcs.n	800916c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800914c:	2200      	movs	r2, #0
 800914e:	2100      	movs	r1, #0
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fe99 	bl	8009e88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	2100      	movs	r1, #0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f001 fa22 	bl	800a5ae <USBD_LL_PrepareReceive>
 800916a:	e026      	b.n	80091ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800917e:	2b03      	cmp	r3, #3
 8009180:	d105      	bne.n	800918e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800918e:	2180      	movs	r1, #128	@ 0x80
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f001 f961 	bl	800a458 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 fead 	bl	8009ef6 <USBD_CtlReceiveStatus>
 800919c:	e00d      	b.n	80091ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d004      	beq.n	80091b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091b2:	2180      	movs	r1, #128	@ 0x80
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 f94f 	bl	800a458 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d11d      	bne.n	8009200 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fe81 	bl	8008ecc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80091d2:	e015      	b.n	8009200 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00d      	beq.n	80091fc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d108      	bne.n	80091fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	7afa      	ldrb	r2, [r7, #11]
 80091f4:	4611      	mov	r1, r2
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	4798      	blx	r3
 80091fa:	e001      	b.n	8009200 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091fc:	2302      	movs	r3, #2
 80091fe:	e000      	b.n	8009202 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009212:	2340      	movs	r3, #64	@ 0x40
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 f8d8 	bl	800a3ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2240      	movs	r2, #64	@ 0x40
 800922a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800922e:	2340      	movs	r3, #64	@ 0x40
 8009230:	2200      	movs	r2, #0
 8009232:	2180      	movs	r1, #128	@ 0x80
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 f8ca 	bl	800a3ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2240      	movs	r2, #64	@ 0x40
 8009244:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6852      	ldr	r2, [r2, #4]
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	4611      	mov	r1, r2
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
  }

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d105      	bne.n	80092f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800930a:	2b03      	cmp	r3, #3
 800930c:	d10b      	bne.n	8009326 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009346:	2b40      	cmp	r3, #64	@ 0x40
 8009348:	d005      	beq.n	8009356 <USBD_StdDevReq+0x26>
 800934a:	2b40      	cmp	r3, #64	@ 0x40
 800934c:	d84f      	bhi.n	80093ee <USBD_StdDevReq+0xbe>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <USBD_StdDevReq+0x36>
 8009352:	2b20      	cmp	r3, #32
 8009354:	d14b      	bne.n	80093ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      break;
 8009364:	e048      	b.n	80093f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d839      	bhi.n	80093e2 <USBD_StdDevReq+0xb2>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <USBD_StdDevReq+0x44>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093c5 	.word	0x080093c5
 8009378:	080093d9 	.word	0x080093d9
 800937c:	080093e3 	.word	0x080093e3
 8009380:	080093cf 	.word	0x080093cf
 8009384:	080093e3 	.word	0x080093e3
 8009388:	080093a7 	.word	0x080093a7
 800938c:	0800939d 	.word	0x0800939d
 8009390:	080093e3 	.word	0x080093e3
 8009394:	080093bb 	.word	0x080093bb
 8009398:	080093b1 	.word	0x080093b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9dc 	bl	800975c <USBD_GetDescriptor>
          break;
 80093a4:	e022      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fb3f 	bl	8009a2c <USBD_SetAddress>
          break;
 80093ae:	e01d      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fb7e 	bl	8009ab4 <USBD_SetConfig>
          break;
 80093b8:	e018      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc07 	bl	8009bd0 <USBD_GetConfig>
          break;
 80093c2:	e013      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc37 	bl	8009c3a <USBD_GetStatus>
          break;
 80093cc:	e00e      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc65 	bl	8009ca0 <USBD_SetFeature>
          break;
 80093d6:	e009      	b.n	80093ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fc74 	bl	8009cc8 <USBD_ClrFeature>
          break;
 80093e0:	e004      	b.n	80093ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fcc9 	bl	8009d7c <USBD_CtlError>
          break;
 80093ea:	bf00      	nop
      }
      break;
 80093ec:	e004      	b.n	80093f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fcc3 	bl	8009d7c <USBD_CtlError>
      break;
 80093f6:	bf00      	nop
  }

  return ret;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800941a:	2b40      	cmp	r3, #64	@ 0x40
 800941c:	d005      	beq.n	800942a <USBD_StdItfReq+0x26>
 800941e:	2b40      	cmp	r3, #64	@ 0x40
 8009420:	d82e      	bhi.n	8009480 <USBD_StdItfReq+0x7c>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <USBD_StdItfReq+0x26>
 8009426:	2b20      	cmp	r3, #32
 8009428:	d12a      	bne.n	8009480 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009430:	3b01      	subs	r3, #1
 8009432:	2b02      	cmp	r3, #2
 8009434:	d81d      	bhi.n	8009472 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	889b      	ldrh	r3, [r3, #4]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d813      	bhi.n	8009468 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d110      	bne.n	800947c <USBD_StdItfReq+0x78>
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10d      	bne.n	800947c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd35 	bl	8009ed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009466:	e009      	b.n	800947c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc86 	bl	8009d7c <USBD_CtlError>
          break;
 8009470:	e004      	b.n	800947c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc81 	bl	8009d7c <USBD_CtlError>
          break;
 800947a:	e000      	b.n	800947e <USBD_StdItfReq+0x7a>
          break;
 800947c:	bf00      	nop
      }
      break;
 800947e:	e004      	b.n	800948a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fc7a 	bl	8009d7c <USBD_CtlError>
      break;
 8009488:	bf00      	nop
  }

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094b0:	2b40      	cmp	r3, #64	@ 0x40
 80094b2:	d007      	beq.n	80094c4 <USBD_StdEPReq+0x30>
 80094b4:	2b40      	cmp	r3, #64	@ 0x40
 80094b6:	f200 8146 	bhi.w	8009746 <USBD_StdEPReq+0x2b2>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <USBD_StdEPReq+0x40>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	f040 8141 	bne.w	8009746 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
      break;
 80094d2:	e13d      	b.n	8009750 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d10a      	bne.n	80094f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	e12d      	b.n	8009752 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d007      	beq.n	800950e <USBD_StdEPReq+0x7a>
 80094fe:	2b03      	cmp	r3, #3
 8009500:	f300 811b 	bgt.w	800973a <USBD_StdEPReq+0x2a6>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d072      	beq.n	80095ee <USBD_StdEPReq+0x15a>
 8009508:	2b01      	cmp	r3, #1
 800950a:	d03a      	beq.n	8009582 <USBD_StdEPReq+0xee>
 800950c:	e115      	b.n	800973a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009514:	2b02      	cmp	r3, #2
 8009516:	d002      	beq.n	800951e <USBD_StdEPReq+0x8a>
 8009518:	2b03      	cmp	r3, #3
 800951a:	d015      	beq.n	8009548 <USBD_StdEPReq+0xb4>
 800951c:	e02b      	b.n	8009576 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00c      	beq.n	800953e <USBD_StdEPReq+0xaa>
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b80      	cmp	r3, #128	@ 0x80
 8009528:	d009      	beq.n	800953e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 ff92 	bl	800a458 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009534:	2180      	movs	r1, #128	@ 0x80
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 ff8e 	bl	800a458 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800953c:	e020      	b.n	8009580 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fc1b 	bl	8009d7c <USBD_CtlError>
              break;
 8009546:	e01b      	b.n	8009580 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	885b      	ldrh	r3, [r3, #2]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10e      	bne.n	800956e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <USBD_StdEPReq+0xda>
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b80      	cmp	r3, #128	@ 0x80
 800955a:	d008      	beq.n	800956e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	88db      	ldrh	r3, [r3, #6]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 ff75 	bl	800a458 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fcae 	bl	8009ed0 <USBD_CtlSendStatus>

              break;
 8009574:	e004      	b.n	8009580 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fbff 	bl	8009d7c <USBD_CtlError>
              break;
 800957e:	bf00      	nop
          }
          break;
 8009580:	e0e0      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009588:	2b02      	cmp	r3, #2
 800958a:	d002      	beq.n	8009592 <USBD_StdEPReq+0xfe>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d015      	beq.n	80095bc <USBD_StdEPReq+0x128>
 8009590:	e026      	b.n	80095e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00c      	beq.n	80095b2 <USBD_StdEPReq+0x11e>
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b80      	cmp	r3, #128	@ 0x80
 800959c:	d009      	beq.n	80095b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 ff58 	bl	800a458 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095a8:	2180      	movs	r1, #128	@ 0x80
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 ff54 	bl	800a458 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095b0:	e01c      	b.n	80095ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fbe1 	bl	8009d7c <USBD_CtlError>
              break;
 80095ba:	e017      	b.n	80095ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d112      	bne.n	80095ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d004      	beq.n	80095d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 ff5f 	bl	800a496 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc79 	bl	8009ed0 <USBD_CtlSendStatus>
              }
              break;
 80095de:	e004      	b.n	80095ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fbca 	bl	8009d7c <USBD_CtlError>
              break;
 80095e8:	e000      	b.n	80095ec <USBD_StdEPReq+0x158>
              break;
 80095ea:	bf00      	nop
          }
          break;
 80095ec:	e0aa      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d002      	beq.n	80095fe <USBD_StdEPReq+0x16a>
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d032      	beq.n	8009662 <USBD_StdEPReq+0x1ce>
 80095fc:	e097      	b.n	800972e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <USBD_StdEPReq+0x180>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b80      	cmp	r3, #128	@ 0x80
 8009608:	d004      	beq.n	8009614 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fbb5 	bl	8009d7c <USBD_CtlError>
                break;
 8009612:	e091      	b.n	8009738 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	da0b      	bge.n	8009634 <USBD_StdEPReq+0x1a0>
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	3310      	adds	r3, #16
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	4413      	add	r3, r2
 8009630:	3304      	adds	r3, #4
 8009632:	e00b      	b.n	800964c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	3304      	adds	r3, #4
 800964c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2202      	movs	r2, #2
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fbf8 	bl	8009e50 <USBD_CtlSendData>
              break;
 8009660:	e06a      	b.n	8009738 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009666:	2b00      	cmp	r3, #0
 8009668:	da11      	bge.n	800968e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3318      	adds	r3, #24
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d117      	bne.n	80096b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fb78 	bl	8009d7c <USBD_CtlError>
                  break;
 800968c:	e054      	b.n	8009738 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fb65 	bl	8009d7c <USBD_CtlError>
                  break;
 80096b2:	e041      	b.n	8009738 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da0b      	bge.n	80096d4 <USBD_StdEPReq+0x240>
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3310      	adds	r3, #16
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	e00b      	b.n	80096ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	3304      	adds	r3, #4
 80096ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <USBD_StdEPReq+0x266>
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d103      	bne.n	8009702 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e00e      	b.n	8009720 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fee4 	bl	800a4d4 <USBD_LL_IsStallEP>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e002      	b.n	8009720 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2202      	movs	r2, #2
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb92 	bl	8009e50 <USBD_CtlSendData>
              break;
 800972c:	e004      	b.n	8009738 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fb23 	bl	8009d7c <USBD_CtlError>
              break;
 8009736:	bf00      	nop
          }
          break;
 8009738:	e004      	b.n	8009744 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fb1d 	bl	8009d7c <USBD_CtlError>
          break;
 8009742:	bf00      	nop
      }
      break;
 8009744:	e004      	b.n	8009750 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fb17 	bl	8009d7c <USBD_CtlError>
      break;
 800974e:	bf00      	nop
  }

  return ret;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	2b06      	cmp	r3, #6
 800977e:	f200 8128 	bhi.w	80099d2 <USBD_GetDescriptor+0x276>
 8009782:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <USBD_GetDescriptor+0x2c>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097bd 	.word	0x080097bd
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080099d3 	.word	0x080099d3
 8009798:	080099d3 	.word	0x080099d3
 800979c:	08009973 	.word	0x08009973
 80097a0:	0800999f 	.word	0x0800999f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
      break;
 80097ba:	e112      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7c1b      	ldrb	r3, [r3, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10d      	bne.n	80097e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097cc:	f107 0208 	add.w	r2, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	2202      	movs	r2, #2
 80097dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097de:	e100      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e8:	f107 0208 	add.w	r2, r7, #8
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
 80097f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	2202      	movs	r2, #2
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e0f2      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	885b      	ldrh	r3, [r3, #2]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b05      	cmp	r3, #5
 8009804:	f200 80ac 	bhi.w	8009960 <USBD_GetDescriptor+0x204>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <USBD_GetDescriptor+0xb4>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009829 	.word	0x08009829
 8009814:	0800985d 	.word	0x0800985d
 8009818:	08009891 	.word	0x08009891
 800981c:	080098c5 	.word	0x080098c5
 8009820:	080098f9 	.word	0x080098f9
 8009824:	0800992d 	.word	0x0800992d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7c12      	ldrb	r2, [r2, #16]
 8009840:	f107 0108 	add.w	r1, r7, #8
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984a:	e091      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa94 	bl	8009d7c <USBD_CtlError>
            err++;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3301      	adds	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]
          break;
 800985a:	e089      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	7c12      	ldrb	r2, [r2, #16]
 8009874:	f107 0108 	add.w	r1, r7, #8
 8009878:	4610      	mov	r0, r2
 800987a:	4798      	blx	r3
 800987c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800987e:	e077      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa7a 	bl	8009d7c <USBD_CtlError>
            err++;
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	3301      	adds	r3, #1
 800988c:	72fb      	strb	r3, [r7, #11]
          break;
 800988e:	e06f      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00b      	beq.n	80098b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	7c12      	ldrb	r2, [r2, #16]
 80098a8:	f107 0108 	add.w	r1, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b2:	e05d      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa60 	bl	8009d7c <USBD_CtlError>
            err++;
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	3301      	adds	r3, #1
 80098c0:	72fb      	strb	r3, [r7, #11]
          break;
 80098c2:	e055      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7c12      	ldrb	r2, [r2, #16]
 80098dc:	f107 0108 	add.w	r1, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098e6:	e043      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa46 	bl	8009d7c <USBD_CtlError>
            err++;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	3301      	adds	r3, #1
 80098f4:	72fb      	strb	r3, [r7, #11]
          break;
 80098f6:	e03b      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7c12      	ldrb	r2, [r2, #16]
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
 8009918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991a:	e029      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa2c 	bl	8009d7c <USBD_CtlError>
            err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
          break;
 800992a:	e021      	b.n	8009970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c12      	ldrb	r2, [r2, #16]
 8009944:	f107 0108 	add.w	r1, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994e:	e00f      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa12 	bl	8009d7c <USBD_CtlError>
            err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
          break;
 800995e:	e007      	b.n	8009970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa0a 	bl	8009d7c <USBD_CtlError>
          err++;
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	3301      	adds	r3, #1
 800996c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800996e:	e038      	b.n	80099e2 <USBD_GetDescriptor+0x286>
 8009970:	e037      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	7c1b      	ldrb	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009982:	f107 0208 	add.w	r2, r7, #8
 8009986:	4610      	mov	r0, r2
 8009988:	4798      	blx	r3
 800998a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998c:	e029      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f9f3 	bl	8009d7c <USBD_CtlError>
        err++;
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	3301      	adds	r3, #1
 800999a:	72fb      	strb	r3, [r7, #11]
      break;
 800999c:	e021      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c1b      	ldrb	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ae:	f107 0208 	add.w	r2, r7, #8
 80099b2:	4610      	mov	r0, r2
 80099b4:	4798      	blx	r3
 80099b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	2207      	movs	r2, #7
 80099be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c0:	e00f      	b.n	80099e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9d9 	bl	8009d7c <USBD_CtlError>
        err++;
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	3301      	adds	r3, #1
 80099ce:	72fb      	strb	r3, [r7, #11]
      break;
 80099d0:	e007      	b.n	80099e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9d1 	bl	8009d7c <USBD_CtlError>
      err++;
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	3301      	adds	r3, #1
 80099de:	72fb      	strb	r3, [r7, #11]
      break;
 80099e0:	bf00      	nop
  }

  if (err != 0U)
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11c      	bne.n	8009a22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099e8:	893b      	ldrh	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d011      	beq.n	8009a12 <USBD_GetDescriptor+0x2b6>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88da      	ldrh	r2, [r3, #6]
 80099fa:	893b      	ldrh	r3, [r7, #8]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bf28      	it	cs
 8009a00:	4613      	movcs	r3, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a06:	893b      	ldrh	r3, [r7, #8]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa1f 	bl	8009e50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	88db      	ldrh	r3, [r3, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d104      	bne.n	8009a24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa58 	bl	8009ed0 <USBD_CtlSendStatus>
 8009a20:	e000      	b.n	8009a24 <USBD_GetDescriptor+0x2c8>
    return;
 8009a22:	bf00      	nop
    }
  }
}
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop

08009a2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	889b      	ldrh	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d130      	bne.n	8009aa0 <USBD_SetAddress+0x74>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d12c      	bne.n	8009aa0 <USBD_SetAddress+0x74>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	885b      	ldrh	r3, [r3, #2]
 8009a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a4c:	d828      	bhi.n	8009aa0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d104      	bne.n	8009a6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f988 	bl	8009d7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6c:	e01d      	b.n	8009aaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7bfa      	ldrb	r2, [r7, #15]
 8009a72:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fd55 	bl	800a52a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fa25 	bl	8009ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	e009      	b.n	8009aaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	e004      	b.n	8009aaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f96a 	bl	8009d7c <USBD_CtlError>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	4b41      	ldr	r3, [pc, #260]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ac8:	4b40      	ldr	r3, [pc, #256]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d904      	bls.n	8009ada <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f952 	bl	8009d7c <USBD_CtlError>
 8009ad8:	e075      	b.n	8009bc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d002      	beq.n	8009aea <USBD_SetConfig+0x36>
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d023      	beq.n	8009b30 <USBD_SetConfig+0x7c>
 8009ae8:	e062      	b.n	8009bb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aea:	4b38      	ldr	r3, [pc, #224]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01a      	beq.n	8009b28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009af2:	4b36      	ldr	r3, [pc, #216]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2203      	movs	r2, #3
 8009b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b04:	4b31      	ldr	r3, [pc, #196]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff f9e8 	bl	8008ee0 <USBD_SetClassConfig>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d104      	bne.n	8009b20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f92f 	bl	8009d7c <USBD_CtlError>
            return;
 8009b1e:	e052      	b.n	8009bc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f9d5 	bl	8009ed0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b26:	e04e      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9d1 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009b2e:	e04a      	b.n	8009bc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b30:	4b26      	ldr	r3, [pc, #152]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d112      	bne.n	8009b5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009b40:	4b22      	ldr	r3, [pc, #136]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b4a:	4b20      	ldr	r3, [pc, #128]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff f9e4 	bl	8008f1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f9ba 	bl	8009ed0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b5c:	e033      	b.n	8009bc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d01d      	beq.n	8009ba8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff f9d2 	bl	8008f1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b7a:	4b14      	ldr	r3, [pc, #80]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b84:	4b11      	ldr	r3, [pc, #68]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff f9a8 	bl	8008ee0 <USBD_SetClassConfig>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d104      	bne.n	8009ba0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8ef 	bl	8009d7c <USBD_CtlError>
            return;
 8009b9e:	e012      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f995 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009ba6:	e00e      	b.n	8009bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f991 	bl	8009ed0 <USBD_CtlSendStatus>
        break;
 8009bae:	e00a      	b.n	8009bc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f8e2 	bl	8009d7c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <USBD_SetConfig+0x118>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff f9ad 	bl	8008f1e <USBD_ClrClassConfig>
        break;
 8009bc4:	bf00      	nop
    }
  }
}
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000324 	.word	0x20000324

08009bd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d004      	beq.n	8009bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f8c9 	bl	8009d7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bea:	e022      	b.n	8009c32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	dc02      	bgt.n	8009bfc <USBD_GetConfig+0x2c>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dc03      	bgt.n	8009c02 <USBD_GetConfig+0x32>
 8009bfa:	e015      	b.n	8009c28 <USBD_GetConfig+0x58>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d00b      	beq.n	8009c18 <USBD_GetConfig+0x48>
 8009c00:	e012      	b.n	8009c28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f91d 	bl	8009e50 <USBD_CtlSendData>
        break;
 8009c16:	e00c      	b.n	8009c32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f915 	bl	8009e50 <USBD_CtlSendData>
        break;
 8009c26:	e004      	b.n	8009c32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f8a6 	bl	8009d7c <USBD_CtlError>
        break;
 8009c30:	bf00      	nop
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d81e      	bhi.n	8009c8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	88db      	ldrh	r3, [r3, #6]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d004      	beq.n	8009c62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f88e 	bl	8009d7c <USBD_CtlError>
        break;
 8009c60:	e01a      	b.n	8009c98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f043 0202 	orr.w	r2, r3, #2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	330c      	adds	r3, #12
 8009c82:	2202      	movs	r2, #2
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f8e2 	bl	8009e50 <USBD_CtlSendData>
      break;
 8009c8c:	e004      	b.n	8009c98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f873 	bl	8009d7c <USBD_CtlError>
      break;
 8009c96:	bf00      	nop
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	885b      	ldrh	r3, [r3, #2]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d106      	bne.n	8009cc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f908 	bl	8009ed0 <USBD_CtlSendStatus>
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d80b      	bhi.n	8009cf6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	885b      	ldrh	r3, [r3, #2]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10c      	bne.n	8009d00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8ee 	bl	8009ed0 <USBD_CtlSendStatus>
      }
      break;
 8009cf4:	e004      	b.n	8009d00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f83f 	bl	8009d7c <USBD_CtlError>
      break;
 8009cfe:	e000      	b.n	8009d02 <USBD_ClrFeature+0x3a>
      break;
 8009d00:	bf00      	nop
  }
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	785a      	ldrb	r2, [r3, #1]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	3302      	adds	r3, #2
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3303      	adds	r3, #3
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4413      	add	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	3305      	adds	r3, #5
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	3306      	adds	r3, #6
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	3307      	adds	r3, #7
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	4413      	add	r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	80da      	strh	r2, [r3, #6]

}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bc80      	pop	{r7}
 8009d7a:	4770      	bx	lr

08009d7c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d86:	2180      	movs	r1, #128	@ 0x80
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fb65 	bl	800a458 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d8e:	2100      	movs	r1, #0
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fb61 	bl	800a458 <USBD_LL_StallEP>
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b086      	sub	sp, #24
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d032      	beq.n	8009e1a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f834 	bl	8009e22 <USBD_GetLen>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	75fa      	strb	r2, [r7, #23]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	75fa      	strb	r2, [r7, #23]
 8009de0:	461a      	mov	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4413      	add	r3, r2
 8009de6:	2203      	movs	r2, #3
 8009de8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009dea:	e012      	b.n	8009e12 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	60fa      	str	r2, [r7, #12]
 8009df2:	7dfa      	ldrb	r2, [r7, #23]
 8009df4:	1c51      	adds	r1, r2, #1
 8009df6:	75f9      	strb	r1, [r7, #23]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	75fa      	strb	r2, [r7, #23]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e8      	bne.n	8009dec <USBD_GetString+0x4e>
    }
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e2e:	e005      	b.n	8009e3c <USBD_GetLen+0x1a>
  {
    len++;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	3301      	adds	r3, #1
 8009e34:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f5      	bne.n	8009e30 <USBD_GetLen+0xe>
  }

  return len;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bc80      	pop	{r7}
 8009e4e:	4770      	bx	lr

08009e50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2202      	movs	r2, #2
 8009e62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e66:	88fa      	ldrh	r2, [r7, #6]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e6c:	88fa      	ldrh	r2, [r7, #6]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e72:	88fb      	ldrh	r3, [r7, #6]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	2100      	movs	r1, #0
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 fb75 	bl	800a568 <USBD_LL_Transmit>

  return USBD_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 fb63 	bl	800a568 <USBD_LL_Transmit>

  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fb74 	bl	800a5ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2204      	movs	r2, #4
 8009edc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fb3e 	bl	800a568 <USBD_LL_Transmit>

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2205      	movs	r2, #5
 8009f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f06:	2300      	movs	r3, #0
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fb4e 	bl	800a5ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f20:	2200      	movs	r2, #0
 8009f22:	490e      	ldr	r1, [pc, #56]	@ (8009f5c <MX_USB_DEVICE_Init+0x40>)
 8009f24:	480e      	ldr	r0, [pc, #56]	@ (8009f60 <MX_USB_DEVICE_Init+0x44>)
 8009f26:	f7fe ff81 	bl	8008e2c <USBD_Init>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f30:	f7f6 fc66 	bl	8000800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009f34:	490b      	ldr	r1, [pc, #44]	@ (8009f64 <MX_USB_DEVICE_Init+0x48>)
 8009f36:	480a      	ldr	r0, [pc, #40]	@ (8009f60 <MX_USB_DEVICE_Init+0x44>)
 8009f38:	f7fe ffa3 	bl	8008e82 <USBD_RegisterClass>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f42:	f7f6 fc5d 	bl	8000800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f46:	4806      	ldr	r0, [pc, #24]	@ (8009f60 <MX_USB_DEVICE_Init+0x44>)
 8009f48:	f7fe ffb4 	bl	8008eb4 <USBD_Start>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009f52:	f7f6 fc55 	bl	8000800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f56:	bf00      	nop
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000114 	.word	0x20000114
 8009f60:	20000328 	.word	0x20000328
 8009f64:	2000000c 	.word	0x2000000c

08009f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2212      	movs	r2, #18
 8009f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f7a:	4b03      	ldr	r3, [pc, #12]	@ (8009f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20000130 	.word	0x20000130

08009f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2204      	movs	r2, #4
 8009f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f9e:	4b03      	ldr	r3, [pc, #12]	@ (8009fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20000144 	.word	0x20000144

08009fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d105      	bne.n	8009fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	4907      	ldr	r1, [pc, #28]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fc6:	4808      	ldr	r0, [pc, #32]	@ (8009fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fc8:	f7ff fee9 	bl	8009d9e <USBD_GetString>
 8009fcc:	e004      	b.n	8009fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4904      	ldr	r1, [pc, #16]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fd2:	4805      	ldr	r0, [pc, #20]	@ (8009fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fd4:	f7ff fee3 	bl	8009d9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fd8:	4b02      	ldr	r3, [pc, #8]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200005ec 	.word	0x200005ec
 8009fe8:	0800a6fc 	.word	0x0800a6fc

08009fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	4904      	ldr	r1, [pc, #16]	@ (800a00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ffc:	4804      	ldr	r0, [pc, #16]	@ (800a010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ffe:	f7ff fece 	bl	8009d9e <USBD_GetString>
  return USBD_StrDesc;
 800a002:	4b02      	ldr	r3, [pc, #8]	@ (800a00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200005ec 	.word	0x200005ec
 800a010:	0800a714 	.word	0x0800a714

0800a014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	221a      	movs	r2, #26
 800a024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a026:	f000 f843 	bl	800a0b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a02a:	4b02      	ldr	r3, [pc, #8]	@ (800a034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000148 	.word	0x20000148

0800a038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	6039      	str	r1, [r7, #0]
 800a042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	4907      	ldr	r1, [pc, #28]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a04e:	4808      	ldr	r0, [pc, #32]	@ (800a070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a050:	f7ff fea5 	bl	8009d9e <USBD_GetString>
 800a054:	e004      	b.n	800a060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4904      	ldr	r1, [pc, #16]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a05a:	4805      	ldr	r0, [pc, #20]	@ (800a070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a05c:	f7ff fe9f 	bl	8009d9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	200005ec 	.word	0x200005ec
 800a070:	0800a718 	.word	0x0800a718

0800a074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4603      	mov	r3, r0
 800a07c:	6039      	str	r1, [r7, #0]
 800a07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d105      	bne.n	800a092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4907      	ldr	r1, [pc, #28]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a08a:	4808      	ldr	r0, [pc, #32]	@ (800a0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a08c:	f7ff fe87 	bl	8009d9e <USBD_GetString>
 800a090:	e004      	b.n	800a09c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4904      	ldr	r1, [pc, #16]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a096:	4805      	ldr	r0, [pc, #20]	@ (800a0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a098:	f7ff fe81 	bl	8009d9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a09c:	4b02      	ldr	r3, [pc, #8]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200005ec 	.word	0x200005ec
 800a0ac:	0800a724 	.word	0x0800a724

0800a0b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f4 <Get_SerialNum+0x44>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f8 <Get_SerialNum+0x48>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a0fc <Get_SerialNum+0x4c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	4909      	ldr	r1, [pc, #36]	@ (800a100 <Get_SerialNum+0x50>)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f814 	bl	800a108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	4908      	ldr	r1, [pc, #32]	@ (800a104 <Get_SerialNum+0x54>)
 800a0e4:	68b8      	ldr	r0, [r7, #8]
 800a0e6:	f000 f80f 	bl	800a108 <IntToUnicode>
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	1ffff7e8 	.word	0x1ffff7e8
 800a0f8:	1ffff7ec 	.word	0x1ffff7ec
 800a0fc:	1ffff7f0 	.word	0x1ffff7f0
 800a100:	2000014a 	.word	0x2000014a
 800a104:	2000015a 	.word	0x2000015a

0800a108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a11a:	2300      	movs	r3, #0
 800a11c:	75fb      	strb	r3, [r7, #23]
 800a11e:	e027      	b.n	800a170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	0f1b      	lsrs	r3, r3, #28
 800a124:	2b09      	cmp	r3, #9
 800a126:	d80b      	bhi.n	800a140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	0f1b      	lsrs	r3, r3, #28
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4619      	mov	r1, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	440b      	add	r3, r1
 800a138:	3230      	adds	r2, #48	@ 0x30
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	e00a      	b.n	800a156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	0f1b      	lsrs	r3, r3, #28
 800a144:	b2da      	uxtb	r2, r3
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	4619      	mov	r1, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	440b      	add	r3, r1
 800a150:	3237      	adds	r2, #55	@ 0x37
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	3301      	adds	r3, #1
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	4413      	add	r3, r2
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	3301      	adds	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
 800a170:	7dfa      	ldrb	r2, [r7, #23]
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	429a      	cmp	r2, r3
 800a176:	d3d3      	bcc.n	800a120 <IntToUnicode+0x18>
  }
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr

0800a184 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0d      	ldr	r2, [pc, #52]	@ (800a1c8 <HAL_PCD_MspInit+0x44>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d113      	bne.n	800a1be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <HAL_PCD_MspInit+0x48>)
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	4a0c      	ldr	r2, [pc, #48]	@ (800a1cc <HAL_PCD_MspInit+0x48>)
 800a19c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1a0:	61d3      	str	r3, [r2, #28]
 800a1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <HAL_PCD_MspInit+0x48>)
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	2014      	movs	r0, #20
 800a1b4:	f7f7 fadd 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a1b8:	2014      	movs	r0, #20
 800a1ba:	f7f7 faf6 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	40005c00 	.word	0x40005c00
 800a1cc:	40021000 	.word	0x40021000

0800a1d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f7fe feac 	bl	8008f44 <USBD_LL_SetupStage>
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	440b      	add	r3, r1
 800a214:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	4619      	mov	r1, r3
 800a21e:	f7fe fede 	bl	8008fde <USBD_LL_DataOutStage>
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	440b      	add	r3, r1
 800a24a:	3324      	adds	r3, #36	@ 0x24
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	4619      	mov	r1, r3
 800a252:	f7fe ff35 	bl	80090c0 <USBD_LL_DataInStage>
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff f845 	bl	80092fc <USBD_LL_SOF>
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a282:	2301      	movs	r3, #1
 800a284:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	799b      	ldrb	r3, [r3, #6]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d001      	beq.n	800a292 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a28e:	f7f6 fab7 	bl	8000800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a298:	7bfa      	ldrb	r2, [r7, #15]
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe fff5 	bl	800928c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe ffae 	bl	800920a <USBD_LL_Reset>
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe ffef 	bl	80092aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7a9b      	ldrb	r3, [r3, #10]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2d4:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <HAL_PCD_SuspendCallback+0x30>)
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	4a03      	ldr	r2, [pc, #12]	@ (800a2e8 <HAL_PCD_SuspendCallback+0x30>)
 800a2da:	f043 0306 	orr.w	r3, r3, #6
 800a2de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed00 	.word	0xe000ed00

0800a2ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe ffe9 	bl	80092d2 <USBD_LL_Resume>
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a310:	4a1f      	ldr	r2, [pc, #124]	@ (800a390 <USBD_LL_Init+0x88>)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a1d      	ldr	r2, [pc, #116]	@ (800a390 <USBD_LL_Init+0x88>)
 800a31c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a320:	4b1b      	ldr	r3, [pc, #108]	@ (800a390 <USBD_LL_Init+0x88>)
 800a322:	4a1c      	ldr	r2, [pc, #112]	@ (800a394 <USBD_LL_Init+0x8c>)
 800a324:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a326:	4b1a      	ldr	r3, [pc, #104]	@ (800a390 <USBD_LL_Init+0x88>)
 800a328:	2208      	movs	r2, #8
 800a32a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a32c:	4b18      	ldr	r3, [pc, #96]	@ (800a390 <USBD_LL_Init+0x88>)
 800a32e:	2202      	movs	r2, #2
 800a330:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a332:	4b17      	ldr	r3, [pc, #92]	@ (800a390 <USBD_LL_Init+0x88>)
 800a334:	2200      	movs	r2, #0
 800a336:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a338:	4b15      	ldr	r3, [pc, #84]	@ (800a390 <USBD_LL_Init+0x88>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a33e:	4b14      	ldr	r3, [pc, #80]	@ (800a390 <USBD_LL_Init+0x88>)
 800a340:	2200      	movs	r2, #0
 800a342:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a344:	4812      	ldr	r0, [pc, #72]	@ (800a390 <USBD_LL_Init+0x88>)
 800a346:	f7f8 fc4c 	bl	8002be2 <HAL_PCD_Init>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a350:	f7f6 fa56 	bl	8000800 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a35a:	2318      	movs	r3, #24
 800a35c:	2200      	movs	r2, #0
 800a35e:	2100      	movs	r1, #0
 800a360:	f7fa f946 	bl	80045f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a36a:	2358      	movs	r3, #88	@ 0x58
 800a36c:	2200      	movs	r2, #0
 800a36e:	2180      	movs	r1, #128	@ 0x80
 800a370:	f7fa f93e 	bl	80045f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a37a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a37e:	2200      	movs	r2, #0
 800a380:	2181      	movs	r1, #129	@ 0x81
 800a382:	f7fa f935 	bl	80045f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200007ec 	.word	0x200007ec
 800a394:	40005c00 	.word	0x40005c00

0800a398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7f8 fd0d 	bl	8002dce <HAL_PCD_Start>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f93a 	bl	800a634 <USBD_Get_USB_Status>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4603      	mov	r3, r0
 800a3de:	70fb      	strb	r3, [r7, #3]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70bb      	strb	r3, [r7, #2]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3f6:	78bb      	ldrb	r3, [r7, #2]
 800a3f8:	883a      	ldrh	r2, [r7, #0]
 800a3fa:	78f9      	ldrb	r1, [r7, #3]
 800a3fc:	f7f8 fe61 	bl	80030c2 <HAL_PCD_EP_Open>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f914 	bl	800a634 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f8 fe9f 	bl	800317c <HAL_PCD_EP_Close>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f8f5 	bl	800a634 <USBD_Get_USB_Status>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a472:	78fa      	ldrb	r2, [r7, #3]
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f7f8 ff30 	bl	80032dc <HAL_PCD_EP_SetStall>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f8d6 	bl	800a634 <USBD_Get_USB_Status>
 800a488:	4603      	mov	r3, r0
 800a48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4b0:	78fa      	ldrb	r2, [r7, #3]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f8 ff71 	bl	800339c <HAL_PCD_EP_ClrStall>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 f8b7 	bl	800a634 <USBD_Get_USB_Status>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da0b      	bge.n	800a508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	440b      	add	r3, r1
 800a502:	3312      	adds	r3, #18
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	e00b      	b.n	800a520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a50e:	68f9      	ldr	r1, [r7, #12]
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	440b      	add	r3, r1
 800a51a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a51e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr

0800a52a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7f8 fd96 	bl	800307a <HAL_PCD_SetAddress>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f86d 	bl	800a634 <USBD_Get_USB_Status>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	607a      	str	r2, [r7, #4]
 800a572:	461a      	mov	r2, r3
 800a574:	460b      	mov	r3, r1
 800a576:	72fb      	strb	r3, [r7, #11]
 800a578:	4613      	mov	r3, r2
 800a57a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58a:	893b      	ldrh	r3, [r7, #8]
 800a58c:	7af9      	ldrb	r1, [r7, #11]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	f7f8 fe6d 	bl	800326e <HAL_PCD_EP_Transmit>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f84a 	bl	800a634 <USBD_Get_USB_Status>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b086      	sub	sp, #24
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	72fb      	strb	r3, [r7, #11]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5d0:	893b      	ldrh	r3, [r7, #8]
 800a5d2:	7af9      	ldrb	r1, [r7, #11]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	f7f8 fe19 	bl	800320c <HAL_PCD_EP_Receive>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f827 	bl	800a634 <USBD_Get_USB_Status>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5fc:	4b02      	ldr	r3, [pc, #8]	@ (800a608 <USBD_static_malloc+0x14>)
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	bc80      	pop	{r7}
 800a606:	4770      	bx	lr
 800a608:	20000ac4 	.word	0x20000ac4

0800a60c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d817      	bhi.n	800a678 <USBD_Get_USB_Status+0x44>
 800a648:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <USBD_Get_USB_Status+0x1c>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a667 	.word	0x0800a667
 800a658:	0800a66d 	.word	0x0800a66d
 800a65c:	0800a673 	.word	0x0800a673
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
    break;
 800a664:	e00b      	b.n	800a67e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a666:	2302      	movs	r3, #2
 800a668:	73fb      	strb	r3, [r7, #15]
    break;
 800a66a:	e008      	b.n	800a67e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a66c:	2301      	movs	r3, #1
 800a66e:	73fb      	strb	r3, [r7, #15]
    break;
 800a670:	e005      	b.n	800a67e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a672:	2302      	movs	r3, #2
 800a674:	73fb      	strb	r3, [r7, #15]
    break;
 800a676:	e002      	b.n	800a67e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a678:	2302      	movs	r3, #2
 800a67a:	73fb      	strb	r3, [r7, #15]
    break;
 800a67c:	bf00      	nop
  }
  return usb_status;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <memset>:
 800a68c:	4603      	mov	r3, r0
 800a68e:	4402      	add	r2, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <__libc_init_array>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	2600      	movs	r6, #0
 800a6a0:	4d0c      	ldr	r5, [pc, #48]	@ (800a6d4 <__libc_init_array+0x38>)
 800a6a2:	4c0d      	ldr	r4, [pc, #52]	@ (800a6d8 <__libc_init_array+0x3c>)
 800a6a4:	1b64      	subs	r4, r4, r5
 800a6a6:	10a4      	asrs	r4, r4, #2
 800a6a8:	42a6      	cmp	r6, r4
 800a6aa:	d109      	bne.n	800a6c0 <__libc_init_array+0x24>
 800a6ac:	f000 f81a 	bl	800a6e4 <_init>
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	4d0a      	ldr	r5, [pc, #40]	@ (800a6dc <__libc_init_array+0x40>)
 800a6b4:	4c0a      	ldr	r4, [pc, #40]	@ (800a6e0 <__libc_init_array+0x44>)
 800a6b6:	1b64      	subs	r4, r4, r5
 800a6b8:	10a4      	asrs	r4, r4, #2
 800a6ba:	42a6      	cmp	r6, r4
 800a6bc:	d105      	bne.n	800a6ca <__libc_init_array+0x2e>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c4:	4798      	blx	r3
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	e7ee      	b.n	800a6a8 <__libc_init_array+0xc>
 800a6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ce:	4798      	blx	r3
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	e7f2      	b.n	800a6ba <__libc_init_array+0x1e>
 800a6d4:	0800a774 	.word	0x0800a774
 800a6d8:	0800a774 	.word	0x0800a774
 800a6dc:	0800a774 	.word	0x0800a774
 800a6e0:	0800a778 	.word	0x0800a778

0800a6e4 <_init>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr

0800a6f0 <_fini>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr
