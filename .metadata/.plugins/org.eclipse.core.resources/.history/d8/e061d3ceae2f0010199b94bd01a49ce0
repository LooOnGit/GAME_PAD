/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//#include "usbd_cdc_if.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MCP23017_ADDR     (0x20 << 1)
#define TLC59116_ADDR (0x60 << 1)
#define IODIRA_REG        0x00
#define GPIOA_REG         0x12
#define IODIRB_REG        0x01
#define GPIOB_REG         0x13
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
uint8_t portA;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t portA;
uint8_t portB;
void MCP23017_Init()
{
    uint8_t iodir = 0xFF; // Tất cả chân input

    // Cấu hình cả PORTA và PORTB là input
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, IODIRA_REG, 1, &iodir, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, IODIRB_REG, 1, &iodir, 1, HAL_MAX_DELAY);
}

uint8_t MCP23017_Read_GPIOA()
{
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, MCP23017_ADDR, GPIOA_REG, 1, &value, 1, HAL_MAX_DELAY);
    return value;
}

uint8_t MCP23017_Read_GPIOB()
{
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, MCP23017_ADDR, GPIOB_REG, 1, &value, 1, HAL_MAX_DELAY);
    return value;
}

void MCP23017_WriteRegister(uint8_t reg, uint8_t value) {
    HAL_I2C_Mem_Write(&hi2c1, MCP23017_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
}

void MCP23017_EnablePullUps() {
    MCP23017_WriteRegister(0x0C, 0xFF); // GPPUA - bật pull-up cho tất cả chân A
    MCP23017_WriteRegister(0x0D, 0xFF); // GPPUB - bật pull-up cho tất cả chân B
}

void TLC59116_Init(I2C_HandleTypeDef *hi2c) {
    uint8_t mode1 = 0x00; // Normal mode
    uint8_t mode2 = 0x00; // Totem pole, outputs change on stop
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &mode1, 1, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT, &mode2, 1, HAL_MAX_DELAY);
}

void TLC59116_LED_ON(I2C_HandleTypeDef *hi2c) {
    uint8_t ledout0 = 0xFF; // OUT0 = ON (01), các kênh khác = OFF
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, &ledout0, 1, HAL_MAX_DELAY);
}

void TLC59116_LED_OFF(I2C_HandleTypeDef *hi2c) {
    uint8_t ledout0 = 0x00; // OUT0 = OFF (00)
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, &ledout0, 1, HAL_MAX_DELAY);
}

void TLC59116_LED_ALL_ON(I2C_HandleTypeDef *hi2c) {

    uint8_t ledout[4] = {
        0x55,
        0x55,
        0x55,
        0x55
    };
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_All_PWM_Mode(I2C_HandleTypeDef *hi2c) {
    uint8_t ledout[4] = {0xAA, 0xAA, 0xAA, 0xAA};
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x16, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, 0x17, I2C_MEMADD_SIZE_8BIT, ledout, 4, HAL_MAX_DELAY);
}

void TLC59116_Set_PWM(I2C_HandleTypeDef *hi2c, uint8_t channel, uint8_t value) {
    if (channel > 15) return;
    uint8_t reg = 0x02 + channel;
    HAL_I2C_Mem_Write(hi2c, TLC59116_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
}

uint16_t ADC_VAL = 0;
int value = 0;
int value_ledPWM = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  MCP23017_EnablePullUps();

  //mode digital
//  TLC59116_Init(&hi2c1);

  //mode pwm
  TLC59116_Init(&hi2c1);
  TLC59116_Set_All_PWM_Mode(&hi2c1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  read button
//    portA = MCP23017_Read_GPIOA();
//    portB = MCP23017_Read_GPIOB();
//      int found = 0;
//		for(uint16_t i2c=1; i2c<128; i2c++)
//		{
//			if (HAL_I2C_IsDeviceReady(&hi2c1, 0x60<<1, 5, 100) == HAL_OK)
//			{
//				found = 1;
//				HAL_Delay(500);
//			 }
//			 HAL_Delay(5);
//		 }
//		 if (!found)
//		 {
//			  HAL_Delay(500);
//		 }
//	  }
//	    TLC59116_LED_ON(&hi2c1);
//	    HAL_Delay(1000);
//	    TLC59116_LED_OFF(&hi2c1);
//	    HAL_Delay(1000);

	  //on all led
//	    TLC59116_LED_ALL_ON(&hi2c1);
//	    HAL_Delay(1000);
//
//	    for (uint8_t i = 0; i <= 255; i++) {
//	    	for(uint8_t j = 0; j < 14; j++){
//		        TLC59116_Set_PWM(&hi2c1, j, i); // Tăng độ sáng OUT0
//	    	}
//	        HAL_Delay(10);
//	    }
//	    for (int i = 255; i >= 0; i--) {
//	    	for(uint8_t j = 0; j < 14; j++){
//		        TLC59116_Set_PWM(&hi2c1, j, i); // Tăng độ sáng OUT0
//	    	}
//	        HAL_Delay(10);
//	    }
    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, 100);
    ADC_VAL = HAL_ADC_GetValue(&hadc1);
    HAL_ADC_Stop(&hadc1);
	for(uint8_t j = 0; j < 14; j++){
		TLC59116_Set_PWM(&hi2c1, j, i); // Tăng độ sáng OUT0
	}
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
